import numpy as np
import sympy as sp
import matplotlib.pyplot as plt

MAX_ITERATIONS = 500


def print_results(result):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ —Ñ–∞–π–ª"""
    if output_number == '2':
        with open(output_filename, 'a') as file:
            file.write(result + '\n')
    else:
        print(result)


def build_graph():
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏"""
    x_values = np.linspace(a, b, 400)
    y_values = f(x_values)

    plt.figure(figsize=(12, 10))

    plt.plot(x_values, y_values, label=f'f(x)')

    plt.xticks(np.arange(a, b, 0.25))

    plt.axhline(0, color='black', linewidth=1)
    plt.axvline(0, color='black', linewidth=1)
    plt.axvline(a, color='green', linestyle='--', label=f'a = {a:.3f}')
    plt.axvline(b, color='blue', linestyle='--', label=f'b = {b:.3f}')
    plt.title(f'–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ f(x) –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [{a}, {b}]')
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.ylim(max(f(a), -25), min(f(b), 25))
    plt.legend()
    plt.grid(True)
    plt.show()


def is_monotonic_derivative():
    x = sp.symbols('x')

    test_points = [a + (b - a) * i / 10 for i in range(11)]
    derivative_values = [derivatives[equation_number].subs(x, point).evalf() for point in test_points]

    sign_changes = 0
    for i in range(1, len(derivative_values)):
        if derivative_values[i - 1] * derivative_values[i] < 0:
            sign_changes += 1

    return sign_changes == 0


def half_division_method(a, b, eps, n=0):
    """–ú–µ—Ç–æ–¥ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è"""
    if n > MAX_ITERATIONS:
        raise ValueError("–ú–µ—Ç–æ–¥ –Ω–µ —Å–æ—à—ë–ª—Å—è –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π.")
    x = (a + b) / 2
    print_results(f"–®–∞–≥ {n}: x = {x:.6f}, f(x) = {f(x):.6f}, [a, b] = [{a:.6f}, {b:.6f}], |b - a| = {abs(b - a):.6f}")
    if abs(b - a) < eps and abs(f(x)) < eps:
        return (a + b) / 2, f((a + b) / 2), n
    if f(a) * f(x) > 0:
        return half_division_method(x, b, eps, n + 1)
    else:
        return half_division_method(a, x, eps, n + 1)


def secant_method(x0, x1, eps, n = 0):
    """–ú–µ—Ç–æ–¥ —Å–µ–∫—É—â–∏—Ö"""
    if n > MAX_ITERATIONS:
        raise ValueError("–ú–µ—Ç–æ–¥ –Ω–µ —Å–æ—à—ë–ª—Å—è –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π.")
    x = x1 - (x1-x0)/(f(x1)-f(x0)) * f(x1)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
    print_results(f"–®–∞–≥ {n}: x_(i-1) = {x0:.6f}, x_i = {x1:.6f}, x_(i+1) = {x:.6f}, f(x_(i+1)) = {f(x):.6f}, |x_(i+1) - x_i| = {abs(x1 - x0):.6f}")
    if abs(x - x1) <= eps or abs(f(x)) <= eps:
        return x, f(x), n
    return secant_method(x1, x, eps, n + 1)


def simple_iteration_method(x0, phi, eps, n = 0):
    """–ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏"""
    if n > MAX_ITERATIONS:
        raise ValueError("–ú–µ—Ç–æ–¥ –Ω–µ —Å–æ—à—ë–ª—Å—è –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π.")
    x = phi(x0)
    print_results(f"–®–∞–≥ {n}: x_i = {x0:.6f}, x_(i+1) = {x:.6f}, ùùã(x_(i+1)) = {phi(x):.6f}, f(x_(i+1)) = {f(x):.6f}, |x_(i+1) - x_i| = {abs(x - x0):.6f}")
    if abs(f(x)) < eps:
        return x, f(x), n
    return simple_iteration_method(x, phi, eps, n + 1)


print('–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 2_1: "–ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π". –í–∞—Ä–∏–∞–Ω—Ç 13\n')


# --- –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---

a = 0
b = 0
eps = 0


# --- –£—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ ---

x = sp.symbols('x')
equations = {
    '1': sp.sympify(2.74 * x**3 - 1.93 * x**2 - 15.28 * x - 3.72),
    '2': sp.sympify(3.12*sp.exp(0.8*x) - 2.45*sp.sin(1.3*x) + 4.67*x - 7.89),
    '3': sp.sympify(-0.38*x**3 - 3.42*x**2 + 2.51*x + 8.75),
    '4': sp.sympify(-2.71*sp.log(1 + 0.9*x) - 5.32*x + 4.12)
}

derivatives = {key:  sp.diff(equations[key]) for key in equations.keys()}
second_derivatives = {key: sp.lambdify(x, sp.diff(derivatives[key]), "numpy") for key in equations.keys()}


# --- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ---

print('1: 2.74x^3 - 1.93x^2 - 15.28x - 3.72\n2: 3.12e^(0.8x) - 2.45sin(1.3x) + 4.67x - 7.89')
print('3: -0.38x^3 - 3.42x^2 + 2.51x + 8.75\n4: -2.71ln(1 + 0.9x) - 5.32x + 4.12')
equation_number = input('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: ')

while equation_number not in {'1', '2', '3', '4'}:
    equation_number = input('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–µ (1), –≤—Ç–æ—Ä–æ–µ (2), —Ç—Ä–µ—Ç—å–µ (3) –∏–ª–∏ —á–µ—Ç–≤—ë—Ä—Ç–æ–µ (4) —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: ')

f = sp.lambdify(x, equations[equation_number], "numpy")
df = sp.lambdify(x, derivatives[equation_number], "numpy")


print('\n1: –ú–µ—Ç–æ–¥ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è\n2: –ú–µ—Ç–æ–¥ —Å–µ–∫—É—â–∏—Ö\n3: –ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏')
method_number = input('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è: ')
while method_number not in {'1', '2', '3'}:
    method_number = input('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è (1), –º–µ—Ç–æ–¥ —Å–µ–∫—É—â–∏—Ö (2) –∏–ª–∏ –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (3): ')


print('\n–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ(–≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –∫–æ—Ä–Ω—é –∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)?')
print("1: —Å –∫–æ–Ω—Å–æ–ª–∏\n2: —Å —Ñ–∞–π–ª–∞")
input_number = input()
while input_number not in {'1', '2'}:
    input_number = input('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π (1) –∏–ª–∏ –≤—Ç–æ—Ä–æ–π (2) –≤–∞—Ä–∏–∞–Ω—Ç: ')

if input_number == '1':
    print("\n–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:")
    a = float(input('a = '))
    if equation_number == '4':
        while a <= -1/0.9:
            print('–í—ã—Ö–æ–¥–∏—Ç –∑–∞ –æ–±–ª–∞—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (x > -1/0.9). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
            a = float(input('a = '))
    b = float(input('b = '))
    while a >= b:
        print('–ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –ª–µ–≤–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        b = float(input('b = '))
    print("–í–≤–µ–¥–∏—Ç–µ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:")
    eps = float(input('Œµ = '))
else:
    input_filename = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ").strip()
    with open(input_filename, 'r') as file:
        lines = file.readlines()
        a, b, eps = float(lines[0]), float(lines[1]), float(lines[2])
        if a >= b:
            raise ValueError('–ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –ª–µ–≤–æ–π.')
        if equation_number == '4':
            if a <= -1/0.9:
                raise ValueError('–õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –æ–±–ª–∞—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (x > -1/0.9).')

print('\n–ì–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ—Ä–µ–Ω—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è, –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ—Ä–Ω–µ, —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π)?')
print("1: –≤ –∫–æ–Ω—Å–æ–ª–∏\n2: –≤ —Ñ–∞–π–ª–µ")
output_number = input()
while output_number not in {'1', '2'}:
    output_number = input('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π (1) –∏–ª–∏ –≤—Ç–æ—Ä–æ–π (2) –≤–∞—Ä–∏–∞–Ω—Ç: ')

if output_number == '2':
    output_filename = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ").strip()

# --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ ---

build_graph()


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ ---

if f(a) * f(b) >= 0:
    raise ValueError("–ù–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ—Ä–Ω–∏!")
elif not is_monotonic_derivative():
    raise ValueError("–ù–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–π!")


# --- –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π ---

print()

if method_number == '1':
    x, fx, n = half_division_method(a, b, eps)
    print_results(f"\n–ò—Ç–æ–≥: x = {x:.6f}, f(x) = {fx:.6f}, —à–∞–≥–æ–≤: {n}")

elif method_number == '2':
    x0 = b
    if f(a) * second_derivatives[equation_number](a) > 0:
        x0 = a
    x, fx, n = secant_method(x0, x0 + eps, eps)
    print_results(f"\n–ò—Ç–æ–≥: x = {x:.6f}, f(x) = {fx:.6f}, —à–∞–≥–æ–≤: {n}")

else:
    lamb = 1 / max(df(a), df(b))
    if df(a) > 0 and df(b) > 0:
        lamb = -lamb
    phi = lambda x: x + lamb * f(x)
    dphi = lambda x: 1 + lamb * df(x)
    q = max(abs(phi(a)), abs(phi(b)))
    print_results(f'|ùùã(a)| = {abs(phi(a))}, |ùùã(b)| = {abs(phi(b))}')
    if q < 1:
        print_results("–ò—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ö–æ–¥–∏—Ç—Å—è!\n")
        if q <= 0.5:
            x, fx, n = simple_iteration_method(a, phi, eps)
        else:
            x, fx, n = simple_iteration_method(a, phi, (1 - q) / q * eps)
        print_results(f"\n–ò—Ç–æ–≥: x = {x:.6f}, f(x) = {fx:.6f}, —à–∞–≥–æ–≤: {n}")
    else:
        print_results("–£—Å–ª–æ–≤–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
