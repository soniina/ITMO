import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-progressspinner {
    position: relative;
    margin: 0 auto;
    width: 100px;
    height: 100px;
    display: inline-block;
}

.p-progressspinner::before {
    content: "";
    display: block;
    padding-top: 100%;
}

.p-progressspinner-spin {
    height: 100%;
    transform-origin: center center;
    width: 100%;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
    animation: p-progressspinner-rotate 2s linear infinite;
}

.p-progressspinner-circle {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: 0;
    stroke: ${dt('progressspinner.color.1')};
    animation: p-progressspinner-dash 1.5s ease-in-out infinite, p-progressspinner-color 6s ease-in-out infinite;
    stroke-linecap: round;
}

@keyframes p-progressspinner-rotate {
    100% {
        transform: rotate(360deg);
    }
}
@keyframes p-progressspinner-dash {
    0% {
        stroke-dasharray: 1, 200;
        stroke-dashoffset: 0;
    }
    50% {
        stroke-dasharray: 89, 200;
        stroke-dashoffset: -35px;
    }
    100% {
        stroke-dasharray: 89, 200;
        stroke-dashoffset: -124px;
    }
}
@keyframes p-progressspinner-color {
    100%,
    0% {
        stroke: ${dt('progressspinner.color.1')};
    }
    40% {
        stroke: ${dt('progressspinner.color.2')};
    }
    66% {
        stroke: ${dt('progressspinner.color.3')};
    }
    80%,
    90% {
        stroke: ${dt('progressspinner.color.4')};
    }
}
`;
const classes = {
    root: 'p-progressspinner',
    spin: 'p-progressspinner-spin',
    circle: 'p-progressspinner-circle'
};
export class ProgressSpinnerStyle extends BaseStyle {
    name = 'progressspinner';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵProgressSpinnerStyle_BaseFactory; return function ProgressSpinnerStyle_Factory(__ngFactoryType__) { return (ɵProgressSpinnerStyle_BaseFactory || (ɵProgressSpinnerStyle_BaseFactory = i0.ɵɵgetInheritedFactory(ProgressSpinnerStyle)))(__ngFactoryType__ || ProgressSpinnerStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProgressSpinnerStyle, factory: ProgressSpinnerStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ProgressSpinnerStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * ProgressSpinner is a process status indicator.
 *
 * [Live Demo](https://www.primeng.org/progressspinner)
 *
 * @module progressspinnerstyle
 *
 */
export var ProgressSpinnerClasses;
(function (ProgressSpinnerClasses) {
    /**
     * Class name of the root element
     */
    ProgressSpinnerClasses["root"] = "p-progressspinner";
    /**
     * Class name of the spin element
     */
    ProgressSpinnerClasses["spin"] = "p-progressspinner-spin";
    /**
     * Class name of the circle element
     */
    ProgressSpinnerClasses["circle"] = "p-progressspinner-circle";
})(ProgressSpinnerClasses || (ProgressSpinnerClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NzcGlubmVyc3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvZ3Jlc3NzcGlubmVyL3N0eWxlL3Byb2dyZXNzc3Bpbm5lcnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztjQStCWixFQUFFLENBQUMseUJBQXlCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkEyQnpCLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQzs7O2tCQUc3QixFQUFFLENBQUMseUJBQXlCLENBQUM7OztrQkFHN0IsRUFBRSxDQUFDLHlCQUF5QixDQUFDOzs7O2tCQUk3QixFQUFFLENBQUMseUJBQXlCLENBQUM7OztDQUc5QyxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUc7SUFDWixJQUFJLEVBQUUsbUJBQW1CO0lBQ3pCLElBQUksRUFBRSx3QkFBd0I7SUFDOUIsTUFBTSxFQUFFLDBCQUEwQjtDQUNyQyxDQUFDO0FBR0YsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFNBQVM7SUFDL0MsSUFBSSxHQUFHLGlCQUFpQixDQUFDO0lBRXpCLEtBQUssR0FBRyxLQUFLLENBQUM7SUFFZCxPQUFPLEdBQUcsT0FBTyxDQUFDOzZQQUxULG9CQUFvQix5QkFBcEIsb0JBQW9CO2dFQUFwQixvQkFBb0IsV0FBcEIsb0JBQW9COztpRkFBcEIsb0JBQW9CO2NBRGhDLFVBQVU7O0FBU1g7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQU4sSUFBWSxzQkFhWDtBQWJELFdBQVksc0JBQXNCO0lBQzlCOztPQUVHO0lBQ0gsb0RBQTBCLENBQUE7SUFDMUI7O09BRUc7SUFDSCx5REFBK0IsQ0FBQTtJQUMvQjs7T0FFRztJQUNILDZEQUFtQyxDQUFBO0FBQ3ZDLENBQUMsRUFiVyxzQkFBc0IsS0FBdEIsc0JBQXNCLFFBYWpDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC1wcm9ncmVzc3NwaW5uZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICB3aWR0aDogMTAwcHg7XG4gICAgaGVpZ2h0OiAxMDBweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi5wLXByb2dyZXNzc3Bpbm5lcjo6YmVmb3JlIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBhZGRpbmctdG9wOiAxMDAlO1xufVxuXG4ucC1wcm9ncmVzc3NwaW5uZXItc3BpbiB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogMDtcbiAgICByaWdodDogMDtcbiAgICBtYXJnaW46IGF1dG87XG4gICAgYW5pbWF0aW9uOiBwLXByb2dyZXNzc3Bpbm5lci1yb3RhdGUgMnMgbGluZWFyIGluZmluaXRlO1xufVxuXG4ucC1wcm9ncmVzc3NwaW5uZXItY2lyY2xlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiA4OSwgMjAwO1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICAgIHN0cm9rZTogJHtkdCgncHJvZ3Jlc3NzcGlubmVyLmNvbG9yLjEnKX07XG4gICAgYW5pbWF0aW9uOiBwLXByb2dyZXNzc3Bpbm5lci1kYXNoIDEuNXMgZWFzZS1pbi1vdXQgaW5maW5pdGUsIHAtcHJvZ3Jlc3NzcGlubmVyLWNvbG9yIDZzIGVhc2UtaW4tb3V0IGluZmluaXRlO1xuICAgIHN0cm9rZS1saW5lY2FwOiByb3VuZDtcbn1cblxuQGtleWZyYW1lcyBwLXByb2dyZXNzc3Bpbm5lci1yb3RhdGUge1xuICAgIDEwMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIH1cbn1cbkBrZXlmcmFtZXMgcC1wcm9ncmVzc3NwaW5uZXItZGFzaCB7XG4gICAgMCUge1xuICAgICAgICBzdHJva2UtZGFzaGFycmF5OiAxLCAyMDA7XG4gICAgICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICAgIH1cbiAgICA1MCUge1xuICAgICAgICBzdHJva2UtZGFzaGFycmF5OiA4OSwgMjAwO1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogLTM1cHg7XG4gICAgfVxuICAgIDEwMCUge1xuICAgICAgICBzdHJva2UtZGFzaGFycmF5OiA4OSwgMjAwO1xuICAgICAgICBzdHJva2UtZGFzaG9mZnNldDogLTEyNHB4O1xuICAgIH1cbn1cbkBrZXlmcmFtZXMgcC1wcm9ncmVzc3NwaW5uZXItY29sb3Ige1xuICAgIDEwMCUsXG4gICAgMCUge1xuICAgICAgICBzdHJva2U6ICR7ZHQoJ3Byb2dyZXNzc3Bpbm5lci5jb2xvci4xJyl9O1xuICAgIH1cbiAgICA0MCUge1xuICAgICAgICBzdHJva2U6ICR7ZHQoJ3Byb2dyZXNzc3Bpbm5lci5jb2xvci4yJyl9O1xuICAgIH1cbiAgICA2NiUge1xuICAgICAgICBzdHJva2U6ICR7ZHQoJ3Byb2dyZXNzc3Bpbm5lci5jb2xvci4zJyl9O1xuICAgIH1cbiAgICA4MCUsXG4gICAgOTAlIHtcbiAgICAgICAgc3Ryb2tlOiAke2R0KCdwcm9ncmVzc3NwaW5uZXIuY29sb3IuNCcpfTtcbiAgICB9XG59XG5gO1xuXG5jb25zdCBjbGFzc2VzID0ge1xuICAgIHJvb3Q6ICdwLXByb2dyZXNzc3Bpbm5lcicsXG4gICAgc3BpbjogJ3AtcHJvZ3Jlc3NzcGlubmVyLXNwaW4nLFxuICAgIGNpcmNsZTogJ3AtcHJvZ3Jlc3NzcGlubmVyLWNpcmNsZSdcbn07XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc1NwaW5uZXJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICdwcm9ncmVzc3NwaW5uZXInO1xuXG4gICAgdGhlbWUgPSB0aGVtZTtcblxuICAgIGNsYXNzZXMgPSBjbGFzc2VzO1xufVxuXG4vKipcbiAqXG4gKiBQcm9ncmVzc1NwaW5uZXIgaXMgYSBwcm9jZXNzIHN0YXR1cyBpbmRpY2F0b3IuXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvcHJvZ3Jlc3NzcGlubmVyKVxuICpcbiAqIEBtb2R1bGUgcHJvZ3Jlc3NzcGlubmVyc3R5bGVcbiAqXG4gKi9cbmV4cG9ydCBlbnVtIFByb2dyZXNzU3Bpbm5lckNsYXNzZXMge1xuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICAgICAqL1xuICAgIHJvb3QgPSAncC1wcm9ncmVzc3NwaW5uZXInLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHNwaW4gZWxlbWVudFxuICAgICAqL1xuICAgIHNwaW4gPSAncC1wcm9ncmVzc3NwaW5uZXItc3BpbicsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgY2lyY2xlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBjaXJjbGUgPSAncC1wcm9ncmVzc3NwaW5uZXItY2lyY2xlJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2dyZXNzU3Bpbm5lclN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHt9XG4iXX0=