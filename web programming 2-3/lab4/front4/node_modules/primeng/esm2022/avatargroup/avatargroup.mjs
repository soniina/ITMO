import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, HostBinding, inject, Input, NgModule, ViewEncapsulation } from '@angular/core';
import { SharedModule } from 'primeng/api';
import { BaseComponent } from 'primeng/basecomponent';
import { AvatarGroupStyle } from './style/avatargroupstyle';
import * as i0 from "@angular/core";
const _c0 = ["*"];
/**
 * AvatarGroup is a helper component for Avatar.
 * @group Components
 */
export class AvatarGroup extends BaseComponent {
    /**
     * Style class of the component
     * @group Props
     */
    styleClass;
    /**
     * Inline style of the component.
     * @group Props
     */
    style;
    get hostClass() {
        return this.styleClass;
    }
    get hostStyle() {
        return this.style;
    }
    _componentStyle = inject(AvatarGroupStyle);
    static ɵfac = /*@__PURE__*/ (() => { let ɵAvatarGroup_BaseFactory; return function AvatarGroup_Factory(__ngFactoryType__) { return (ɵAvatarGroup_BaseFactory || (ɵAvatarGroup_BaseFactory = i0.ɵɵgetInheritedFactory(AvatarGroup)))(__ngFactoryType__ || AvatarGroup); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AvatarGroup, selectors: [["p-avatarGroup"], ["p-avatar-group"], ["p-avatargroup"]], hostVars: 8, hostBindings: function AvatarGroup_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵstyleMap(ctx.hostStyle);
            i0.ɵɵclassMap(ctx.hostClass);
            i0.ɵɵclassProp("p-avatar-group", true)("p-component", true);
        } }, inputs: { styleClass: "styleClass", style: "style" }, standalone: true, features: [i0.ɵɵProvidersFeature([AvatarGroupStyle]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function AvatarGroup_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        } }, dependencies: [CommonModule, SharedModule], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AvatarGroup, [{
        type: Component,
        args: [{
                selector: 'p-avatarGroup, p-avatar-group, p-avatargroup',
                standalone: true,
                imports: [CommonModule, SharedModule],
                template: ` <ng-content></ng-content> `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [AvatarGroupStyle],
                host: {
                    '[class.p-avatar-group]': 'true',
                    '[class.p-component]': 'true'
                }
            }]
    }], null, { styleClass: [{
            type: Input
        }], style: [{
            type: Input
        }], hostClass: [{
            type: HostBinding,
            args: ['class']
        }], hostStyle: [{
            type: HostBinding,
            args: ['style']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(AvatarGroup, { className: "AvatarGroup" }); })();
export class AvatarGroupModule {
    static ɵfac = function AvatarGroupModule_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || AvatarGroupModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: AvatarGroupModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [AvatarGroup, SharedModule, SharedModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AvatarGroupModule, [{
        type: NgModule,
        args: [{
                imports: [AvatarGroup, SharedModule],
                exports: [AvatarGroup, SharedModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(AvatarGroupModule, { imports: [AvatarGroup, SharedModule], exports: [AvatarGroup, SharedModule] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXZhdGFyZ3JvdXAvYXZhdGFyZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVILE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7QUFFNUQ7OztHQUdHO0FBY0gsTUFBTSxPQUFPLFdBQVksU0FBUSxhQUFhO0lBQzFDOzs7T0FHRztJQUNNLFVBQVUsQ0FBcUI7SUFDeEM7OztPQUdHO0lBQ00sS0FBSyxDQUE4QztJQUU1RCxJQUEwQixTQUFTO1FBQy9CLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBMEIsU0FBUztRQUMvQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELGVBQWUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzt5TkFwQmxDLFdBQVcseUJBQVgsV0FBVzs2REFBWCxXQUFXO1lBQVgsNEJBQVc7WUFBWCw0QkFBVztZQUFYLGlDQUFBLElBQUksQ0FBTyxnQkFBWCxJQUFJLENBQU87c0hBTlQsQ0FBQyxnQkFBZ0IsQ0FBQzs7WUFIakIsa0JBQXlCOzRCQUQzQixZQUFZLEVBQUUsWUFBWTs7aUZBVTNCLFdBQVc7Y0FidkIsU0FBUztlQUFDO2dCQUNQLFFBQVEsRUFBRSw4Q0FBOEM7Z0JBQ3hELFVBQVUsRUFBRSxJQUFJO2dCQUNoQixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDO2dCQUNyQyxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO2dCQUM3QixJQUFJLEVBQUU7b0JBQ0Ysd0JBQXdCLEVBQUUsTUFBTTtvQkFDaEMscUJBQXFCLEVBQUUsTUFBTTtpQkFDaEM7YUFDSjtnQkFNWSxVQUFVO2tCQUFsQixLQUFLO1lBS0csS0FBSztrQkFBYixLQUFLO1lBRW9CLFNBQVM7a0JBQWxDLFdBQVc7bUJBQUMsT0FBTztZQUlNLFNBQVM7a0JBQWxDLFdBQVc7bUJBQUMsT0FBTzs7a0ZBaEJYLFdBQVc7QUEyQnhCLE1BQU0sT0FBTyxpQkFBaUI7MkdBQWpCLGlCQUFpQjs0REFBakIsaUJBQWlCO2dFQUhoQixXQUFXLEVBQUUsWUFBWSxFQUNaLFlBQVk7O2lGQUUxQixpQkFBaUI7Y0FKN0IsUUFBUTtlQUFDO2dCQUNOLE9BQU8sRUFBRSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUM7Z0JBQ3BDLE9BQU8sRUFBRSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUM7YUFDdkM7O3dGQUNZLGlCQUFpQixjQTNCakIsV0FBVyxFQXdCRyxZQUFZLGFBeEIxQixXQUFXLEVBeUJHLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIGluamVjdCwgSW5wdXQsIE5nTW9kdWxlLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hhcmVkTW9kdWxlIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCB9IGZyb20gJ3ByaW1lbmcvYmFzZWNvbXBvbmVudCc7XG5pbXBvcnQgeyBBdmF0YXJHcm91cFN0eWxlIH0gZnJvbSAnLi9zdHlsZS9hdmF0YXJncm91cHN0eWxlJztcblxuLyoqXG4gKiBBdmF0YXJHcm91cCBpcyBhIGhlbHBlciBjb21wb25lbnQgZm9yIEF2YXRhci5cbiAqIEBncm91cCBDb21wb25lbnRzXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAncC1hdmF0YXJHcm91cCwgcC1hdmF0YXItZ3JvdXAsIHAtYXZhdGFyZ3JvdXAnLFxuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgU2hhcmVkTW9kdWxlXSxcbiAgICB0ZW1wbGF0ZTogYCA8bmctY29udGVudD48L25nLWNvbnRlbnQ+IGAsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBwcm92aWRlcnM6IFtBdmF0YXJHcm91cFN0eWxlXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbY2xhc3MucC1hdmF0YXItZ3JvdXBdJzogJ3RydWUnLFxuICAgICAgICAnW2NsYXNzLnAtY29tcG9uZW50XSc6ICd0cnVlJ1xuICAgIH1cbn0pXG5leHBvcnQgY2xhc3MgQXZhdGFyR3JvdXAgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBTdHlsZSBjbGFzcyBvZiB0aGUgY29tcG9uZW50XG4gICAgICogQGdyb3VwIFByb3BzXG4gICAgICovXG4gICAgQElucHV0KCkgc3R5bGVDbGFzczogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIC8qKlxuICAgICAqIElubGluZSBzdHlsZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqIEBncm91cCBQcm9wc1xuICAgICAqL1xuICAgIEBJbnB1dCgpIHN0eWxlOiB7IFtrbGFzczogc3RyaW5nXTogYW55IH0gfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGdldCBob3N0Q2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlQ2xhc3M7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZScpIGdldCBob3N0U3R5bGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlO1xuICAgIH1cblxuICAgIF9jb21wb25lbnRTdHlsZSA9IGluamVjdChBdmF0YXJHcm91cFN0eWxlKTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbQXZhdGFyR3JvdXAsIFNoYXJlZE1vZHVsZV0sXG4gICAgZXhwb3J0czogW0F2YXRhckdyb3VwLCBTaGFyZWRNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIEF2YXRhckdyb3VwTW9kdWxlIHt9XG4iXX0=