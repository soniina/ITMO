import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-divider-horizontal {
    display: flex;
    width: 100%;
    position: relative;
    align-items: center;
    margin: ${dt('divider.horizontal.margin')};
    padding: ${dt('divider.horizontal.padding')};
}

.p-divider-horizontal:before {
    position: absolute;
    display: block;
    inset-block-start: 50%;
    inset-inline-start: 0;
    width: 100%;
    content: "";
    border-block-start: 1px solid ${dt('divider.border.color')};
}

.p-divider-horizontal .p-divider-content {
    padding: ${dt('divider.horizontal.content.padding')};
}

.p-divider-vertical {
    min-height: 100%;
    display: flex;
    position: relative;
    justify-content: center;
    margin: ${dt('divider.vertical.margin')};
    padding: ${dt('divider.vertical.padding')};
}

.p-divider-vertical:before {
    position: absolute;
    display: block;
    inset-block-start: 0;
    inset-inline-start: 50%;
    height: 100%;
    content: "";
    border-inline-start: 1px solid ${dt('divider.border.color')};
}

.p-divider.p-divider-vertical .p-divider-content {
    padding: ${dt('divider.vertical.content.padding')};
}

.p-divider-content {
    z-index: 1;
    background: ${dt('divider.content.background')};
    color: ${dt('divider.content.color')};
}

.p-divider-solid.p-divider-horizontal:before {
    border-block-start-style: solid;
}

.p-divider-solid.p-divider-vertical:before {
    border-inline-start-style: solid;
}

.p-divider-dashed.p-divider-horizontal:before {
    border-block-start-style: dashed;
}

.p-divider-dashed.p-divider-vertical:before {
    border-inline-start-style: dashed;
}

.p-divider-dotted.p-divider-horizontal:before {
    border-block-start-style: dotted;
}

.p-divider-dotted.p-divider-vertical:before {
    border-inline-start-style: dotted;
}

.p-divider-left:dir(rtl),
.p-divider-right:dir(rtl) {
    flex-direction: row-reverse;
}
`;
/* Position */
const inlineStyles = {
    root: ({ props }) => ({
        justifyContent: props.layout === 'horizontal' ? (props.align === 'center' || props.align === null ? 'center' : props.align === 'left' ? 'flex-start' : props.align === 'right' ? 'flex-end' : null) : null,
        alignItems: props.layout === 'vertical' ? (props.align === 'center' || props.align === null ? 'center' : props.align === 'top' ? 'flex-start' : props.align === 'bottom' ? 'flex-end' : null) : null
    })
};
const classes = {
    root: ({ props }) => [
        'p-divider p-component',
        'p-divider-' + props.layout,
        'p-divider-' + props.type,
        { 'p-divider-left': props.layout === 'horizontal' && (!props.align || props.align === 'left') },
        { 'p-divider-center': props.layout === 'horizontal' && props.align === 'center' },
        { 'p-divider-right': props.layout === 'horizontal' && props.align === 'right' },
        { 'p-divider-top': props.layout === 'vertical' && props.align === 'top' },
        { 'p-divider-center': props.layout === 'vertical' && (!props.align || props.align === 'center') },
        { 'p-divider-bottom': props.layout === 'vertical' && props.align === 'bottom' }
    ],
    content: 'p-divider-content'
};
export class DividerStyle extends BaseStyle {
    name = 'divider';
    theme = theme;
    classes = classes;
    inlineStyles = inlineStyles;
    static ɵfac = /*@__PURE__*/ (() => { let ɵDividerStyle_BaseFactory; return function DividerStyle_Factory(__ngFactoryType__) { return (ɵDividerStyle_BaseFactory || (ɵDividerStyle_BaseFactory = i0.ɵɵgetInheritedFactory(DividerStyle)))(__ngFactoryType__ || DividerStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DividerStyle, factory: DividerStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DividerStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Divider is used to separate contents.
 *
 * [Live Demo](https://primeng.org/divider)
 *
 * @module dividerstyle
 *
 */
export var DividerClasses;
(function (DividerClasses) {
    /**
     * Class name of the root element
     */
    DividerClasses["root"] = "p-divider";
    /**
     * Class name of the content element
     */
    DividerClasses["content"] = "p-divider-content";
})(DividerClasses || (DividerClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGl2aWRlcnN0eWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2RpdmlkZXIvc3R5bGUvZGl2aWRlcnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7O2NBTVosRUFBRSxDQUFDLDJCQUEyQixDQUFDO2VBQzlCLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7Ozs7Ozs7OztvQ0FVWCxFQUFFLENBQUMsc0JBQXNCLENBQUM7Ozs7ZUFJL0MsRUFBRSxDQUFDLG9DQUFvQyxDQUFDOzs7Ozs7OztjQVF6QyxFQUFFLENBQUMseUJBQXlCLENBQUM7ZUFDNUIsRUFBRSxDQUFDLDBCQUEwQixDQUFDOzs7Ozs7Ozs7O3FDQVVSLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzs7OztlQUloRCxFQUFFLENBQUMsa0NBQWtDLENBQUM7Ozs7O2tCQUtuQyxFQUFFLENBQUMsNEJBQTRCLENBQUM7YUFDckMsRUFBRSxDQUFDLHVCQUF1QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBK0J2QyxDQUFDO0FBRUYsY0FBYztBQUNkLE1BQU0sWUFBWSxHQUFHO0lBQ2pCLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbEIsY0FBYyxFQUFFLEtBQUssQ0FBQyxNQUFNLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO1FBQzFNLFVBQVUsRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtLQUN2TSxDQUFDO0NBQ0wsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHO0lBQ1osSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDakIsdUJBQXVCO1FBQ3ZCLFlBQVksR0FBRyxLQUFLLENBQUMsTUFBTTtRQUMzQixZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUk7UUFDekIsRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLFlBQVksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxFQUFFO1FBQy9GLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLE1BQU0sS0FBSyxZQUFZLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDakYsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLFlBQVksSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLE9BQU8sRUFBRTtRQUMvRSxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLFVBQVUsSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtRQUN6RSxFQUFFLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxNQUFNLEtBQUssVUFBVSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLEVBQUU7UUFDakcsRUFBRSxrQkFBa0IsRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLFVBQVUsSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtLQUNsRjtJQUNELE9BQU8sRUFBRSxtQkFBbUI7Q0FDL0IsQ0FBQztBQUdGLE1BQU0sT0FBTyxZQUFhLFNBQVEsU0FBUztJQUN2QyxJQUFJLEdBQUcsU0FBUyxDQUFDO0lBRWpCLEtBQUssR0FBRyxLQUFLLENBQUM7SUFFZCxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBRWxCLFlBQVksR0FBRyxZQUFZLENBQUM7Nk5BUG5CLFlBQVkseUJBQVosWUFBWTtnRUFBWixZQUFZLFdBQVosWUFBWTs7aUZBQVosWUFBWTtjQUR4QixVQUFVOztBQVdYOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFOLElBQVksY0FTWDtBQVRELFdBQVksY0FBYztJQUN0Qjs7T0FFRztJQUNILG9DQUFrQixDQUFBO0lBQ2xCOztPQUVHO0lBQ0gsK0NBQTZCLENBQUE7QUFDakMsQ0FBQyxFQVRXLGNBQWMsS0FBZCxjQUFjLFFBU3pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC1kaXZpZGVyLWhvcml6b250YWwge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAke2R0KCdkaXZpZGVyLmhvcml6b250YWwubWFyZ2luJyl9O1xuICAgIHBhZGRpbmc6ICR7ZHQoJ2RpdmlkZXIuaG9yaXpvbnRhbC5wYWRkaW5nJyl9O1xufVxuXG4ucC1kaXZpZGVyLWhvcml6b250YWw6YmVmb3JlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgaW5zZXQtYmxvY2stc3RhcnQ6IDUwJTtcbiAgICBpbnNldC1pbmxpbmUtc3RhcnQ6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBib3JkZXItYmxvY2stc3RhcnQ6IDFweCBzb2xpZCAke2R0KCdkaXZpZGVyLmJvcmRlci5jb2xvcicpfTtcbn1cblxuLnAtZGl2aWRlci1ob3Jpem9udGFsIC5wLWRpdmlkZXItY29udGVudCB7XG4gICAgcGFkZGluZzogJHtkdCgnZGl2aWRlci5ob3Jpem9udGFsLmNvbnRlbnQucGFkZGluZycpfTtcbn1cblxuLnAtZGl2aWRlci12ZXJ0aWNhbCB7XG4gICAgbWluLWhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtYXJnaW46ICR7ZHQoJ2RpdmlkZXIudmVydGljYWwubWFyZ2luJyl9O1xuICAgIHBhZGRpbmc6ICR7ZHQoJ2RpdmlkZXIudmVydGljYWwucGFkZGluZycpfTtcbn1cblxuLnAtZGl2aWRlci12ZXJ0aWNhbDpiZWZvcmUge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBpbnNldC1ibG9jay1zdGFydDogMDtcbiAgICBpbnNldC1pbmxpbmUtc3RhcnQ6IDUwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBib3JkZXItaW5saW5lLXN0YXJ0OiAxcHggc29saWQgJHtkdCgnZGl2aWRlci5ib3JkZXIuY29sb3InKX07XG59XG5cbi5wLWRpdmlkZXIucC1kaXZpZGVyLXZlcnRpY2FsIC5wLWRpdmlkZXItY29udGVudCB7XG4gICAgcGFkZGluZzogJHtkdCgnZGl2aWRlci52ZXJ0aWNhbC5jb250ZW50LnBhZGRpbmcnKX07XG59XG5cbi5wLWRpdmlkZXItY29udGVudCB7XG4gICAgei1pbmRleDogMTtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCdkaXZpZGVyLmNvbnRlbnQuYmFja2dyb3VuZCcpfTtcbiAgICBjb2xvcjogJHtkdCgnZGl2aWRlci5jb250ZW50LmNvbG9yJyl9O1xufVxuXG4ucC1kaXZpZGVyLXNvbGlkLnAtZGl2aWRlci1ob3Jpem9udGFsOmJlZm9yZSB7XG4gICAgYm9yZGVyLWJsb2NrLXN0YXJ0LXN0eWxlOiBzb2xpZDtcbn1cblxuLnAtZGl2aWRlci1zb2xpZC5wLWRpdmlkZXItdmVydGljYWw6YmVmb3JlIHtcbiAgICBib3JkZXItaW5saW5lLXN0YXJ0LXN0eWxlOiBzb2xpZDtcbn1cblxuLnAtZGl2aWRlci1kYXNoZWQucC1kaXZpZGVyLWhvcml6b250YWw6YmVmb3JlIHtcbiAgICBib3JkZXItYmxvY2stc3RhcnQtc3R5bGU6IGRhc2hlZDtcbn1cblxuLnAtZGl2aWRlci1kYXNoZWQucC1kaXZpZGVyLXZlcnRpY2FsOmJlZm9yZSB7XG4gICAgYm9yZGVyLWlubGluZS1zdGFydC1zdHlsZTogZGFzaGVkO1xufVxuXG4ucC1kaXZpZGVyLWRvdHRlZC5wLWRpdmlkZXItaG9yaXpvbnRhbDpiZWZvcmUge1xuICAgIGJvcmRlci1ibG9jay1zdGFydC1zdHlsZTogZG90dGVkO1xufVxuXG4ucC1kaXZpZGVyLWRvdHRlZC5wLWRpdmlkZXItdmVydGljYWw6YmVmb3JlIHtcbiAgICBib3JkZXItaW5saW5lLXN0YXJ0LXN0eWxlOiBkb3R0ZWQ7XG59XG5cbi5wLWRpdmlkZXItbGVmdDpkaXIocnRsKSxcbi5wLWRpdmlkZXItcmlnaHQ6ZGlyKHJ0bCkge1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbn1cbmA7XG5cbi8qIFBvc2l0aW9uICovXG5jb25zdCBpbmxpbmVTdHlsZXMgPSB7XG4gICAgcm9vdDogKHsgcHJvcHMgfSkgPT4gKHtcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IHByb3BzLmxheW91dCA9PT0gJ2hvcml6b250YWwnID8gKHByb3BzLmFsaWduID09PSAnY2VudGVyJyB8fCBwcm9wcy5hbGlnbiA9PT0gbnVsbCA/ICdjZW50ZXInIDogcHJvcHMuYWxpZ24gPT09ICdsZWZ0JyA/ICdmbGV4LXN0YXJ0JyA6IHByb3BzLmFsaWduID09PSAncmlnaHQnID8gJ2ZsZXgtZW5kJyA6IG51bGwpIDogbnVsbCxcbiAgICAgICAgYWxpZ25JdGVtczogcHJvcHMubGF5b3V0ID09PSAndmVydGljYWwnID8gKHByb3BzLmFsaWduID09PSAnY2VudGVyJyB8fCBwcm9wcy5hbGlnbiA9PT0gbnVsbCA/ICdjZW50ZXInIDogcHJvcHMuYWxpZ24gPT09ICd0b3AnID8gJ2ZsZXgtc3RhcnQnIDogcHJvcHMuYWxpZ24gPT09ICdib3R0b20nID8gJ2ZsZXgtZW5kJyA6IG51bGwpIDogbnVsbFxuICAgIH0pXG59O1xuXG5jb25zdCBjbGFzc2VzID0ge1xuICAgIHJvb3Q6ICh7IHByb3BzIH0pID0+IFtcbiAgICAgICAgJ3AtZGl2aWRlciBwLWNvbXBvbmVudCcsXG4gICAgICAgICdwLWRpdmlkZXItJyArIHByb3BzLmxheW91dCxcbiAgICAgICAgJ3AtZGl2aWRlci0nICsgcHJvcHMudHlwZSxcbiAgICAgICAgeyAncC1kaXZpZGVyLWxlZnQnOiBwcm9wcy5sYXlvdXQgPT09ICdob3Jpem9udGFsJyAmJiAoIXByb3BzLmFsaWduIHx8IHByb3BzLmFsaWduID09PSAnbGVmdCcpIH0sXG4gICAgICAgIHsgJ3AtZGl2aWRlci1jZW50ZXInOiBwcm9wcy5sYXlvdXQgPT09ICdob3Jpem9udGFsJyAmJiBwcm9wcy5hbGlnbiA9PT0gJ2NlbnRlcicgfSxcbiAgICAgICAgeyAncC1kaXZpZGVyLXJpZ2h0JzogcHJvcHMubGF5b3V0ID09PSAnaG9yaXpvbnRhbCcgJiYgcHJvcHMuYWxpZ24gPT09ICdyaWdodCcgfSxcbiAgICAgICAgeyAncC1kaXZpZGVyLXRvcCc6IHByb3BzLmxheW91dCA9PT0gJ3ZlcnRpY2FsJyAmJiBwcm9wcy5hbGlnbiA9PT0gJ3RvcCcgfSxcbiAgICAgICAgeyAncC1kaXZpZGVyLWNlbnRlcic6IHByb3BzLmxheW91dCA9PT0gJ3ZlcnRpY2FsJyAmJiAoIXByb3BzLmFsaWduIHx8IHByb3BzLmFsaWduID09PSAnY2VudGVyJykgfSxcbiAgICAgICAgeyAncC1kaXZpZGVyLWJvdHRvbSc6IHByb3BzLmxheW91dCA9PT0gJ3ZlcnRpY2FsJyAmJiBwcm9wcy5hbGlnbiA9PT0gJ2JvdHRvbScgfVxuICAgIF0sXG4gICAgY29udGVudDogJ3AtZGl2aWRlci1jb250ZW50J1xufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERpdmlkZXJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICdkaXZpZGVyJztcblxuICAgIHRoZW1lID0gdGhlbWU7XG5cbiAgICBjbGFzc2VzID0gY2xhc3NlcztcblxuICAgIGlubGluZVN0eWxlcyA9IGlubGluZVN0eWxlcztcbn1cblxuLyoqXG4gKlxuICogRGl2aWRlciBpcyB1c2VkIHRvIHNlcGFyYXRlIGNvbnRlbnRzLlxuICpcbiAqIFtMaXZlIERlbW9dKGh0dHBzOi8vcHJpbWVuZy5vcmcvZGl2aWRlcilcbiAqXG4gKiBAbW9kdWxlIGRpdmlkZXJzdHlsZVxuICpcbiAqL1xuZXhwb3J0IGVudW0gRGl2aWRlckNsYXNzZXMge1xuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICAgICAqL1xuICAgIHJvb3QgPSAncC1kaXZpZGVyJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBjb250ZW50IGVsZW1lbnRcbiAgICAgKi9cbiAgICBjb250ZW50ID0gJ3AtZGl2aWRlci1jb250ZW50J1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERpdmlkZXJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19