import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-floatlabel {
    display: block;
    position: relative;
}

.p-floatlabel label {
    position: absolute;
    pointer-events: none;
    top: 50%;
    transform: translateY(-50%);
    transition-property: all;
    transition-timing-function: ease;
    line-height: 1;
    font-weight: ${dt('floatlabel.font.weight')};
    inset-inline-start: ${dt('floatlabel.position.x')};
    color: ${dt('floatlabel.color')};
    transition-duration: ${dt('floatlabel.transition.duration')};
}

.p-floatlabel:has(.p-textarea) label {
    top: ${dt('floatlabel.position.y')};
    transform: translateY(0);
}

.p-floatlabel:has(.p-inputicon:first-child) label {
    inset-inline-start: calc((${dt('form.field.padding.x')} * 2) + ${dt('icon.size')});
}

.p-floatlabel:has(.ng-invalid.ng-dirty) label {
    color: ${dt('floatlabel.invalid.color')};
}

.p-floatlabel:has(input:focus) label,
.p-floatlabel:has(input.p-filled) label,
.p-floatlabel:has(input:-webkit-autofill) label,
.p-floatlabel:has(textarea:focus) label,
.p-floatlabel:has(textarea.p-filled) label,
.p-floatlabel:has(.p-inputwrapper-focus) label,
.p-floatlabel:has(.p-inputwrapper-filled) label {
    top: ${dt('floatlabel.over.active.top')};
    transform: translateY(0);
    font-size: ${dt('floatlabel.active.font.size')};
    font-weight: ${dt('floatlabel.label.active.font.weight')};
}

.p-floatlabel:has(input.p-filled) label,
.p-floatlabel:has(textarea.p-filled) label,
.p-floatlabel:has(.p-inputwrapper-filled) label {
    color: ${dt('floatlabel.active.color')};
}

.p-floatlabel:has(input:focus) label,
.p-floatlabel:has(input:-webkit-autofill) label,
.p-floatlabel:has(textarea:focus) label,
.p-floatlabel:has(.p-inputwrapper-focus) label {
    color: ${dt('floatlabel.focus.color')};
}

.p-floatlabel-in .p-inputtext,
.p-floatlabel-in .p-textarea,
.p-floatlabel-in .p-select-label,
.p-floatlabel-in .p-multiselect-label-container,
.p-floatlabel-in .p-autocomplete-input-multiple,
.p-floatlabel-in .p-cascadeselect-label,
.p-floatlabel-in .p-treeselect-label {
    padding-top: ${dt('floatlabel.in.input.padding.top')};
}

.p-floatlabel-in:has(input:focus) label,
.p-floatlabel-in:has(input.p-filled) label,
.p-floatlabel-in:has(input:-webkit-autofill) label,
.p-floatlabel-in:has(textarea:focus) label,
.p-floatlabel-in:has(textarea.p-filled) label,
.p-floatlabel-in:has(.p-inputwrapper-focus) label,
.p-floatlabel-in:has(.p-inputwrapper-filled) label {
    top: ${dt('floatlabel.in.active.top')};
}

.p-floatlabel-on:has(input:focus) label,
.p-floatlabel-on:has(input.p-filled) label,
.p-floatlabel-on:has(input:-webkit-autofill) label,
.p-floatlabel-on:has(textarea:focus) label,
.p-floatlabel-on:has(textarea.p-filled) label,
.p-floatlabel-on:has(.p-inputwrapper-focus) label,
.p-floatlabel-on:has(.p-inputwrapper-filled) label {
    top: 0;
    transform: translateY(-50%);
    border-radius: ${dt('floatlabel.on.border.radius')};
    background: ${dt('floatlabel.on.active.background')};
    padding: ${dt('floatlabel.on.active.padding')};
}
`;
const classes = {
    root: ({ instance, props }) => [
        'p-floatlabel',
        {
            'p-floatlabel-over': props.variant === 'over',
            'p-floatlabel-on': props.variant === 'on',
            'p-floatlabel-in': props.variant === 'in'
        }
    ]
};
export class FloatLabelStyle extends BaseStyle {
    name = 'floatlabel';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵFloatLabelStyle_BaseFactory; return function FloatLabelStyle_Factory(__ngFactoryType__) { return (ɵFloatLabelStyle_BaseFactory || (ɵFloatLabelStyle_BaseFactory = i0.ɵɵgetInheritedFactory(FloatLabelStyle)))(__ngFactoryType__ || FloatLabelStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FloatLabelStyle, factory: FloatLabelStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(FloatLabelStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * FloatLabel visually integrates a label with its form element.
 *
 * [Live Demo](https://www.primeng.org/floatlabel/)
 *
 * @module floatlabelstyle
 *
 */
export var FloatLabelClasses;
(function (FloatLabelClasses) {
    /**
     * Class name of the root element
     */
    FloatLabelClasses["root"] = "p-floatlabel";
})(FloatLabelClasses || (FloatLabelClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvYXRsYWJlbHN0eWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Zsb2F0bGFiZWwvc3R5bGUvZmxvYXRsYWJlbHN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7bUJBY1AsRUFBRSxDQUFDLHdCQUF3QixDQUFDOzBCQUNyQixFQUFFLENBQUMsdUJBQXVCLENBQUM7YUFDeEMsRUFBRSxDQUFDLGtCQUFrQixDQUFDOzJCQUNSLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQzs7OztXQUlwRCxFQUFFLENBQUMsdUJBQXVCLENBQUM7Ozs7O2dDQUtOLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLENBQUM7Ozs7YUFJdkUsRUFBRSxDQUFDLDBCQUEwQixDQUFDOzs7Ozs7Ozs7O1dBVWhDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7aUJBRTFCLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQzttQkFDL0IsRUFBRSxDQUFDLHFDQUFxQyxDQUFDOzs7Ozs7YUFNL0MsRUFBRSxDQUFDLHlCQUF5QixDQUFDOzs7Ozs7O2FBTzdCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQzs7Ozs7Ozs7OzttQkFVdEIsRUFBRSxDQUFDLGlDQUFpQyxDQUFDOzs7Ozs7Ozs7O1dBVTdDLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQzs7Ozs7Ozs7Ozs7O3FCQVlwQixFQUFFLENBQUMsNkJBQTZCLENBQUM7a0JBQ3BDLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQztlQUN4QyxFQUFFLENBQUMsOEJBQThCLENBQUM7O0NBRWhELENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUMzQixjQUFjO1FBQ2Q7WUFDSSxtQkFBbUIsRUFBRSxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU07WUFDN0MsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLE9BQU8sS0FBSyxJQUFJO1lBQ3pDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxPQUFPLEtBQUssSUFBSTtTQUM1QztLQUNKO0NBQ0osQ0FBQztBQUdGLE1BQU0sT0FBTyxlQUFnQixTQUFRLFNBQVM7SUFDMUMsSUFBSSxHQUFHLFlBQVksQ0FBQztJQUVwQixLQUFLLEdBQUcsS0FBSyxDQUFDO0lBRWQsT0FBTyxHQUFHLE9BQU8sQ0FBQzt5T0FMVCxlQUFlLHlCQUFmLGVBQWU7Z0VBQWYsZUFBZSxXQUFmLGVBQWU7O2lGQUFmLGVBQWU7Y0FEM0IsVUFBVTs7QUFTWDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBTixJQUFZLGlCQUtYO0FBTEQsV0FBWSxpQkFBaUI7SUFDekI7O09BRUc7SUFDSCwwQ0FBcUIsQ0FBQTtBQUN6QixDQUFDLEVBTFcsaUJBQWlCLEtBQWpCLGlCQUFpQixRQUs1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VTdHlsZSB9IGZyb20gJ3ByaW1lbmcvYmFzZSc7XG5cbmNvbnN0IHRoZW1lID0gKHsgZHQgfSkgPT4gYFxuLnAtZmxvYXRsYWJlbCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4ucC1mbG9hdGxhYmVsIGxhYmVsIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgdG9wOiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGFsbDtcbiAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTtcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgICBmb250LXdlaWdodDogJHtkdCgnZmxvYXRsYWJlbC5mb250LndlaWdodCcpfTtcbiAgICBpbnNldC1pbmxpbmUtc3RhcnQ6ICR7ZHQoJ2Zsb2F0bGFiZWwucG9zaXRpb24ueCcpfTtcbiAgICBjb2xvcjogJHtkdCgnZmxvYXRsYWJlbC5jb2xvcicpfTtcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAke2R0KCdmbG9hdGxhYmVsLnRyYW5zaXRpb24uZHVyYXRpb24nKX07XG59XG5cbi5wLWZsb2F0bGFiZWw6aGFzKC5wLXRleHRhcmVhKSBsYWJlbCB7XG4gICAgdG9wOiAke2R0KCdmbG9hdGxhYmVsLnBvc2l0aW9uLnknKX07XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xufVxuXG4ucC1mbG9hdGxhYmVsOmhhcygucC1pbnB1dGljb246Zmlyc3QtY2hpbGQpIGxhYmVsIHtcbiAgICBpbnNldC1pbmxpbmUtc3RhcnQ6IGNhbGMoKCR7ZHQoJ2Zvcm0uZmllbGQucGFkZGluZy54Jyl9ICogMikgKyAke2R0KCdpY29uLnNpemUnKX0pO1xufVxuXG4ucC1mbG9hdGxhYmVsOmhhcygubmctaW52YWxpZC5uZy1kaXJ0eSkgbGFiZWwge1xuICAgIGNvbG9yOiAke2R0KCdmbG9hdGxhYmVsLmludmFsaWQuY29sb3InKX07XG59XG5cbi5wLWZsb2F0bGFiZWw6aGFzKGlucHV0OmZvY3VzKSBsYWJlbCxcbi5wLWZsb2F0bGFiZWw6aGFzKGlucHV0LnAtZmlsbGVkKSBsYWJlbCxcbi5wLWZsb2F0bGFiZWw6aGFzKGlucHV0Oi13ZWJraXQtYXV0b2ZpbGwpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbDpoYXModGV4dGFyZWE6Zm9jdXMpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbDpoYXModGV4dGFyZWEucC1maWxsZWQpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbDpoYXMoLnAtaW5wdXR3cmFwcGVyLWZvY3VzKSBsYWJlbCxcbi5wLWZsb2F0bGFiZWw6aGFzKC5wLWlucHV0d3JhcHBlci1maWxsZWQpIGxhYmVsIHtcbiAgICB0b3A6ICR7ZHQoJ2Zsb2F0bGFiZWwub3Zlci5hY3RpdmUudG9wJyl9O1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICBmb250LXNpemU6ICR7ZHQoJ2Zsb2F0bGFiZWwuYWN0aXZlLmZvbnQuc2l6ZScpfTtcbiAgICBmb250LXdlaWdodDogJHtkdCgnZmxvYXRsYWJlbC5sYWJlbC5hY3RpdmUuZm9udC53ZWlnaHQnKX07XG59XG5cbi5wLWZsb2F0bGFiZWw6aGFzKGlucHV0LnAtZmlsbGVkKSBsYWJlbCxcbi5wLWZsb2F0bGFiZWw6aGFzKHRleHRhcmVhLnAtZmlsbGVkKSBsYWJlbCxcbi5wLWZsb2F0bGFiZWw6aGFzKC5wLWlucHV0d3JhcHBlci1maWxsZWQpIGxhYmVsIHtcbiAgICBjb2xvcjogJHtkdCgnZmxvYXRsYWJlbC5hY3RpdmUuY29sb3InKX07XG59XG5cbi5wLWZsb2F0bGFiZWw6aGFzKGlucHV0OmZvY3VzKSBsYWJlbCxcbi5wLWZsb2F0bGFiZWw6aGFzKGlucHV0Oi13ZWJraXQtYXV0b2ZpbGwpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbDpoYXModGV4dGFyZWE6Zm9jdXMpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbDpoYXMoLnAtaW5wdXR3cmFwcGVyLWZvY3VzKSBsYWJlbCB7XG4gICAgY29sb3I6ICR7ZHQoJ2Zsb2F0bGFiZWwuZm9jdXMuY29sb3InKX07XG59XG5cbi5wLWZsb2F0bGFiZWwtaW4gLnAtaW5wdXR0ZXh0LFxuLnAtZmxvYXRsYWJlbC1pbiAucC10ZXh0YXJlYSxcbi5wLWZsb2F0bGFiZWwtaW4gLnAtc2VsZWN0LWxhYmVsLFxuLnAtZmxvYXRsYWJlbC1pbiAucC1tdWx0aXNlbGVjdC1sYWJlbC1jb250YWluZXIsXG4ucC1mbG9hdGxhYmVsLWluIC5wLWF1dG9jb21wbGV0ZS1pbnB1dC1tdWx0aXBsZSxcbi5wLWZsb2F0bGFiZWwtaW4gLnAtY2FzY2FkZXNlbGVjdC1sYWJlbCxcbi5wLWZsb2F0bGFiZWwtaW4gLnAtdHJlZXNlbGVjdC1sYWJlbCB7XG4gICAgcGFkZGluZy10b3A6ICR7ZHQoJ2Zsb2F0bGFiZWwuaW4uaW5wdXQucGFkZGluZy50b3AnKX07XG59XG5cbi5wLWZsb2F0bGFiZWwtaW46aGFzKGlucHV0OmZvY3VzKSBsYWJlbCxcbi5wLWZsb2F0bGFiZWwtaW46aGFzKGlucHV0LnAtZmlsbGVkKSBsYWJlbCxcbi5wLWZsb2F0bGFiZWwtaW46aGFzKGlucHV0Oi13ZWJraXQtYXV0b2ZpbGwpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbC1pbjpoYXModGV4dGFyZWE6Zm9jdXMpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbC1pbjpoYXModGV4dGFyZWEucC1maWxsZWQpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbC1pbjpoYXMoLnAtaW5wdXR3cmFwcGVyLWZvY3VzKSBsYWJlbCxcbi5wLWZsb2F0bGFiZWwtaW46aGFzKC5wLWlucHV0d3JhcHBlci1maWxsZWQpIGxhYmVsIHtcbiAgICB0b3A6ICR7ZHQoJ2Zsb2F0bGFiZWwuaW4uYWN0aXZlLnRvcCcpfTtcbn1cblxuLnAtZmxvYXRsYWJlbC1vbjpoYXMoaW5wdXQ6Zm9jdXMpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbC1vbjpoYXMoaW5wdXQucC1maWxsZWQpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbC1vbjpoYXMoaW5wdXQ6LXdlYmtpdC1hdXRvZmlsbCkgbGFiZWwsXG4ucC1mbG9hdGxhYmVsLW9uOmhhcyh0ZXh0YXJlYTpmb2N1cykgbGFiZWwsXG4ucC1mbG9hdGxhYmVsLW9uOmhhcyh0ZXh0YXJlYS5wLWZpbGxlZCkgbGFiZWwsXG4ucC1mbG9hdGxhYmVsLW9uOmhhcygucC1pbnB1dHdyYXBwZXItZm9jdXMpIGxhYmVsLFxuLnAtZmxvYXRsYWJlbC1vbjpoYXMoLnAtaW5wdXR3cmFwcGVyLWZpbGxlZCkgbGFiZWwge1xuICAgIHRvcDogMDtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgYm9yZGVyLXJhZGl1czogJHtkdCgnZmxvYXRsYWJlbC5vbi5ib3JkZXIucmFkaXVzJyl9O1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ2Zsb2F0bGFiZWwub24uYWN0aXZlLmJhY2tncm91bmQnKX07XG4gICAgcGFkZGluZzogJHtkdCgnZmxvYXRsYWJlbC5vbi5hY3RpdmUucGFkZGluZycpfTtcbn1cbmA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogKHsgaW5zdGFuY2UsIHByb3BzIH0pID0+IFtcbiAgICAgICAgJ3AtZmxvYXRsYWJlbCcsXG4gICAgICAgIHtcbiAgICAgICAgICAgICdwLWZsb2F0bGFiZWwtb3Zlcic6IHByb3BzLnZhcmlhbnQgPT09ICdvdmVyJyxcbiAgICAgICAgICAgICdwLWZsb2F0bGFiZWwtb24nOiBwcm9wcy52YXJpYW50ID09PSAnb24nLFxuICAgICAgICAgICAgJ3AtZmxvYXRsYWJlbC1pbic6IHByb3BzLnZhcmlhbnQgPT09ICdpbidcbiAgICAgICAgfVxuICAgIF1cbn07XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGbG9hdExhYmVsU3R5bGUgZXh0ZW5kcyBCYXNlU3R5bGUge1xuICAgIG5hbWUgPSAnZmxvYXRsYWJlbCc7XG5cbiAgICB0aGVtZSA9IHRoZW1lO1xuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXM7XG59XG5cbi8qKlxuICpcbiAqIEZsb2F0TGFiZWwgdmlzdWFsbHkgaW50ZWdyYXRlcyBhIGxhYmVsIHdpdGggaXRzIGZvcm0gZWxlbWVudC5cbiAqXG4gKiBbTGl2ZSBEZW1vXShodHRwczovL3d3dy5wcmltZW5nLm9yZy9mbG9hdGxhYmVsLylcbiAqXG4gKiBAbW9kdWxlIGZsb2F0bGFiZWxzdHlsZVxuICpcbiAqL1xuZXhwb3J0IGVudW0gRmxvYXRMYWJlbENsYXNzZXMge1xuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICAgICAqL1xuICAgIHJvb3QgPSAncC1mbG9hdGxhYmVsJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZsb2F0TGFiZWxTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19