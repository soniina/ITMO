import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, inject, Input, NgModule, ViewEncapsulation } from '@angular/core';
import { SharedModule } from 'primeng/api';
import { BaseComponent } from 'primeng/basecomponent';
import { FloatLabelStyle } from './style/floatlabelstyle';
import * as i0 from "@angular/core";
const _c0 = ["*"];
/**
 * FloatLabel appears on top of the input field when focused.
 * @group Components
 */
export class FloatLabel extends BaseComponent {
    _componentStyle = inject(FloatLabelStyle);
    /**
     * Defines the positioning of the label relative to the input.
     * @group Props
     */
    variant = 'over';
    static ɵfac = /*@__PURE__*/ (() => { let ɵFloatLabel_BaseFactory; return function FloatLabel_Factory(__ngFactoryType__) { return (ɵFloatLabel_BaseFactory || (ɵFloatLabel_BaseFactory = i0.ɵɵgetInheritedFactory(FloatLabel)))(__ngFactoryType__ || FloatLabel); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FloatLabel, selectors: [["p-floatlabel"], ["p-floatLabel"], ["p-float-label"]], hostVars: 8, hostBindings: function FloatLabel_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵclassProp("p-floatlabel", true)("p-floatlabel-over", ctx.variant === "over")("p-floatlabel-on", ctx.variant === "on")("p-floatlabel-in", ctx.variant === "in");
        } }, inputs: { variant: "variant" }, standalone: true, features: [i0.ɵɵProvidersFeature([FloatLabelStyle]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function FloatLabel_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        } }, dependencies: [CommonModule, SharedModule], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(FloatLabel, [{
        type: Component,
        args: [{
                selector: 'p-floatlabel, p-floatLabel, p-float-label',
                standalone: true,
                imports: [CommonModule, SharedModule],
                template: ` <ng-content></ng-content> `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [FloatLabelStyle],
                host: {
                    '[class.p-floatlabel]': 'true',
                    '[class.p-floatlabel-over]': "variant === 'over'",
                    '[class.p-floatlabel-on]': "variant === 'on'",
                    '[class.p-floatlabel-in]': "variant === 'in'"
                }
            }]
    }], null, { variant: [{
            type: Input
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(FloatLabel, { className: "FloatLabel" }); })();
export class FloatLabelModule {
    static ɵfac = function FloatLabelModule_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || FloatLabelModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: FloatLabelModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [FloatLabel, SharedModule, SharedModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(FloatLabelModule, [{
        type: NgModule,
        args: [{
                imports: [FloatLabel, SharedModule],
                exports: [FloatLabel, SharedModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(FloatLabelModule, { imports: [FloatLabel, SharedModule], exports: [FloatLabel, SharedModule] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvYXRsYWJlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mbG9hdGxhYmVsL2Zsb2F0bGFiZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0csT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7QUFFMUQ7OztHQUdHO0FBZ0JILE1BQU0sT0FBTyxVQUFXLFNBQVEsYUFBYTtJQUN6QyxlQUFlLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzFDOzs7T0FHRztJQUNNLE9BQU8sR0FBeUIsTUFBTSxDQUFDO3FOQU52QyxVQUFVLHlCQUFWLFVBQVU7NkRBQVYsVUFBVTtZQUFWLCtCQUFBLElBQUksQ0FBTSxzQ0FBRSxNQUFNLENBQVIsb0NBQUUsSUFBSSxDQUFOLG9DQUFFLElBQUksQ0FBTjtnR0FSUixDQUFDLGVBQWUsQ0FBQzs7WUFIaEIsa0JBQXlCOzRCQUQzQixZQUFZLEVBQUUsWUFBWTs7aUZBWTNCLFVBQVU7Y0FmdEIsU0FBUztlQUFDO2dCQUNQLFFBQVEsRUFBRSwyQ0FBMkM7Z0JBQ3JELFVBQVUsRUFBRSxJQUFJO2dCQUNoQixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDO2dCQUNyQyxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7Z0JBQ3JDLFNBQVMsRUFBRSxDQUFDLGVBQWUsQ0FBQztnQkFDNUIsSUFBSSxFQUFFO29CQUNGLHNCQUFzQixFQUFFLE1BQU07b0JBQzlCLDJCQUEyQixFQUFFLG9CQUFvQjtvQkFDakQseUJBQXlCLEVBQUUsa0JBQWtCO29CQUM3Qyx5QkFBeUIsRUFBRSxrQkFBa0I7aUJBQ2hEO2FBQ0o7Z0JBT1ksT0FBTztrQkFBZixLQUFLOztrRkFORyxVQUFVO0FBYXZCLE1BQU0sT0FBTyxnQkFBZ0I7MEdBQWhCLGdCQUFnQjs0REFBaEIsZ0JBQWdCO2dFQUhmLFVBQVUsRUFBRSxZQUFZLEVBQ1osWUFBWTs7aUZBRXpCLGdCQUFnQjtjQUo1QixRQUFRO2VBQUM7Z0JBQ04sT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQztnQkFDbkMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQzthQUN0Qzs7d0ZBQ1ksZ0JBQWdCLGNBYmhCLFVBQVUsRUFVRyxZQUFZLGFBVnpCLFVBQVUsRUFXRyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGluamVjdCwgSW5wdXQsIE5nTW9kdWxlLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hhcmVkTW9kdWxlIH0gZnJvbSAncHJpbWVuZy9hcGknO1xuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCB9IGZyb20gJ3ByaW1lbmcvYmFzZWNvbXBvbmVudCc7XG5pbXBvcnQgeyBGbG9hdExhYmVsU3R5bGUgfSBmcm9tICcuL3N0eWxlL2Zsb2F0bGFiZWxzdHlsZSc7XG5cbi8qKlxuICogRmxvYXRMYWJlbCBhcHBlYXJzIG9uIHRvcCBvZiB0aGUgaW5wdXQgZmllbGQgd2hlbiBmb2N1c2VkLlxuICogQGdyb3VwIENvbXBvbmVudHNcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdwLWZsb2F0bGFiZWwsIHAtZmxvYXRMYWJlbCwgcC1mbG9hdC1sYWJlbCcsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBTaGFyZWRNb2R1bGVdLFxuICAgIHRlbXBsYXRlOiBgIDxuZy1jb250ZW50PjwvbmctY29udGVudD4gYCxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIHByb3ZpZGVyczogW0Zsb2F0TGFiZWxTdHlsZV0sXG4gICAgaG9zdDoge1xuICAgICAgICAnW2NsYXNzLnAtZmxvYXRsYWJlbF0nOiAndHJ1ZScsXG4gICAgICAgICdbY2xhc3MucC1mbG9hdGxhYmVsLW92ZXJdJzogXCJ2YXJpYW50ID09PSAnb3ZlcidcIixcbiAgICAgICAgJ1tjbGFzcy5wLWZsb2F0bGFiZWwtb25dJzogXCJ2YXJpYW50ID09PSAnb24nXCIsXG4gICAgICAgICdbY2xhc3MucC1mbG9hdGxhYmVsLWluXSc6IFwidmFyaWFudCA9PT0gJ2luJ1wiXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBGbG9hdExhYmVsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgX2NvbXBvbmVudFN0eWxlID0gaW5qZWN0KEZsb2F0TGFiZWxTdHlsZSk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcG9zaXRpb25pbmcgb2YgdGhlIGxhYmVsIHJlbGF0aXZlIHRvIHRoZSBpbnB1dC5cbiAgICAgKiBAZ3JvdXAgUHJvcHNcbiAgICAgKi9cbiAgICBASW5wdXQoKSB2YXJpYW50OiAnaW4nIHwgJ292ZXInIHwgJ29uJyA9ICdvdmVyJztcbn1cblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbRmxvYXRMYWJlbCwgU2hhcmVkTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbRmxvYXRMYWJlbCwgU2hhcmVkTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBGbG9hdExhYmVsTW9kdWxlIHt9XG4iXX0=