import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-virtualscroller {
    position: relative;
    overflow: auto;
    contain: strict;
    transform: translateZ(0);
    will-change: scroll-position;
    outline: 0 none;
}

.p-virtualscroller-content {
    position: absolute;
    top: 0;
    left: 0;
    min-height: 100%;
    min-width: 100%;
    will-change: transform;
}

.p-virtualscroller-spacer {
    position: absolute;
    top: 0;
    left: 0;
    height: 1px;
    width: 1px;
    transform-origin: 0 0;
    pointer-events: none;
}

.p-virtualscroller-loader {
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: ${dt('virtualscroller.loader.mask.background')};
    color: ${dt('virtualscroller.loader.mask.color')};
}

.p-virtualscroller-loader-mask {
    display: flex;
    align-items: center;
    justify-content: center;
}

.p-virtualscroller-loading-icon {
    font-size: ${dt('virtualscroller.loader.icon.size')};
    width: ${dt('virtualscroller.loader.icon.size')};
    height: ${dt('virtualscroller.loader.icon.size')};
}

.p-virtualscroller-horizontal > .p-virtualscroller-content {
    display: flex;
}

.p-virtualscroller-inline .p-virtualscroller-content {
    position: static;
}
`;
export class ScrollerStyle extends BaseStyle {
    name = 'virtualscroller';
    theme = theme;
    static ɵfac = /*@__PURE__*/ (() => { let ɵScrollerStyle_BaseFactory; return function ScrollerStyle_Factory(__ngFactoryType__) { return (ɵScrollerStyle_BaseFactory || (ɵScrollerStyle_BaseFactory = i0.ɵɵgetInheritedFactory(ScrollerStyle)))(__ngFactoryType__ || ScrollerStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ScrollerStyle, factory: ScrollerStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ScrollerStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * VirtualScroller is a performant approach to handle huge data efficiently.
 *
 * [Live Demo](https://www.primeng.org/scroller/)
 *
 * @module scrollerstyle
 *
 */
export var ScrollerClasses;
(function (ScrollerClasses) {
    /**
     * Class name of the root element
     */
    ScrollerClasses["root"] = "p-virtualscroller";
    /**
     * Class name of the content element
     */
    ScrollerClasses["content"] = "p-virtualscroller-content";
    /**
     * Class name of the spacer element
     */
    ScrollerClasses["spacer"] = "p-virtualscroller-spacer";
    /**
     * Class name of the loader element
     */
    ScrollerClasses["loader"] = "p-virtualscroller-loader";
    /**
     * Class name of the loading icon element
     */
    ScrollerClasses["loadingIcon"] = "p-virtualscroller-loading-icon";
})(ScrollerClasses || (ScrollerClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsZXJzdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zY3JvbGxlci9zdHlsZS9zY3JvbGxlcnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBbUNSLEVBQUUsQ0FBQyx3Q0FBd0MsQ0FBQzthQUNqRCxFQUFFLENBQUMsbUNBQW1DLENBQUM7Ozs7Ozs7Ozs7aUJBVW5DLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQzthQUMxQyxFQUFFLENBQUMsa0NBQWtDLENBQUM7Y0FDckMsRUFBRSxDQUFDLGtDQUFrQyxDQUFDOzs7Ozs7Ozs7O0NBVW5ELENBQUM7QUFHRixNQUFNLE9BQU8sYUFBYyxTQUFRLFNBQVM7SUFDeEMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO0lBRXpCLEtBQUssR0FBRyxLQUFLLENBQUM7aU9BSEwsYUFBYSx5QkFBYixhQUFhO2dFQUFiLGFBQWEsV0FBYixhQUFhOztpRkFBYixhQUFhO2NBRHpCLFVBQVU7O0FBT1g7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQU4sSUFBWSxlQXFCWDtBQXJCRCxXQUFZLGVBQWU7SUFDdkI7O09BRUc7SUFDSCw2Q0FBMEIsQ0FBQTtJQUMxQjs7T0FFRztJQUNILHdEQUFxQyxDQUFBO0lBQ3JDOztPQUVHO0lBQ0gsc0RBQW1DLENBQUE7SUFDbkM7O09BRUc7SUFDSCxzREFBbUMsQ0FBQTtJQUNuQzs7T0FFRztJQUNILGlFQUE4QyxDQUFBO0FBQ2xELENBQUMsRUFyQlcsZUFBZSxLQUFmLGVBQWUsUUFxQjFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC12aXJ0dWFsc2Nyb2xsZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICBjb250YWluOiBzdHJpY3Q7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICAgIHdpbGwtY2hhbmdlOiBzY3JvbGwtcG9zaXRpb247XG4gICAgb3V0bGluZTogMCBub25lO1xufVxuXG4ucC12aXJ0dWFsc2Nyb2xsZXItY29udGVudCB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIG1pbi1oZWlnaHQ6IDEwMCU7XG4gICAgbWluLXdpZHRoOiAxMDAlO1xuICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG59XG5cbi5wLXZpcnR1YWxzY3JvbGxlci1zcGFjZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICB3aWR0aDogMXB4O1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuLnAtdmlydHVhbHNjcm9sbGVyLWxvYWRlciB7XG4gICAgcG9zaXRpb246IHN0aWNreTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYmFja2dyb3VuZDogJHtkdCgndmlydHVhbHNjcm9sbGVyLmxvYWRlci5tYXNrLmJhY2tncm91bmQnKX07XG4gICAgY29sb3I6ICR7ZHQoJ3ZpcnR1YWxzY3JvbGxlci5sb2FkZXIubWFzay5jb2xvcicpfTtcbn1cblxuLnAtdmlydHVhbHNjcm9sbGVyLWxvYWRlci1tYXNrIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi5wLXZpcnR1YWxzY3JvbGxlci1sb2FkaW5nLWljb24ge1xuICAgIGZvbnQtc2l6ZTogJHtkdCgndmlydHVhbHNjcm9sbGVyLmxvYWRlci5pY29uLnNpemUnKX07XG4gICAgd2lkdGg6ICR7ZHQoJ3ZpcnR1YWxzY3JvbGxlci5sb2FkZXIuaWNvbi5zaXplJyl9O1xuICAgIGhlaWdodDogJHtkdCgndmlydHVhbHNjcm9sbGVyLmxvYWRlci5pY29uLnNpemUnKX07XG59XG5cbi5wLXZpcnR1YWxzY3JvbGxlci1ob3Jpem9udGFsID4gLnAtdmlydHVhbHNjcm9sbGVyLWNvbnRlbnQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5wLXZpcnR1YWxzY3JvbGxlci1pbmxpbmUgLnAtdmlydHVhbHNjcm9sbGVyLWNvbnRlbnQge1xuICAgIHBvc2l0aW9uOiBzdGF0aWM7XG59XG5gO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2Nyb2xsZXJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICd2aXJ0dWFsc2Nyb2xsZXInO1xuXG4gICAgdGhlbWUgPSB0aGVtZTtcbn1cblxuLyoqXG4gKlxuICogVmlydHVhbFNjcm9sbGVyIGlzIGEgcGVyZm9ybWFudCBhcHByb2FjaCB0byBoYW5kbGUgaHVnZSBkYXRhIGVmZmljaWVudGx5LlxuICpcbiAqIFtMaXZlIERlbW9dKGh0dHBzOi8vd3d3LnByaW1lbmcub3JnL3Njcm9sbGVyLylcbiAqXG4gKiBAbW9kdWxlIHNjcm9sbGVyc3R5bGVcbiAqXG4gKi9cbmV4cG9ydCBlbnVtIFNjcm9sbGVyQ2xhc3NlcyB7XG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50XG4gICAgICovXG4gICAgcm9vdCA9ICdwLXZpcnR1YWxzY3JvbGxlcicsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgY29udGVudCBlbGVtZW50XG4gICAgICovXG4gICAgY29udGVudCA9ICdwLXZpcnR1YWxzY3JvbGxlci1jb250ZW50JyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBzcGFjZXIgZWxlbWVudFxuICAgICAqL1xuICAgIHNwYWNlciA9ICdwLXZpcnR1YWxzY3JvbGxlci1zcGFjZXInLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGxvYWRlciBlbGVtZW50XG4gICAgICovXG4gICAgbG9hZGVyID0gJ3AtdmlydHVhbHNjcm9sbGVyLWxvYWRlcicsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgbG9hZGluZyBpY29uIGVsZW1lbnRcbiAgICAgKi9cbiAgICBsb2FkaW5nSWNvbiA9ICdwLXZpcnR1YWxzY3JvbGxlci1sb2FkaW5nLWljb24nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Nyb2xsZXJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19