import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-card {
    background: ${dt('card.background')};
    color: ${dt('card.color')};
    box-shadow: ${dt('card.shadow')};
    border-radius: ${dt('card.border.radius')};
    display: flex;
    flex-direction: column;
}

.p-card-caption {
    display: flex;
    flex-direction: column;
    gap: ${dt('card.caption.gap')};
}

.p-card-body {
    padding: ${dt('card.body.padding')};
    display: flex;
    flex-direction: column;
    gap: ${dt('card.body.gap')};
}

.p-card-title {
    font-size: ${dt('card.title.font.size')};
    font-weight: ${dt('card.title.font.weight')};
}

.p-card-subtitle {
    color: ${dt('card.subtitle.color')};
}
`;
const classes = {
    root: 'p-card p-component',
    header: 'p-card-header',
    body: 'p-card-body',
    caption: 'p-card-caption',
    title: 'p-card-title',
    subtitle: 'p-card-subtitle',
    content: 'p-card-content',
    footer: 'p-card-footer'
};
export class CardStyle extends BaseStyle {
    name = 'card';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵCardStyle_BaseFactory; return function CardStyle_Factory(__ngFactoryType__) { return (ɵCardStyle_BaseFactory || (ɵCardStyle_BaseFactory = i0.ɵɵgetInheritedFactory(CardStyle)))(__ngFactoryType__ || CardStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CardStyle, factory: CardStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CardStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Card is a flexible container component.
 *
 * [Live Demo](https://www.primeng.org/card/)
 *
 * @module cardstyle
 *
 */
export var CardClasses;
(function (CardClasses) {
    /**
     * Class name of the root element
     */
    CardClasses["root"] = "p-card";
    /**
     * Class name of the header element
     */
    CardClasses["header"] = "p-card-header";
    /**
     * Class name of the body element
     */
    CardClasses["body"] = "p-card-body";
    /**
     * Class name of the caption element
     */
    CardClasses["caption"] = "p-card-caption";
    /**
     * Class name of the title element
     */
    CardClasses["title"] = "p-card-title";
    /**
     * Class name of the subtitle element
     */
    CardClasses["subtitle"] = "p-card-subtitle";
    /**
     * Class name of the content element
     */
    CardClasses["content"] = "p-card-content";
    /**
     * Class name of the footer element
     */
    CardClasses["footer"] = "p-card-footer";
})(CardClasses || (CardClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZHN0eWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NhcmQvc3R5bGUvY2FyZHN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7a0JBRVIsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2FBQzFCLEVBQUUsQ0FBQyxZQUFZLENBQUM7a0JBQ1gsRUFBRSxDQUFDLGFBQWEsQ0FBQztxQkFDZCxFQUFFLENBQUMsb0JBQW9CLENBQUM7Ozs7Ozs7O1dBUWxDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzs7OztlQUlsQixFQUFFLENBQUMsbUJBQW1CLENBQUM7OztXQUczQixFQUFFLENBQUMsZUFBZSxDQUFDOzs7O2lCQUliLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzttQkFDeEIsRUFBRSxDQUFDLHdCQUF3QixDQUFDOzs7O2FBSWxDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzs7Q0FFckMsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHO0lBQ1osSUFBSSxFQUFFLG9CQUFvQjtJQUMxQixNQUFNLEVBQUUsZUFBZTtJQUN2QixJQUFJLEVBQUUsYUFBYTtJQUNuQixPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLEtBQUssRUFBRSxjQUFjO0lBQ3JCLFFBQVEsRUFBRSxpQkFBaUI7SUFDM0IsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixNQUFNLEVBQUUsZUFBZTtDQUMxQixDQUFDO0FBR0YsTUFBTSxPQUFPLFNBQVUsU0FBUSxTQUFTO0lBQ3BDLElBQUksR0FBRyxNQUFNLENBQUM7SUFFZCxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBRWQsT0FBTyxHQUFHLE9BQU8sQ0FBQztpTkFMVCxTQUFTLHlCQUFULFNBQVM7Z0VBQVQsU0FBUyxXQUFULFNBQVM7O2lGQUFULFNBQVM7Y0FEckIsVUFBVTs7QUFTWDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBTixJQUFZLFdBaUNYO0FBakNELFdBQVksV0FBVztJQUNuQjs7T0FFRztJQUNILDhCQUFlLENBQUE7SUFDZjs7T0FFRztJQUNILHVDQUF3QixDQUFBO0lBQ3hCOztPQUVHO0lBQ0gsbUNBQW9CLENBQUE7SUFDcEI7O09BRUc7SUFDSCx5Q0FBMEIsQ0FBQTtJQUMxQjs7T0FFRztJQUNILHFDQUFzQixDQUFBO0lBQ3RCOztPQUVHO0lBQ0gsMkNBQTRCLENBQUE7SUFDNUI7O09BRUc7SUFDSCx5Q0FBMEIsQ0FBQTtJQUMxQjs7T0FFRztJQUNILHVDQUF3QixDQUFBO0FBQzVCLENBQUMsRUFqQ1csV0FBVyxLQUFYLFdBQVcsUUFpQ3RCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC1jYXJkIHtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCdjYXJkLmJhY2tncm91bmQnKX07XG4gICAgY29sb3I6ICR7ZHQoJ2NhcmQuY29sb3InKX07XG4gICAgYm94LXNoYWRvdzogJHtkdCgnY2FyZC5zaGFkb3cnKX07XG4gICAgYm9yZGVyLXJhZGl1czogJHtkdCgnY2FyZC5ib3JkZXIucmFkaXVzJyl9O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLnAtY2FyZC1jYXB0aW9uIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgZ2FwOiAke2R0KCdjYXJkLmNhcHRpb24uZ2FwJyl9O1xufVxuXG4ucC1jYXJkLWJvZHkge1xuICAgIHBhZGRpbmc6ICR7ZHQoJ2NhcmQuYm9keS5wYWRkaW5nJyl9O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBnYXA6ICR7ZHQoJ2NhcmQuYm9keS5nYXAnKX07XG59XG5cbi5wLWNhcmQtdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogJHtkdCgnY2FyZC50aXRsZS5mb250LnNpemUnKX07XG4gICAgZm9udC13ZWlnaHQ6ICR7ZHQoJ2NhcmQudGl0bGUuZm9udC53ZWlnaHQnKX07XG59XG5cbi5wLWNhcmQtc3VidGl0bGUge1xuICAgIGNvbG9yOiAke2R0KCdjYXJkLnN1YnRpdGxlLmNvbG9yJyl9O1xufVxuYDtcblxuY29uc3QgY2xhc3NlcyA9IHtcbiAgICByb290OiAncC1jYXJkIHAtY29tcG9uZW50JyxcbiAgICBoZWFkZXI6ICdwLWNhcmQtaGVhZGVyJyxcbiAgICBib2R5OiAncC1jYXJkLWJvZHknLFxuICAgIGNhcHRpb246ICdwLWNhcmQtY2FwdGlvbicsXG4gICAgdGl0bGU6ICdwLWNhcmQtdGl0bGUnLFxuICAgIHN1YnRpdGxlOiAncC1jYXJkLXN1YnRpdGxlJyxcbiAgICBjb250ZW50OiAncC1jYXJkLWNvbnRlbnQnLFxuICAgIGZvb3RlcjogJ3AtY2FyZC1mb290ZXInXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FyZFN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHtcbiAgICBuYW1lID0gJ2NhcmQnO1xuXG4gICAgdGhlbWUgPSB0aGVtZTtcblxuICAgIGNsYXNzZXMgPSBjbGFzc2VzO1xufVxuXG4vKipcbiAqXG4gKiBDYXJkIGlzIGEgZmxleGlibGUgY29udGFpbmVyIGNvbXBvbmVudC5cbiAqXG4gKiBbTGl2ZSBEZW1vXShodHRwczovL3d3dy5wcmltZW5nLm9yZy9jYXJkLylcbiAqXG4gKiBAbW9kdWxlIGNhcmRzdHlsZVxuICpcbiAqL1xuZXhwb3J0IGVudW0gQ2FyZENsYXNzZXMge1xuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICAgICAqL1xuICAgIHJvb3QgPSAncC1jYXJkJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBoZWFkZXIgZWxlbWVudFxuICAgICAqL1xuICAgIGhlYWRlciA9ICdwLWNhcmQtaGVhZGVyJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBib2R5IGVsZW1lbnRcbiAgICAgKi9cbiAgICBib2R5ID0gJ3AtY2FyZC1ib2R5JyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBjYXB0aW9uIGVsZW1lbnRcbiAgICAgKi9cbiAgICBjYXB0aW9uID0gJ3AtY2FyZC1jYXB0aW9uJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSB0aXRsZSBlbGVtZW50XG4gICAgICovXG4gICAgdGl0bGUgPSAncC1jYXJkLXRpdGxlJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBzdWJ0aXRsZSBlbGVtZW50XG4gICAgICovXG4gICAgc3VidGl0bGUgPSAncC1jYXJkLXN1YnRpdGxlJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBjb250ZW50IGVsZW1lbnRcbiAgICAgKi9cbiAgICBjb250ZW50ID0gJ3AtY2FyZC1jb250ZW50JyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBmb290ZXIgZWxlbWVudFxuICAgICAqL1xuICAgIGZvb3RlciA9ICdwLWNhcmQtZm9vdGVyJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhcmRTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19