import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-inplace-display {
    display: inline-block;
    cursor: pointer;
    border: 1px solid transparent;
    padding: ${dt('inplace.padding')};
    border-radius: ${dt('inplace.border.radius')};
    transition: background ${dt('inplace.transition.duration')}, color ${dt('inplace.transition.duration')}, outline-color ${dt('inplace.transition.duration')}, box-shadow ${dt('inplace.transition.duration')};
    outline-color: transparent;
}

.p-inplace-display:not(.p-disabled):hover {
    background: ${dt('inplace.display.hover.background')};
    color: ${dt('inplace.display.hover.color')};
}

.p-inplace-display:focus-visible {
    box-shadow: ${dt('inplace.focus.ring.shadow')};
    outline: ${dt('inplace.focus.ring.width')} ${dt('inplace.focus.ring.style')} ${dt('inplace.focus.ring.color')};
    outline-offset: ${dt('inplace.focus.ring.offset')};
}

.p-inplace-content {
    display: block;
}
`;
const classes = {
    root: 'p-inplace p-component',
    display: ({ props }) => ['p-inplace-display', { 'p-disabled': props.disabled }],
    content: 'p-inplace-content'
};
export class InplaceStyle extends BaseStyle {
    name = 'inplace';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵInplaceStyle_BaseFactory; return function InplaceStyle_Factory(__ngFactoryType__) { return (ɵInplaceStyle_BaseFactory || (ɵInplaceStyle_BaseFactory = i0.ɵɵgetInheritedFactory(InplaceStyle)))(__ngFactoryType__ || InplaceStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: InplaceStyle, factory: InplaceStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(InplaceStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.
 *
 * [Live Demo](https://www.primeng.org/inplace)
 *
 * @module inplacestyle
 *
 */
export var InplaceClasses;
(function (InplaceClasses) {
    /**
     * Class name of the root element
     */
    InplaceClasses["root"] = "p-inplace";
    /**
     * Class name of the display element
     */
    InplaceClasses["display"] = "p-inplace-display";
    /**
     * Class name of the content element
     */
    InplaceClasses["content"] = "p-inplace-content";
})(InplaceClasses || (InplaceClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wbGFjZXN0eWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2lucGxhY2Uvc3R5bGUvaW5wbGFjZXN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7ZUFLWCxFQUFFLENBQUMsaUJBQWlCLENBQUM7cUJBQ2YsRUFBRSxDQUFDLHVCQUF1QixDQUFDOzZCQUNuQixFQUFFLENBQUMsNkJBQTZCLENBQUMsV0FBVyxFQUFFLENBQUMsNkJBQTZCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLDZCQUE2QixDQUFDOzs7OztrQkFLN0wsRUFBRSxDQUFDLGtDQUFrQyxDQUFDO2FBQzNDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQzs7OztrQkFJNUIsRUFBRSxDQUFDLDJCQUEyQixDQUFDO2VBQ2xDLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztzQkFDM0YsRUFBRSxDQUFDLDJCQUEyQixDQUFDOzs7Ozs7Q0FNcEQsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHO0lBQ1osSUFBSSxFQUFFLHVCQUF1QjtJQUM3QixPQUFPLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvRSxPQUFPLEVBQUUsbUJBQW1CO0NBQy9CLENBQUM7QUFHRixNQUFNLE9BQU8sWUFBYSxTQUFRLFNBQVM7SUFDdkMsSUFBSSxHQUFHLFNBQVMsQ0FBQztJQUVqQixLQUFLLEdBQUcsS0FBSyxDQUFDO0lBRWQsT0FBTyxHQUFHLE9BQU8sQ0FBQzs2TkFMVCxZQUFZLHlCQUFaLFlBQVk7Z0VBQVosWUFBWSxXQUFaLFlBQVk7O2lGQUFaLFlBQVk7Y0FEeEIsVUFBVTs7QUFTWDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBTixJQUFZLGNBYVg7QUFiRCxXQUFZLGNBQWM7SUFDdEI7O09BRUc7SUFDSCxvQ0FBa0IsQ0FBQTtJQUNsQjs7T0FFRztJQUNILCtDQUE2QixDQUFBO0lBQzdCOztPQUVHO0lBQ0gsK0NBQTZCLENBQUE7QUFDakMsQ0FBQyxFQWJXLGNBQWMsS0FBZCxjQUFjLFFBYXpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC1pbnBsYWNlLWRpc3BsYXkge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgcGFkZGluZzogJHtkdCgnaW5wbGFjZS5wYWRkaW5nJyl9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ2lucGxhY2UuYm9yZGVyLnJhZGl1cycpfTtcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kICR7ZHQoJ2lucGxhY2UudHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgY29sb3IgJHtkdCgnaW5wbGFjZS50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBvdXRsaW5lLWNvbG9yICR7ZHQoJ2lucGxhY2UudHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgYm94LXNoYWRvdyAke2R0KCdpbnBsYWNlLnRyYW5zaXRpb24uZHVyYXRpb24nKX07XG4gICAgb3V0bGluZS1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi5wLWlucGxhY2UtZGlzcGxheTpub3QoLnAtZGlzYWJsZWQpOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCdpbnBsYWNlLmRpc3BsYXkuaG92ZXIuYmFja2dyb3VuZCcpfTtcbiAgICBjb2xvcjogJHtkdCgnaW5wbGFjZS5kaXNwbGF5LmhvdmVyLmNvbG9yJyl9O1xufVxuXG4ucC1pbnBsYWNlLWRpc3BsYXk6Zm9jdXMtdmlzaWJsZSB7XG4gICAgYm94LXNoYWRvdzogJHtkdCgnaW5wbGFjZS5mb2N1cy5yaW5nLnNoYWRvdycpfTtcbiAgICBvdXRsaW5lOiAke2R0KCdpbnBsYWNlLmZvY3VzLnJpbmcud2lkdGgnKX0gJHtkdCgnaW5wbGFjZS5mb2N1cy5yaW5nLnN0eWxlJyl9ICR7ZHQoJ2lucGxhY2UuZm9jdXMucmluZy5jb2xvcicpfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtkdCgnaW5wbGFjZS5mb2N1cy5yaW5nLm9mZnNldCcpfTtcbn1cblxuLnAtaW5wbGFjZS1jb250ZW50IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbn1cbmA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogJ3AtaW5wbGFjZSBwLWNvbXBvbmVudCcsXG4gICAgZGlzcGxheTogKHsgcHJvcHMgfSkgPT4gWydwLWlucGxhY2UtZGlzcGxheScsIHsgJ3AtZGlzYWJsZWQnOiBwcm9wcy5kaXNhYmxlZCB9XSxcbiAgICBjb250ZW50OiAncC1pbnBsYWNlLWNvbnRlbnQnXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW5wbGFjZVN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHtcbiAgICBuYW1lID0gJ2lucGxhY2UnO1xuXG4gICAgdGhlbWUgPSB0aGVtZTtcblxuICAgIGNsYXNzZXMgPSBjbGFzc2VzO1xufVxuXG4vKipcbiAqXG4gKiBJbnBsYWNlIHByb3ZpZGVzIGFuIGVhc3kgdG8gZG8gZWRpdGluZyBhbmQgZGlzcGxheSBhdCB0aGUgc2FtZSB0aW1lIHdoZXJlIGNsaWNraW5nIHRoZSBvdXRwdXQgZGlzcGxheXMgdGhlIGFjdHVhbCBjb250ZW50LlxuICpcbiAqIFtMaXZlIERlbW9dKGh0dHBzOi8vd3d3LnByaW1lbmcub3JnL2lucGxhY2UpXG4gKlxuICogQG1vZHVsZSBpbnBsYWNlc3R5bGVcbiAqXG4gKi9cbmV4cG9ydCBlbnVtIElucGxhY2VDbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICByb290ID0gJ3AtaW5wbGFjZScsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgZGlzcGxheSBlbGVtZW50XG4gICAgICovXG4gICAgZGlzcGxheSA9ICdwLWlucGxhY2UtZGlzcGxheScsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgY29udGVudCBlbGVtZW50XG4gICAgICovXG4gICAgY29udGVudCA9ICdwLWlucGxhY2UtY29udGVudCdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnBsYWNlU3R5bGUgZXh0ZW5kcyBCYXNlU3R5bGUge31cbiJdfQ==