import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-textarea {
    font-family: inherit;
    font-feature-settings: inherit;
    font-size: 1rem;
    color: ${dt('textarea.color')};
    background: ${dt('textarea.background')};
    padding: ${dt('textarea.padding.y')} ${dt('textarea.padding.x')};
    border: 1px solid ${dt('textarea.border.color')};
    transition: background ${dt('textarea.transition.duration')}, color ${dt('textarea.transition.duration')}, border-color ${dt('textarea.transition.duration')}, outline-color ${dt('textarea.transition.duration')}, box-shadow ${dt('textarea.transition.duration')};
    appearance: none;
    border-radius: ${dt('textarea.border.radius')};
    outline-color: transparent;
    box-shadow: ${dt('textarea.shadow')};
}

.p-textarea.ng-invalid.ng-dirty {
    border-color: ${dt('textarea.invalid.border.color')}
};

.p-textarea:enabled:hover {
    border-color: ${dt('textarea.hover.border.color')};
}

.p-textarea:enabled:focus {
    border-color: ${dt('textarea.focus.border.color')};
    box-shadow: ${dt('textarea.focus.ring.shadow')};
    outline: ${dt('textarea.focus.ring.width')} ${dt('textarea.focus.ring.style')} ${dt('textarea.focus.ring.color')};
    outline-offset: ${dt('textarea.focus.ring.offset')};
}

.p-textarea.p-invalid {
    border-color: ${dt('textarea.invalid.border.color')};
}

.p-textarea.p-variant-filled {
    background: ${dt('textarea.filled.background')};
}

.p-textarea.p-variant-filled:enabled:focus {
    background: ${dt('textarea.filled.focus.background')};
}

.p-textarea:disabled {
    opacity: 1;
    background: ${dt('textarea.disabled.background')};
    color: ${dt('textarea.disabled.color')};
}

.p-textarea::placeholder {
    color: ${dt('textarea.placeholder.color')};
}

.p-textarea.ng-invalid.ng-dirty::placeholder {
    color: ${dt('textarea.invalid.placeholder.color')};
}

.p-textarea-fluid {
    width: 100%;
}

.p-textarea-resizable {
    overflow: hidden;
    resize: none;
}

.p-textarea-sm {
    font-size: ${dt('textarea.sm.font.size')};
    padding-block: ${dt('textarea.sm.padding.y')};
    padding-inline: ${dt('textarea.sm.padding.x')};
}

.p-textarea-lg {
    font-size: ${dt('textarea.lg.font.size')};
    padding-block: ${dt('textarea.lg.padding.y')};
    padding-inline: ${dt('textarea.lg.padding.x')};
}
`;
const classes = {
    root: ({ instance, props }) => [
        'p-textarea p-component',
        {
            'p-filled': instance.filled,
            'p-textarea-resizable ': props.autoResize,
            'p-invalid': props.invalid,
            'p-variant-filled': props.variant ? props.variant === 'filled' : instance.config.inputStyle === 'filled' || instance.config.inputVariant === 'filled',
            'p-textarea-fluid': props.fluid
        }
    ]
};
export class TextareaStyle extends BaseStyle {
    name = 'textarea';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵTextareaStyle_BaseFactory; return function TextareaStyle_Factory(__ngFactoryType__) { return (ɵTextareaStyle_BaseFactory || (ɵTextareaStyle_BaseFactory = i0.ɵɵgetInheritedFactory(TextareaStyle)))(__ngFactoryType__ || TextareaStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TextareaStyle, factory: TextareaStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TextareaStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Textarea is a multi-line text input element.
 *
 * [Live Demo](https://www.primeng.org/textarea/)
 *
 * @module textareastyle
 *
 */
export var TextareaClasses;
(function (TextareaClasses) {
    /**
     * Class name of the root element
     */
    TextareaClasses["root"] = "p-textarea";
})(TextareaClasses || (TextareaClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWFzdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90ZXh0YXJlYS9zdHlsZS90ZXh0YXJlYXN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7YUFLYixFQUFFLENBQUMsZ0JBQWdCLENBQUM7a0JBQ2YsRUFBRSxDQUFDLHFCQUFxQixDQUFDO2VBQzVCLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzt3QkFDM0MsRUFBRSxDQUFDLHVCQUF1QixDQUFDOzZCQUN0QixFQUFFLENBQUMsOEJBQThCLENBQUMsV0FBVyxFQUFFLENBQUMsOEJBQThCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLDhCQUE4QixDQUFDLGdCQUFnQixFQUFFLENBQy9OLDhCQUE4QixDQUNqQzs7cUJBRWdCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQzs7a0JBRS9CLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQzs7OztvQkFJbkIsRUFBRSxDQUFDLCtCQUErQixDQUFDOzs7O29CQUluQyxFQUFFLENBQUMsNkJBQTZCLENBQUM7Ozs7b0JBSWpDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQztrQkFDbkMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO2VBQ25DLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztzQkFDOUYsRUFBRSxDQUFDLDRCQUE0QixDQUFDOzs7O29CQUlsQyxFQUFFLENBQUMsK0JBQStCLENBQUM7Ozs7a0JBSXJDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7OztrQkFJaEMsRUFBRSxDQUFDLGtDQUFrQyxDQUFDOzs7OztrQkFLdEMsRUFBRSxDQUFDLDhCQUE4QixDQUFDO2FBQ3ZDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQzs7OzthQUk3QixFQUFFLENBQUMsNEJBQTRCLENBQUM7Ozs7YUFJaEMsRUFBRSxDQUFDLG9DQUFvQyxDQUFDOzs7Ozs7Ozs7Ozs7O2lCQWFwQyxFQUFFLENBQUMsdUJBQXVCLENBQUM7cUJBQ3ZCLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztzQkFDMUIsRUFBRSxDQUFDLHVCQUF1QixDQUFDOzs7O2lCQUloQyxFQUFFLENBQUMsdUJBQXVCLENBQUM7cUJBQ3ZCLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztzQkFDMUIsRUFBRSxDQUFDLHVCQUF1QixDQUFDOztDQUVoRCxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUc7SUFDWixJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDM0Isd0JBQXdCO1FBQ3hCO1lBQ0ksVUFBVSxFQUFFLFFBQVEsQ0FBQyxNQUFNO1lBQzNCLHVCQUF1QixFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQ3pDLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTztZQUMxQixrQkFBa0IsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEtBQUssUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxLQUFLLFFBQVE7WUFDckosa0JBQWtCLEVBQUUsS0FBSyxDQUFDLEtBQUs7U0FDbEM7S0FDSjtDQUNKLENBQUM7QUFHRixNQUFNLE9BQU8sYUFBYyxTQUFRLFNBQVM7SUFDeEMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUVsQixLQUFLLEdBQUcsS0FBSyxDQUFDO0lBRWQsT0FBTyxHQUFHLE9BQU8sQ0FBQztpT0FMVCxhQUFhLHlCQUFiLGFBQWE7Z0VBQWIsYUFBYSxXQUFiLGFBQWE7O2lGQUFiLGFBQWE7Y0FEekIsVUFBVTs7QUFTWDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBTixJQUFZLGVBS1g7QUFMRCxXQUFZLGVBQWU7SUFDdkI7O09BRUc7SUFDSCxzQ0FBbUIsQ0FBQTtBQUN2QixDQUFDLEVBTFcsZUFBZSxLQUFmLGVBQWUsUUFLMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlU3R5bGUgfSBmcm9tICdwcmltZW5nL2Jhc2UnO1xuXG5jb25zdCB0aGVtZSA9ICh7IGR0IH0pID0+IGBcbi5wLXRleHRhcmVhIHtcbiAgICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgICBmb250LWZlYXR1cmUtc2V0dGluZ3M6IGluaGVyaXQ7XG4gICAgZm9udC1zaXplOiAxcmVtO1xuICAgIGNvbG9yOiAke2R0KCd0ZXh0YXJlYS5jb2xvcicpfTtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCd0ZXh0YXJlYS5iYWNrZ3JvdW5kJyl9O1xuICAgIHBhZGRpbmc6ICR7ZHQoJ3RleHRhcmVhLnBhZGRpbmcueScpfSAke2R0KCd0ZXh0YXJlYS5wYWRkaW5nLngnKX07XG4gICAgYm9yZGVyOiAxcHggc29saWQgJHtkdCgndGV4dGFyZWEuYm9yZGVyLmNvbG9yJyl9O1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgJHtkdCgndGV4dGFyZWEudHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgY29sb3IgJHtkdCgndGV4dGFyZWEudHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgYm9yZGVyLWNvbG9yICR7ZHQoJ3RleHRhcmVhLnRyYW5zaXRpb24uZHVyYXRpb24nKX0sIG91dGxpbmUtY29sb3IgJHtkdCgndGV4dGFyZWEudHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgYm94LXNoYWRvdyAke2R0KFxuICAgICAgICAndGV4dGFyZWEudHJhbnNpdGlvbi5kdXJhdGlvbidcbiAgICApfTtcbiAgICBhcHBlYXJhbmNlOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ3RleHRhcmVhLmJvcmRlci5yYWRpdXMnKX07XG4gICAgb3V0bGluZS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm94LXNoYWRvdzogJHtkdCgndGV4dGFyZWEuc2hhZG93Jyl9O1xufVxuXG4ucC10ZXh0YXJlYS5uZy1pbnZhbGlkLm5nLWRpcnR5IHtcbiAgICBib3JkZXItY29sb3I6ICR7ZHQoJ3RleHRhcmVhLmludmFsaWQuYm9yZGVyLmNvbG9yJyl9XG59O1xuXG4ucC10ZXh0YXJlYTplbmFibGVkOmhvdmVyIHtcbiAgICBib3JkZXItY29sb3I6ICR7ZHQoJ3RleHRhcmVhLmhvdmVyLmJvcmRlci5jb2xvcicpfTtcbn1cblxuLnAtdGV4dGFyZWE6ZW5hYmxlZDpmb2N1cyB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2R0KCd0ZXh0YXJlYS5mb2N1cy5ib3JkZXIuY29sb3InKX07XG4gICAgYm94LXNoYWRvdzogJHtkdCgndGV4dGFyZWEuZm9jdXMucmluZy5zaGFkb3cnKX07XG4gICAgb3V0bGluZTogJHtkdCgndGV4dGFyZWEuZm9jdXMucmluZy53aWR0aCcpfSAke2R0KCd0ZXh0YXJlYS5mb2N1cy5yaW5nLnN0eWxlJyl9ICR7ZHQoJ3RleHRhcmVhLmZvY3VzLnJpbmcuY29sb3InKX07XG4gICAgb3V0bGluZS1vZmZzZXQ6ICR7ZHQoJ3RleHRhcmVhLmZvY3VzLnJpbmcub2Zmc2V0Jyl9O1xufVxuXG4ucC10ZXh0YXJlYS5wLWludmFsaWQge1xuICAgIGJvcmRlci1jb2xvcjogJHtkdCgndGV4dGFyZWEuaW52YWxpZC5ib3JkZXIuY29sb3InKX07XG59XG5cbi5wLXRleHRhcmVhLnAtdmFyaWFudC1maWxsZWQge1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ3RleHRhcmVhLmZpbGxlZC5iYWNrZ3JvdW5kJyl9O1xufVxuXG4ucC10ZXh0YXJlYS5wLXZhcmlhbnQtZmlsbGVkOmVuYWJsZWQ6Zm9jdXMge1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ3RleHRhcmVhLmZpbGxlZC5mb2N1cy5iYWNrZ3JvdW5kJyl9O1xufVxuXG4ucC10ZXh0YXJlYTpkaXNhYmxlZCB7XG4gICAgb3BhY2l0eTogMTtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCd0ZXh0YXJlYS5kaXNhYmxlZC5iYWNrZ3JvdW5kJyl9O1xuICAgIGNvbG9yOiAke2R0KCd0ZXh0YXJlYS5kaXNhYmxlZC5jb2xvcicpfTtcbn1cblxuLnAtdGV4dGFyZWE6OnBsYWNlaG9sZGVyIHtcbiAgICBjb2xvcjogJHtkdCgndGV4dGFyZWEucGxhY2Vob2xkZXIuY29sb3InKX07XG59XG5cbi5wLXRleHRhcmVhLm5nLWludmFsaWQubmctZGlydHk6OnBsYWNlaG9sZGVyIHtcbiAgICBjb2xvcjogJHtkdCgndGV4dGFyZWEuaW52YWxpZC5wbGFjZWhvbGRlci5jb2xvcicpfTtcbn1cblxuLnAtdGV4dGFyZWEtZmx1aWQge1xuICAgIHdpZHRoOiAxMDAlO1xufVxuXG4ucC10ZXh0YXJlYS1yZXNpemFibGUge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcmVzaXplOiBub25lO1xufVxuXG4ucC10ZXh0YXJlYS1zbSB7XG4gICAgZm9udC1zaXplOiAke2R0KCd0ZXh0YXJlYS5zbS5mb250LnNpemUnKX07XG4gICAgcGFkZGluZy1ibG9jazogJHtkdCgndGV4dGFyZWEuc20ucGFkZGluZy55Jyl9O1xuICAgIHBhZGRpbmctaW5saW5lOiAke2R0KCd0ZXh0YXJlYS5zbS5wYWRkaW5nLngnKX07XG59XG5cbi5wLXRleHRhcmVhLWxnIHtcbiAgICBmb250LXNpemU6ICR7ZHQoJ3RleHRhcmVhLmxnLmZvbnQuc2l6ZScpfTtcbiAgICBwYWRkaW5nLWJsb2NrOiAke2R0KCd0ZXh0YXJlYS5sZy5wYWRkaW5nLnknKX07XG4gICAgcGFkZGluZy1pbmxpbmU6ICR7ZHQoJ3RleHRhcmVhLmxnLnBhZGRpbmcueCcpfTtcbn1cbmA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogKHsgaW5zdGFuY2UsIHByb3BzIH0pID0+IFtcbiAgICAgICAgJ3AtdGV4dGFyZWEgcC1jb21wb25lbnQnLFxuICAgICAgICB7XG4gICAgICAgICAgICAncC1maWxsZWQnOiBpbnN0YW5jZS5maWxsZWQsXG4gICAgICAgICAgICAncC10ZXh0YXJlYS1yZXNpemFibGUgJzogcHJvcHMuYXV0b1Jlc2l6ZSxcbiAgICAgICAgICAgICdwLWludmFsaWQnOiBwcm9wcy5pbnZhbGlkLFxuICAgICAgICAgICAgJ3AtdmFyaWFudC1maWxsZWQnOiBwcm9wcy52YXJpYW50ID8gcHJvcHMudmFyaWFudCA9PT0gJ2ZpbGxlZCcgOiBpbnN0YW5jZS5jb25maWcuaW5wdXRTdHlsZSA9PT0gJ2ZpbGxlZCcgfHwgaW5zdGFuY2UuY29uZmlnLmlucHV0VmFyaWFudCA9PT0gJ2ZpbGxlZCcsXG4gICAgICAgICAgICAncC10ZXh0YXJlYS1mbHVpZCc6IHByb3BzLmZsdWlkXG4gICAgICAgIH1cbiAgICBdXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGV4dGFyZWFTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICd0ZXh0YXJlYSc7XG5cbiAgICB0aGVtZSA9IHRoZW1lO1xuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXM7XG59XG5cbi8qKlxuICpcbiAqIFRleHRhcmVhIGlzIGEgbXVsdGktbGluZSB0ZXh0IGlucHV0IGVsZW1lbnQuXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvdGV4dGFyZWEvKVxuICpcbiAqIEBtb2R1bGUgdGV4dGFyZWFzdHlsZVxuICpcbiAqL1xuZXhwb3J0IGVudW0gVGV4dGFyZWFDbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICByb290ID0gJ3AtdGV4dGFyZWEnXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dGFyZWFTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19