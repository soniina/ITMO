import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-toolbar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    padding: ${dt('toolbar.padding')};
    background: ${dt('toolbar.background')};
    border: 1px solid ${dt('toolbar.border.color')};
    color: ${dt('toolbar.color')};
    border-radius: ${dt('toolbar.border.radius')};
    gap: ${dt('toolbar.gap')};
}

.p-toolbar-start,
.p-toolbar-center,
.p-toolbar-end {
    display: flex;
    align-items: center;
}
`;
const classes = {
    root: 'p-toolbar p-component',
    start: 'p-toolbar-start',
    center: 'p-toolbar-center',
    end: 'p-toolbar-end'
};
export class ToolbarStyle extends BaseStyle {
    name = 'toolbar';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵToolbarStyle_BaseFactory; return function ToolbarStyle_Factory(__ngFactoryType__) { return (ɵToolbarStyle_BaseFactory || (ɵToolbarStyle_BaseFactory = i0.ɵɵgetInheritedFactory(ToolbarStyle)))(__ngFactoryType__ || ToolbarStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ToolbarStyle, factory: ToolbarStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ToolbarStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Toolbar is a grouping component for buttons and other content.
 *
 * [Live Demo](https://www.primeng.org/toolbar/)
 *
 * @module toolbarstyle
 *
 */
export var ToolbarClasses;
(function (ToolbarClasses) {
    /**
     * Class name of the root element
     */
    ToolbarClasses["root"] = "p-toolbar";
    /**
     * Class name of the start element
     */
    ToolbarClasses["start"] = "p-toolbar-start";
    /**
     * Class name of the center element
     */
    ToolbarClasses["center"] = "p-toolbar-center";
    /**
     * Class name of the end element
     */
    ToolbarClasses["end"] = "p-toolbar-end";
})(ToolbarClasses || (ToolbarClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhcnN0eWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Rvb2xiYXIvc3R5bGUvdG9vbGJhcnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7O2VBTVgsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2tCQUNsQixFQUFFLENBQUMsb0JBQW9CLENBQUM7d0JBQ2xCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzthQUNyQyxFQUFFLENBQUMsZUFBZSxDQUFDO3FCQUNYLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztXQUNyQyxFQUFFLENBQUMsYUFBYSxDQUFDOzs7Ozs7Ozs7Q0FTM0IsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHO0lBQ1osSUFBSSxFQUFFLHVCQUF1QjtJQUM3QixLQUFLLEVBQUUsaUJBQWlCO0lBQ3hCLE1BQU0sRUFBRSxrQkFBa0I7SUFDMUIsR0FBRyxFQUFFLGVBQWU7Q0FDdkIsQ0FBQztBQUdGLE1BQU0sT0FBTyxZQUFhLFNBQVEsU0FBUztJQUN2QyxJQUFJLEdBQUcsU0FBUyxDQUFDO0lBRWpCLEtBQUssR0FBRyxLQUFLLENBQUM7SUFFZCxPQUFPLEdBQUcsT0FBTyxDQUFDOzZOQUxULFlBQVkseUJBQVosWUFBWTtnRUFBWixZQUFZLFdBQVosWUFBWTs7aUZBQVosWUFBWTtjQUR4QixVQUFVOztBQVNYOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFOLElBQVksY0FpQlg7QUFqQkQsV0FBWSxjQUFjO0lBQ3RCOztPQUVHO0lBQ0gsb0NBQWtCLENBQUE7SUFDbEI7O09BRUc7SUFDSCwyQ0FBeUIsQ0FBQTtJQUN6Qjs7T0FFRztJQUNILDZDQUEyQixDQUFBO0lBQzNCOztPQUVHO0lBQ0gsdUNBQXFCLENBQUE7QUFDekIsQ0FBQyxFQWpCVyxjQUFjLEtBQWQsY0FBYyxRQWlCekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlU3R5bGUgfSBmcm9tICdwcmltZW5nL2Jhc2UnO1xuXG5jb25zdCB0aGVtZSA9ICh7IGR0IH0pID0+IGBcbi5wLXRvb2xiYXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgZmxleC13cmFwOiB3cmFwO1xuICAgIHBhZGRpbmc6ICR7ZHQoJ3Rvb2xiYXIucGFkZGluZycpfTtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCd0b29sYmFyLmJhY2tncm91bmQnKX07XG4gICAgYm9yZGVyOiAxcHggc29saWQgJHtkdCgndG9vbGJhci5ib3JkZXIuY29sb3InKX07XG4gICAgY29sb3I6ICR7ZHQoJ3Rvb2xiYXIuY29sb3InKX07XG4gICAgYm9yZGVyLXJhZGl1czogJHtkdCgndG9vbGJhci5ib3JkZXIucmFkaXVzJyl9O1xuICAgIGdhcDogJHtkdCgndG9vbGJhci5nYXAnKX07XG59XG5cbi5wLXRvb2xiYXItc3RhcnQsXG4ucC10b29sYmFyLWNlbnRlcixcbi5wLXRvb2xiYXItZW5kIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5gO1xuXG5jb25zdCBjbGFzc2VzID0ge1xuICAgIHJvb3Q6ICdwLXRvb2xiYXIgcC1jb21wb25lbnQnLFxuICAgIHN0YXJ0OiAncC10b29sYmFyLXN0YXJ0JyxcbiAgICBjZW50ZXI6ICdwLXRvb2xiYXItY2VudGVyJyxcbiAgICBlbmQ6ICdwLXRvb2xiYXItZW5kJ1xufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRvb2xiYXJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICd0b29sYmFyJztcblxuICAgIHRoZW1lID0gdGhlbWU7XG5cbiAgICBjbGFzc2VzID0gY2xhc3Nlcztcbn1cblxuLyoqXG4gKlxuICogVG9vbGJhciBpcyBhIGdyb3VwaW5nIGNvbXBvbmVudCBmb3IgYnV0dG9ucyBhbmQgb3RoZXIgY29udGVudC5cbiAqXG4gKiBbTGl2ZSBEZW1vXShodHRwczovL3d3dy5wcmltZW5nLm9yZy90b29sYmFyLylcbiAqXG4gKiBAbW9kdWxlIHRvb2xiYXJzdHlsZVxuICpcbiAqL1xuZXhwb3J0IGVudW0gVG9vbGJhckNsYXNzZXMge1xuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICAgICAqL1xuICAgIHJvb3QgPSAncC10b29sYmFyJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBzdGFydCBlbGVtZW50XG4gICAgICovXG4gICAgc3RhcnQgPSAncC10b29sYmFyLXN0YXJ0JyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBjZW50ZXIgZWxlbWVudFxuICAgICAqL1xuICAgIGNlbnRlciA9ICdwLXRvb2xiYXItY2VudGVyJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBlbmQgZWxlbWVudFxuICAgICAqL1xuICAgIGVuZCA9ICdwLXRvb2xiYXItZW5kJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvb2xiYXJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19