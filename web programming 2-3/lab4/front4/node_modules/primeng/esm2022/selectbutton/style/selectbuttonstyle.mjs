import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-selectbutton {
    display: inline-flex;
    user-select: none;
    vertical-align: bottom;
    outline-color: transparent;
    border-radius: ${dt('selectbutton.border.radius')};
}

.p-selectbutton .p-togglebutton {
    border-radius: 0;
    border-width: 1px 1px 1px 0;
}

.p-selectbutton .p-togglebutton:focus-visible {
    position: relative;
    z-index: 1;
}

.p-selectbutton p-togglebutton:first-child .p-togglebutton {
    border-left-width: 1px;
    border-start-start-radius: ${dt('selectbutton.border.radius')};
    border-end-start-radius: ${dt('selectbutton.border.radius')};
}

.p-selectbutton p-togglebutton:last-child .p-togglebutton{
    border-start-end-radius: ${dt('selectbutton.border.radius')};
    border-end-end-radius: ${dt('selectbutton.border.radius')};
}

.p-selectbutton.ng-invalid.ng-dirty {
    outline: 1px solid ${dt('selectbutton.invalid.border.color')};
    outline-offset: 0;
}
`;
const classes = {
    root: ({ props }) => [
        'p-selectbutton p-component',
        {
            'p-invalid': props.invalid
        }
    ]
};
export class SelectButtonStyle extends BaseStyle {
    name = 'selectbutton';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵSelectButtonStyle_BaseFactory; return function SelectButtonStyle_Factory(__ngFactoryType__) { return (ɵSelectButtonStyle_BaseFactory || (ɵSelectButtonStyle_BaseFactory = i0.ɵɵgetInheritedFactory(SelectButtonStyle)))(__ngFactoryType__ || SelectButtonStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SelectButtonStyle, factory: SelectButtonStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SelectButtonStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * SelectButton is used to choose single or multiple items from a list using buttons.
 *
 * [Live Demo](https://www.primeng.org/selectbutton/)
 *
 * @module selectbuttonstyle
 *
 */
export var SelectButtonClasses;
(function (SelectButtonClasses) {
    /**
     * Class name of the root element
     */
    SelectButtonClasses["root"] = "p-selectbutton";
})(SelectButtonClasses || (SelectButtonClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0YnV0dG9uc3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VsZWN0YnV0dG9uL3N0eWxlL3NlbGVjdGJ1dHRvbnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7O3FCQU1MLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O2lDQWVwQixFQUFFLENBQUMsNEJBQTRCLENBQUM7K0JBQ2xDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7OzsrQkFJaEMsRUFBRSxDQUFDLDRCQUE0QixDQUFDOzZCQUNsQyxFQUFFLENBQUMsNEJBQTRCLENBQUM7Ozs7eUJBSXBDLEVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQzs7O0NBRy9ELENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2pCLDRCQUE0QjtRQUM1QjtZQUNJLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTztTQUM3QjtLQUNKO0NBQ0osQ0FBQztBQUdGLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxTQUFTO0lBQzVDLElBQUksR0FBRyxjQUFjLENBQUM7SUFFdEIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUVkLE9BQU8sR0FBRyxPQUFPLENBQUM7aVBBTFQsaUJBQWlCLHlCQUFqQixpQkFBaUI7Z0VBQWpCLGlCQUFpQixXQUFqQixpQkFBaUI7O2lGQUFqQixpQkFBaUI7Y0FEN0IsVUFBVTs7QUFTWDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBTixJQUFZLG1CQUtYO0FBTEQsV0FBWSxtQkFBbUI7SUFDM0I7O09BRUc7SUFDSCw4Q0FBdUIsQ0FBQTtBQUMzQixDQUFDLEVBTFcsbUJBQW1CLEtBQW5CLG1CQUFtQixRQUs5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VTdHlsZSB9IGZyb20gJ3ByaW1lbmcvYmFzZSc7XG5cbmNvbnN0IHRoZW1lID0gKHsgZHQgfSkgPT4gYFxuLnAtc2VsZWN0YnV0dG9uIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xuICAgIG91dGxpbmUtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ3NlbGVjdGJ1dHRvbi5ib3JkZXIucmFkaXVzJyl9O1xufVxuXG4ucC1zZWxlY3RidXR0b24gLnAtdG9nZ2xlYnV0dG9uIHtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgIGJvcmRlci13aWR0aDogMXB4IDFweCAxcHggMDtcbn1cblxuLnAtc2VsZWN0YnV0dG9uIC5wLXRvZ2dsZWJ1dHRvbjpmb2N1cy12aXNpYmxlIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgei1pbmRleDogMTtcbn1cblxuLnAtc2VsZWN0YnV0dG9uIHAtdG9nZ2xlYnV0dG9uOmZpcnN0LWNoaWxkIC5wLXRvZ2dsZWJ1dHRvbiB7XG4gICAgYm9yZGVyLWxlZnQtd2lkdGg6IDFweDtcbiAgICBib3JkZXItc3RhcnQtc3RhcnQtcmFkaXVzOiAke2R0KCdzZWxlY3RidXR0b24uYm9yZGVyLnJhZGl1cycpfTtcbiAgICBib3JkZXItZW5kLXN0YXJ0LXJhZGl1czogJHtkdCgnc2VsZWN0YnV0dG9uLmJvcmRlci5yYWRpdXMnKX07XG59XG5cbi5wLXNlbGVjdGJ1dHRvbiBwLXRvZ2dsZWJ1dHRvbjpsYXN0LWNoaWxkIC5wLXRvZ2dsZWJ1dHRvbntcbiAgICBib3JkZXItc3RhcnQtZW5kLXJhZGl1czogJHtkdCgnc2VsZWN0YnV0dG9uLmJvcmRlci5yYWRpdXMnKX07XG4gICAgYm9yZGVyLWVuZC1lbmQtcmFkaXVzOiAke2R0KCdzZWxlY3RidXR0b24uYm9yZGVyLnJhZGl1cycpfTtcbn1cblxuLnAtc2VsZWN0YnV0dG9uLm5nLWludmFsaWQubmctZGlydHkge1xuICAgIG91dGxpbmU6IDFweCBzb2xpZCAke2R0KCdzZWxlY3RidXR0b24uaW52YWxpZC5ib3JkZXIuY29sb3InKX07XG4gICAgb3V0bGluZS1vZmZzZXQ6IDA7XG59XG5gO1xuXG5jb25zdCBjbGFzc2VzID0ge1xuICAgIHJvb3Q6ICh7IHByb3BzIH0pID0+IFtcbiAgICAgICAgJ3Atc2VsZWN0YnV0dG9uIHAtY29tcG9uZW50JyxcbiAgICAgICAge1xuICAgICAgICAgICAgJ3AtaW52YWxpZCc6IHByb3BzLmludmFsaWRcbiAgICAgICAgfVxuICAgIF1cbn07XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZWxlY3RCdXR0b25TdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICdzZWxlY3RidXR0b24nO1xuXG4gICAgdGhlbWUgPSB0aGVtZTtcblxuICAgIGNsYXNzZXMgPSBjbGFzc2VzO1xufVxuXG4vKipcbiAqXG4gKiBTZWxlY3RCdXR0b24gaXMgdXNlZCB0byBjaG9vc2Ugc2luZ2xlIG9yIG11bHRpcGxlIGl0ZW1zIGZyb20gYSBsaXN0IHVzaW5nIGJ1dHRvbnMuXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvc2VsZWN0YnV0dG9uLylcbiAqXG4gKiBAbW9kdWxlIHNlbGVjdGJ1dHRvbnN0eWxlXG4gKlxuICovXG5leHBvcnQgZW51bSBTZWxlY3RCdXR0b25DbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICByb290ID0gJ3Atc2VsZWN0YnV0dG9uJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdEJ1dHRvblN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHt9XG4iXX0=