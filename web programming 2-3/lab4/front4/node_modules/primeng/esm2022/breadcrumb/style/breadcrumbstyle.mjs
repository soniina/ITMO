import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-breadcrumb {
    background: ${dt('breadcrumb.background')};
    padding: ${dt('breadcrumb.padding')};
    overflow-x: auto;
}

.p-breadcrumb-list {
    margin: 0;
    padding: 0;
    list-style-type: none;
    display: flex;
    align-items: center;
    flex-wrap: nowrap;
    gap: ${dt('breadcrumb.gap')};
}

.p-breadcrumb-separator {
    display: flex;
    align-items: center;
    color: ${dt('breadcrumb.separator.color')};
}

.p-breadcrumb-separator .p-icon:dir(rtl) {
    transform: rotate(180deg);
}

.p-breadcrumb::-webkit-scrollbar {
    display: none;
}

.p-breadcrumb-item-link {
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: ${dt('breadcrumb.item.gap')};
    transition: background ${dt('breadcrumb.transition.duration')}, color ${dt('breadcrumb.transition.duration')}, outline-color ${dt('breadcrumb.transition.duration')}, box-shadow ${dt('breadcrumb.transition.duration')};
    border-radius: ${dt('breadcrumb.item.border.radius')};
    outline-color: transparent;
    color: ${dt('breadcrumb.item.color')};
}

.p-breadcrumb-item-link:focus-visible {
    box-shadow: ${dt('breadcrumb.item.focus.ring.shadow')};
    outline: ${dt('breadcrumb.item.focus.ring.width')} ${dt('breadcrumb.item.focus.ring.style')} ${dt('breadcrumb.item.focus.ring.color')};
    outline-offset: ${dt('breadcrumb.item.focus.ring.offset')};
}

.p-breadcrumb-item-link:hover .p-breadcrumb-item-label {
    color: ${dt('breadcrumb.item.hover.color')};
}

.p-breadcrumb-item-label {
    transition: inherit;
}

.p-breadcrumb-item-icon {
    color: ${dt('breadcrumb.item.icon.color')};
    transition: inherit;
}

.p-breadcrumb-item-link:hover .p-breadcrumb-item-icon {
    color: ${dt('breadcrumb.item.icon.hover.color')};
}
`;
const classes = {
    root: 'p-breadcrumb p-component',
    list: 'p-breadcrumb-list',
    homeItem: 'p-breadcrumb-home-item',
    separator: 'p-breadcrumb-separator',
    item: ({ instance }) => ['p-breadcrumb-item', { 'p-disabled': instance.disabled() }],
    itemLink: 'p-breadcrumb-item-link',
    itemIcon: 'p-breadcrumb-item-icon',
    itemLabel: 'p-breadcrumb-item-label'
};
export class BreadCrumbStyle extends BaseStyle {
    name = 'breadcrumb';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵBreadCrumbStyle_BaseFactory; return function BreadCrumbStyle_Factory(__ngFactoryType__) { return (ɵBreadCrumbStyle_BaseFactory || (ɵBreadCrumbStyle_BaseFactory = i0.ɵɵgetInheritedFactory(BreadCrumbStyle)))(__ngFactoryType__ || BreadCrumbStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: BreadCrumbStyle, factory: BreadCrumbStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BreadCrumbStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Breadcrumb provides contextual information about page hierarchy.
 *
 * [Live Demo](https://www.primeng.org/breadcrumb/)
 *
 * @module breadcrumbstyle
 *
 */
export var BreadcrumbClasses;
(function (BreadcrumbClasses) {
    /**
     * Class name of the root element
     */
    BreadcrumbClasses["root"] = "p-breadcrumb";
    /**
     * Class name of the list element
     */
    BreadcrumbClasses["list"] = "p-breadcrumb-list";
    /**
     * Class name of the home item element
     */
    BreadcrumbClasses["homeItem"] = "p-breadcrumb-home-item";
    /**
     * Class name of the separator element
     */
    BreadcrumbClasses["separator"] = "p-breadcrumb-separator";
    /**
     * Class name of the item element
     */
    BreadcrumbClasses["item"] = "p-breadcrumb-item";
    /**
     * Class name of the item link element
     */
    BreadcrumbClasses["itemLink"] = "p-breadcrumb-item-link";
    /**
     * Class name of the item icon element
     */
    BreadcrumbClasses["itemIcon"] = "p-breadcrumb-item-icon";
    /**
     * Class name of the item label element
     */
    BreadcrumbClasses["itemLabel"] = "p-breadcrumb-item-label";
})(BreadcrumbClasses || (BreadcrumbClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnN0eWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2JyZWFkY3J1bWIvc3R5bGUvYnJlYWRjcnVtYnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7a0JBRVIsRUFBRSxDQUFDLHVCQUF1QixDQUFDO2VBQzlCLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzs7Ozs7Ozs7Ozs7V0FXNUIsRUFBRSxDQUFDLGdCQUFnQixDQUFDOzs7Ozs7YUFNbEIsRUFBRSxDQUFDLDRCQUE0QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7V0FlbEMsRUFBRSxDQUFDLHFCQUFxQixDQUFDOzZCQUNQLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLGdDQUFnQyxDQUFDLGdCQUFnQixFQUFFLENBQUMsZ0NBQWdDLENBQUM7cUJBQ3RNLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQzs7YUFFM0MsRUFBRSxDQUFDLHVCQUF1QixDQUFDOzs7O2tCQUl0QixFQUFFLENBQUMsbUNBQW1DLENBQUM7ZUFDMUMsRUFBRSxDQUFDLGtDQUFrQyxDQUFDLElBQUksRUFBRSxDQUFDLGtDQUFrQyxDQUFDLElBQUksRUFBRSxDQUFDLGtDQUFrQyxDQUFDO3NCQUNuSCxFQUFFLENBQUMsbUNBQW1DLENBQUM7Ozs7YUFJaEQsRUFBRSxDQUFDLDZCQUE2QixDQUFDOzs7Ozs7OzthQVFqQyxFQUFFLENBQUMsNEJBQTRCLENBQUM7Ozs7O2FBS2hDLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQzs7Q0FFbEQsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHO0lBQ1osSUFBSSxFQUFFLDBCQUEwQjtJQUNoQyxJQUFJLEVBQUUsbUJBQW1CO0lBQ3pCLFFBQVEsRUFBRSx3QkFBd0I7SUFDbEMsU0FBUyxFQUFFLHdCQUF3QjtJQUNuQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO0lBQ3BGLFFBQVEsRUFBRSx3QkFBd0I7SUFDbEMsUUFBUSxFQUFFLHdCQUF3QjtJQUNsQyxTQUFTLEVBQUUseUJBQXlCO0NBQ3ZDLENBQUM7QUFHRixNQUFNLE9BQU8sZUFBZ0IsU0FBUSxTQUFTO0lBQzFDLElBQUksR0FBRyxZQUFZLENBQUM7SUFFcEIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUVkLE9BQU8sR0FBRyxPQUFPLENBQUM7eU9BTFQsZUFBZSx5QkFBZixlQUFlO2dFQUFmLGVBQWUsV0FBZixlQUFlOztpRkFBZixlQUFlO2NBRDNCLFVBQVU7O0FBU1g7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQU4sSUFBWSxpQkFpQ1g7QUFqQ0QsV0FBWSxpQkFBaUI7SUFDekI7O09BRUc7SUFDSCwwQ0FBcUIsQ0FBQTtJQUNyQjs7T0FFRztJQUNILCtDQUEwQixDQUFBO0lBQzFCOztPQUVHO0lBQ0gsd0RBQW1DLENBQUE7SUFDbkM7O09BRUc7SUFDSCx5REFBb0MsQ0FBQTtJQUNwQzs7T0FFRztJQUNILCtDQUEwQixDQUFBO0lBQzFCOztPQUVHO0lBQ0gsd0RBQW1DLENBQUE7SUFDbkM7O09BRUc7SUFDSCx3REFBbUMsQ0FBQTtJQUNuQzs7T0FFRztJQUNILDBEQUFxQyxDQUFBO0FBQ3pDLENBQUMsRUFqQ1csaUJBQWlCLEtBQWpCLGlCQUFpQixRQWlDNUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlU3R5bGUgfSBmcm9tICdwcmltZW5nL2Jhc2UnO1xuXG5jb25zdCB0aGVtZSA9ICh7IGR0IH0pID0+IGBcbi5wLWJyZWFkY3J1bWIge1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ2JyZWFkY3J1bWIuYmFja2dyb3VuZCcpfTtcbiAgICBwYWRkaW5nOiAke2R0KCdicmVhZGNydW1iLnBhZGRpbmcnKX07XG4gICAgb3ZlcmZsb3cteDogYXV0bztcbn1cblxuLnAtYnJlYWRjcnVtYi1saXN0IHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGZsZXgtd3JhcDogbm93cmFwO1xuICAgIGdhcDogJHtkdCgnYnJlYWRjcnVtYi5nYXAnKX07XG59XG5cbi5wLWJyZWFkY3J1bWItc2VwYXJhdG9yIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgY29sb3I6ICR7ZHQoJ2JyZWFkY3J1bWIuc2VwYXJhdG9yLmNvbG9yJyl9O1xufVxuXG4ucC1icmVhZGNydW1iLXNlcGFyYXRvciAucC1pY29uOmRpcihydGwpIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xufVxuXG4ucC1icmVhZGNydW1iOjotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuLnAtYnJlYWRjcnVtYi1pdGVtLWxpbmsge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZ2FwOiAke2R0KCdicmVhZGNydW1iLml0ZW0uZ2FwJyl9O1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgJHtkdCgnYnJlYWRjcnVtYi50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBjb2xvciAke2R0KCdicmVhZGNydW1iLnRyYW5zaXRpb24uZHVyYXRpb24nKX0sIG91dGxpbmUtY29sb3IgJHtkdCgnYnJlYWRjcnVtYi50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBib3gtc2hhZG93ICR7ZHQoJ2JyZWFkY3J1bWIudHJhbnNpdGlvbi5kdXJhdGlvbicpfTtcbiAgICBib3JkZXItcmFkaXVzOiAke2R0KCdicmVhZGNydW1iLml0ZW0uYm9yZGVyLnJhZGl1cycpfTtcbiAgICBvdXRsaW5lLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBjb2xvcjogJHtkdCgnYnJlYWRjcnVtYi5pdGVtLmNvbG9yJyl9O1xufVxuXG4ucC1icmVhZGNydW1iLWl0ZW0tbGluazpmb2N1cy12aXNpYmxlIHtcbiAgICBib3gtc2hhZG93OiAke2R0KCdicmVhZGNydW1iLml0ZW0uZm9jdXMucmluZy5zaGFkb3cnKX07XG4gICAgb3V0bGluZTogJHtkdCgnYnJlYWRjcnVtYi5pdGVtLmZvY3VzLnJpbmcud2lkdGgnKX0gJHtkdCgnYnJlYWRjcnVtYi5pdGVtLmZvY3VzLnJpbmcuc3R5bGUnKX0gJHtkdCgnYnJlYWRjcnVtYi5pdGVtLmZvY3VzLnJpbmcuY29sb3InKX07XG4gICAgb3V0bGluZS1vZmZzZXQ6ICR7ZHQoJ2JyZWFkY3J1bWIuaXRlbS5mb2N1cy5yaW5nLm9mZnNldCcpfTtcbn1cblxuLnAtYnJlYWRjcnVtYi1pdGVtLWxpbms6aG92ZXIgLnAtYnJlYWRjcnVtYi1pdGVtLWxhYmVsIHtcbiAgICBjb2xvcjogJHtkdCgnYnJlYWRjcnVtYi5pdGVtLmhvdmVyLmNvbG9yJyl9O1xufVxuXG4ucC1icmVhZGNydW1iLWl0ZW0tbGFiZWwge1xuICAgIHRyYW5zaXRpb246IGluaGVyaXQ7XG59XG5cbi5wLWJyZWFkY3J1bWItaXRlbS1pY29uIHtcbiAgICBjb2xvcjogJHtkdCgnYnJlYWRjcnVtYi5pdGVtLmljb24uY29sb3InKX07XG4gICAgdHJhbnNpdGlvbjogaW5oZXJpdDtcbn1cblxuLnAtYnJlYWRjcnVtYi1pdGVtLWxpbms6aG92ZXIgLnAtYnJlYWRjcnVtYi1pdGVtLWljb24ge1xuICAgIGNvbG9yOiAke2R0KCdicmVhZGNydW1iLml0ZW0uaWNvbi5ob3Zlci5jb2xvcicpfTtcbn1cbmA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogJ3AtYnJlYWRjcnVtYiBwLWNvbXBvbmVudCcsXG4gICAgbGlzdDogJ3AtYnJlYWRjcnVtYi1saXN0JyxcbiAgICBob21lSXRlbTogJ3AtYnJlYWRjcnVtYi1ob21lLWl0ZW0nLFxuICAgIHNlcGFyYXRvcjogJ3AtYnJlYWRjcnVtYi1zZXBhcmF0b3InLFxuICAgIGl0ZW06ICh7IGluc3RhbmNlIH0pID0+IFsncC1icmVhZGNydW1iLWl0ZW0nLCB7ICdwLWRpc2FibGVkJzogaW5zdGFuY2UuZGlzYWJsZWQoKSB9XSxcbiAgICBpdGVtTGluazogJ3AtYnJlYWRjcnVtYi1pdGVtLWxpbmsnLFxuICAgIGl0ZW1JY29uOiAncC1icmVhZGNydW1iLWl0ZW0taWNvbicsXG4gICAgaXRlbUxhYmVsOiAncC1icmVhZGNydW1iLWl0ZW0tbGFiZWwnXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQnJlYWRDcnVtYlN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHtcbiAgICBuYW1lID0gJ2JyZWFkY3J1bWInO1xuXG4gICAgdGhlbWUgPSB0aGVtZTtcblxuICAgIGNsYXNzZXMgPSBjbGFzc2VzO1xufVxuXG4vKipcbiAqXG4gKiBCcmVhZGNydW1iIHByb3ZpZGVzIGNvbnRleHR1YWwgaW5mb3JtYXRpb24gYWJvdXQgcGFnZSBoaWVyYXJjaHkuXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvYnJlYWRjcnVtYi8pXG4gKlxuICogQG1vZHVsZSBicmVhZGNydW1ic3R5bGVcbiAqXG4gKi9cbmV4cG9ydCBlbnVtIEJyZWFkY3J1bWJDbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICByb290ID0gJ3AtYnJlYWRjcnVtYicsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgbGlzdCBlbGVtZW50XG4gICAgICovXG4gICAgbGlzdCA9ICdwLWJyZWFkY3J1bWItbGlzdCcsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgaG9tZSBpdGVtIGVsZW1lbnRcbiAgICAgKi9cbiAgICBob21lSXRlbSA9ICdwLWJyZWFkY3J1bWItaG9tZS1pdGVtJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBzZXBhcmF0b3IgZWxlbWVudFxuICAgICAqL1xuICAgIHNlcGFyYXRvciA9ICdwLWJyZWFkY3J1bWItc2VwYXJhdG9yJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBpdGVtIGVsZW1lbnRcbiAgICAgKi9cbiAgICBpdGVtID0gJ3AtYnJlYWRjcnVtYi1pdGVtJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBpdGVtIGxpbmsgZWxlbWVudFxuICAgICAqL1xuICAgIGl0ZW1MaW5rID0gJ3AtYnJlYWRjcnVtYi1pdGVtLWxpbmsnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGl0ZW0gaWNvbiBlbGVtZW50XG4gICAgICovXG4gICAgaXRlbUljb24gPSAncC1icmVhZGNydW1iLWl0ZW0taWNvbicsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgaXRlbSBsYWJlbCBlbGVtZW50XG4gICAgICovXG4gICAgaXRlbUxhYmVsID0gJ3AtYnJlYWRjcnVtYi1pdGVtLWxhYmVsJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyZWFkY3J1bWJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19