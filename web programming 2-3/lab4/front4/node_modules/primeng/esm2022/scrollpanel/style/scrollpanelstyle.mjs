import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-scrollpanel-content-container {
    overflow: hidden;
    width: 100%;
    height: 100%;
    position: relative;
    z-index: 1;
    float: left;
}

.p-scrollpanel-content {
    height: calc(100% + calc(2 * ${dt('scrollpanel.bar.size')}));
    width: calc(100% + calc(2 * ${dt('scrollpanel.bar.size')}));
    padding-inline: 0 calc(2 * ${dt('scrollpanel.bar.size')});
    padding-block: 0 calc(2 * ${dt('scrollpanel.bar.size')});
    position: relative;
    overflow: auto;
    box-sizing: border-box;
    scrollbar-width: none;
}

.p-scrollpanel-content::-webkit-scrollbar {
    display: none;
}

.p-scrollpanel-bar {
    position: relative;
    border-radius: ${dt('scrollpanel.bar.border.radius')};
    z-index: 2;
    cursor: pointer;
    opacity: 0;
    outline-color: transparent;
    transition: outline-color ${dt('scrollpanel.transition.duration')};
    background: ${dt('scrollpanel.bar.background')};
    border: 0 none;
    transition: outline-color ${dt('scrollpanel.transition.duration')}, opacity ${dt('scrollpanel.transition.duration')};
}

.p-scrollpanel-bar:focus-visible {
    box-shadow: ${dt('scrollpanel.bar.focus.ring.shadow')};
    outline: ${dt('scrollpanel.barfocus.ring.width')} ${dt('scrollpanel.bar.focus.ring.style')} ${dt('scrollpanel.bar.focus.ring.color')};
    outline-offset: ${dt('scrollpanel.barfocus.ring.offset')};
}

.p-scrollpanel-bar-y {
    width: ${dt('scrollpanel.bar.size')};
    top: 0;
}

.p-scrollpanel-bar-x {
    height: ${dt('scrollpanel.bar.size')};
    bottom: 0;
}

.p-scrollpanel-hidden {
    visibility: hidden;
}

.p-scrollpanel:hover .p-scrollpanel-bar,
.p-scrollpanel:active .p-scrollpanel-bar {
    opacity: 1;
}

.p-scrollpanel-grabbed {
    user-select: none;
}
`;
const classes = {
    root: 'p-scrollpanel p-component',
    contentContainer: 'p-scrollpanel-content-container',
    content: 'p-scrollpanel-content',
    barX: 'p-scrollpanel-bar p-scrollpanel-bar-x',
    barY: 'p-scrollpanel-bar p-scrollpanel-bar-y'
};
export class ScrollPanelStyle extends BaseStyle {
    name = 'scrollpanel';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵScrollPanelStyle_BaseFactory; return function ScrollPanelStyle_Factory(__ngFactoryType__) { return (ɵScrollPanelStyle_BaseFactory || (ɵScrollPanelStyle_BaseFactory = i0.ɵɵgetInheritedFactory(ScrollPanelStyle)))(__ngFactoryType__ || ScrollPanelStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ScrollPanelStyle, factory: ScrollPanelStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ScrollPanelStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar.
 *
 * [Live Demo](https://www.primeng.org/scrollpanel/)
 *
 * @module scrollpanelstyle
 *
 */
export var ScrollPanelClasses;
(function (ScrollPanelClasses) {
    /**
     * Class name of the root element
     */
    ScrollPanelClasses["root"] = "p-scrollpanel";
    /**
     * Class name of the content container element
     */
    ScrollPanelClasses["contentContainer"] = "p-scrollpanel-content-container";
    /**
     * Class name of the content element
     */
    ScrollPanelClasses["content"] = "p-scrollpanel-content";
    /**
     * Class name of the bar x element
     */
    ScrollPanelClasses["barX"] = "p-scrollpanel-bar-x";
    /**
     * Class name of the bar y element
     */
    ScrollPanelClasses["barY"] = "p-scrollpanel-bar-y";
})(ScrollPanelClasses || (ScrollPanelClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xscGFuZWxzdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zY3JvbGxwYW5lbC9zdHlsZS9zY3JvbGxwYW5lbHN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7bUNBV1MsRUFBRSxDQUFDLHNCQUFzQixDQUFDO2tDQUMzQixFQUFFLENBQUMsc0JBQXNCLENBQUM7aUNBQzNCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztnQ0FDM0IsRUFBRSxDQUFDLHNCQUFzQixDQUFDOzs7Ozs7Ozs7Ozs7O3FCQWFyQyxFQUFFLENBQUMsK0JBQStCLENBQUM7Ozs7O2dDQUt4QixFQUFFLENBQUMsaUNBQWlDLENBQUM7a0JBQ25ELEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7Z0NBRWxCLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQzs7OztrQkFJckcsRUFBRSxDQUFDLG1DQUFtQyxDQUFDO2VBQzFDLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQztzQkFDbEgsRUFBRSxDQUFDLGtDQUFrQyxDQUFDOzs7O2FBSS9DLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzs7Ozs7Y0FLekIsRUFBRSxDQUFDLHNCQUFzQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0J2QyxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUc7SUFDWixJQUFJLEVBQUUsMkJBQTJCO0lBQ2pDLGdCQUFnQixFQUFFLGlDQUFpQztJQUNuRCxPQUFPLEVBQUUsdUJBQXVCO0lBQ2hDLElBQUksRUFBRSx1Q0FBdUM7SUFDN0MsSUFBSSxFQUFFLHVDQUF1QztDQUNoRCxDQUFDO0FBR0YsTUFBTSxPQUFPLGdCQUFpQixTQUFRLFNBQVM7SUFDM0MsSUFBSSxHQUFHLGFBQWEsQ0FBQztJQUVyQixLQUFLLEdBQUcsS0FBSyxDQUFDO0lBRWQsT0FBTyxHQUFHLE9BQU8sQ0FBQzs2T0FMVCxnQkFBZ0IseUJBQWhCLGdCQUFnQjtnRUFBaEIsZ0JBQWdCLFdBQWhCLGdCQUFnQjs7aUZBQWhCLGdCQUFnQjtjQUQ1QixVQUFVOztBQVNYOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFOLElBQVksa0JBcUJYO0FBckJELFdBQVksa0JBQWtCO0lBQzFCOztPQUVHO0lBQ0gsNENBQXNCLENBQUE7SUFDdEI7O09BRUc7SUFDSCwwRUFBb0QsQ0FBQTtJQUNwRDs7T0FFRztJQUNILHVEQUFpQyxDQUFBO0lBQ2pDOztPQUVHO0lBQ0gsa0RBQTRCLENBQUE7SUFDNUI7O09BRUc7SUFDSCxrREFBNEIsQ0FBQTtBQUNoQyxDQUFDLEVBckJXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFxQjdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC1zY3JvbGxwYW5lbC1jb250ZW50LWNvbnRhaW5lciB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHotaW5kZXg6IDE7XG4gICAgZmxvYXQ6IGxlZnQ7XG59XG5cbi5wLXNjcm9sbHBhbmVsLWNvbnRlbnQge1xuICAgIGhlaWdodDogY2FsYygxMDAlICsgY2FsYygyICogJHtkdCgnc2Nyb2xscGFuZWwuYmFyLnNpemUnKX0pKTtcbiAgICB3aWR0aDogY2FsYygxMDAlICsgY2FsYygyICogJHtkdCgnc2Nyb2xscGFuZWwuYmFyLnNpemUnKX0pKTtcbiAgICBwYWRkaW5nLWlubGluZTogMCBjYWxjKDIgKiAke2R0KCdzY3JvbGxwYW5lbC5iYXIuc2l6ZScpfSk7XG4gICAgcGFkZGluZy1ibG9jazogMCBjYWxjKDIgKiAke2R0KCdzY3JvbGxwYW5lbC5iYXIuc2l6ZScpfSk7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgc2Nyb2xsYmFyLXdpZHRoOiBub25lO1xufVxuXG4ucC1zY3JvbGxwYW5lbC1jb250ZW50Ojotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuLnAtc2Nyb2xscGFuZWwtYmFyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYm9yZGVyLXJhZGl1czogJHtkdCgnc2Nyb2xscGFuZWwuYmFyLmJvcmRlci5yYWRpdXMnKX07XG4gICAgei1pbmRleDogMjtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgb3BhY2l0eTogMDtcbiAgICBvdXRsaW5lLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB0cmFuc2l0aW9uOiBvdXRsaW5lLWNvbG9yICR7ZHQoJ3Njcm9sbHBhbmVsLnRyYW5zaXRpb24uZHVyYXRpb24nKX07XG4gICAgYmFja2dyb3VuZDogJHtkdCgnc2Nyb2xscGFuZWwuYmFyLmJhY2tncm91bmQnKX07XG4gICAgYm9yZGVyOiAwIG5vbmU7XG4gICAgdHJhbnNpdGlvbjogb3V0bGluZS1jb2xvciAke2R0KCdzY3JvbGxwYW5lbC50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBvcGFjaXR5ICR7ZHQoJ3Njcm9sbHBhbmVsLnRyYW5zaXRpb24uZHVyYXRpb24nKX07XG59XG5cbi5wLXNjcm9sbHBhbmVsLWJhcjpmb2N1cy12aXNpYmxlIHtcbiAgICBib3gtc2hhZG93OiAke2R0KCdzY3JvbGxwYW5lbC5iYXIuZm9jdXMucmluZy5zaGFkb3cnKX07XG4gICAgb3V0bGluZTogJHtkdCgnc2Nyb2xscGFuZWwuYmFyZm9jdXMucmluZy53aWR0aCcpfSAke2R0KCdzY3JvbGxwYW5lbC5iYXIuZm9jdXMucmluZy5zdHlsZScpfSAke2R0KCdzY3JvbGxwYW5lbC5iYXIuZm9jdXMucmluZy5jb2xvcicpfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtkdCgnc2Nyb2xscGFuZWwuYmFyZm9jdXMucmluZy5vZmZzZXQnKX07XG59XG5cbi5wLXNjcm9sbHBhbmVsLWJhci15IHtcbiAgICB3aWR0aDogJHtkdCgnc2Nyb2xscGFuZWwuYmFyLnNpemUnKX07XG4gICAgdG9wOiAwO1xufVxuXG4ucC1zY3JvbGxwYW5lbC1iYXIteCB7XG4gICAgaGVpZ2h0OiAke2R0KCdzY3JvbGxwYW5lbC5iYXIuc2l6ZScpfTtcbiAgICBib3R0b206IDA7XG59XG5cbi5wLXNjcm9sbHBhbmVsLWhpZGRlbiB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuXG4ucC1zY3JvbGxwYW5lbDpob3ZlciAucC1zY3JvbGxwYW5lbC1iYXIsXG4ucC1zY3JvbGxwYW5lbDphY3RpdmUgLnAtc2Nyb2xscGFuZWwtYmFyIHtcbiAgICBvcGFjaXR5OiAxO1xufVxuXG4ucC1zY3JvbGxwYW5lbC1ncmFiYmVkIHtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbn1cbmA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogJ3Atc2Nyb2xscGFuZWwgcC1jb21wb25lbnQnLFxuICAgIGNvbnRlbnRDb250YWluZXI6ICdwLXNjcm9sbHBhbmVsLWNvbnRlbnQtY29udGFpbmVyJyxcbiAgICBjb250ZW50OiAncC1zY3JvbGxwYW5lbC1jb250ZW50JyxcbiAgICBiYXJYOiAncC1zY3JvbGxwYW5lbC1iYXIgcC1zY3JvbGxwYW5lbC1iYXIteCcsXG4gICAgYmFyWTogJ3Atc2Nyb2xscGFuZWwtYmFyIHAtc2Nyb2xscGFuZWwtYmFyLXknXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2Nyb2xsUGFuZWxTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICdzY3JvbGxwYW5lbCc7XG5cbiAgICB0aGVtZSA9IHRoZW1lO1xuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXM7XG59XG5cbi8qKlxuICpcbiAqIFNjcm9sbFBhbmVsIGlzIGEgY3Jvc3MgYnJvd3NlciwgbGlnaHR3ZWlnaHQgYW5kIHRoZW1hYmxlIGFsdGVybmF0aXZlIHRvIG5hdGl2ZSBicm93c2VyIHNjcm9sbGJhci5cbiAqXG4gKiBbTGl2ZSBEZW1vXShodHRwczovL3d3dy5wcmltZW5nLm9yZy9zY3JvbGxwYW5lbC8pXG4gKlxuICogQG1vZHVsZSBzY3JvbGxwYW5lbHN0eWxlXG4gKlxuICovXG5leHBvcnQgZW51bSBTY3JvbGxQYW5lbENsYXNzZXMge1xuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICAgICAqL1xuICAgIHJvb3QgPSAncC1zY3JvbGxwYW5lbCcsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgY29udGVudCBjb250YWluZXIgZWxlbWVudFxuICAgICAqL1xuICAgIGNvbnRlbnRDb250YWluZXIgPSAncC1zY3JvbGxwYW5lbC1jb250ZW50LWNvbnRhaW5lcicsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgY29udGVudCBlbGVtZW50XG4gICAgICovXG4gICAgY29udGVudCA9ICdwLXNjcm9sbHBhbmVsLWNvbnRlbnQnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGJhciB4IGVsZW1lbnRcbiAgICAgKi9cbiAgICBiYXJYID0gJ3Atc2Nyb2xscGFuZWwtYmFyLXgnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGJhciB5IGVsZW1lbnRcbiAgICAgKi9cbiAgICBiYXJZID0gJ3Atc2Nyb2xscGFuZWwtYmFyLXknXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Nyb2xsUGFuZWxTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19