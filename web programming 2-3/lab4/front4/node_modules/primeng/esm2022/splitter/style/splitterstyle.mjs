import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-splitter {
    display: flex;
    flex-wrap: nowrap;
    border: 1px solid ${dt('splitter.border.color')};
    background: ${dt('splitter.background')};
    border-radius: ${dt('border.radius.md')};
    color: ${dt('splitter.color')};
}

.p-splitter-vertical {
    flex-direction: column;
}

.p-splitter-gutter {
    flex-grow: 0;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1;
    background: ${dt('splitter.gutter.background')};
}

.p-splitter-gutter-handle {
    border-radius: ${dt('splitter.handle.border.radius')};
    background: ${dt('splitter.handle.background')};
    transition: outline-color ${dt('splitter.transition.duration')}, box-shadow ${dt('splitter.transition.duration')};
    outline-color: transparent;
}

.p-splitter-gutter-handle:focus-visible {
    box-shadow: ${dt('splitter.handle.focus.ring.shadow')};
    outline: ${dt('splitter.handle.focus.ring.width')} ${dt('splitter.handle.focus.ring.style')} ${dt('splitter.handle.focus.ring.color')};
    outline-offset: ${dt('splitter.handle.focus.ring.offset')};
}

.p-splitter-horizontal.p-splitter-resizing {
    cursor: col-resize;
    user-select: none;
}

.p-splitter-vertical.p-splitter-resizing {
    cursor: row-resize;
    user-select: none;
}

.p-splitter-horizontal > .p-splitter-gutter > .p-splitter-gutter-handle {
    height: ${dt('splitter.handle.size')};
    width: 100%;
}

.p-splitter-vertical > .p-splitter-gutter > .p-splitter-gutter-handle {
    width: ${dt('splitter.handle.size')};
    height: 100%;
}

.p-splitter-horizontal > .p-splitter-gutter {
    cursor: col-resize;
}

.p-splitter-vertical > .p-splitter-gutter {
    cursor: row-resize;
}

.p-splitterpanel {
    flex-grow: 1;
    overflow: hidden;
}

.p-splitterpanel-nested {
    display: flex;
    flex-grow: 1;
    justify-content: center;
}

.p-splitterpanel .p-splitter {
    flex-grow: 1;
    border: 0 none;
}
`;
const classes = {
    root: ({ props }) => ['p-splitter p-component', 'p-splitter-' + props.layout],
    gutter: 'p-splitter-gutter',
    gutterHandle: 'p-splitter-gutter-handle'
};
/*const inlineStyles = {
    root: ({ props }) => [{ display: 'flex', 'flex-wrap': 'nowrap' }, props.layout === 'vertical' ? { 'flex-direction': 'column' } : '']
};*/
export class SplitterStyle extends BaseStyle {
    name = 'splitter';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵSplitterStyle_BaseFactory; return function SplitterStyle_Factory(__ngFactoryType__) { return (ɵSplitterStyle_BaseFactory || (ɵSplitterStyle_BaseFactory = i0.ɵɵgetInheritedFactory(SplitterStyle)))(__ngFactoryType__ || SplitterStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SplitterStyle, factory: SplitterStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SplitterStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Splitter is utilized to separate and resize panels.
 *
 * [Live Demo](https://www.primeng.org/splitter/)
 *
 * @module splitterstyle
 *
 */
export var SplitterClasses;
(function (SplitterClasses) {
    /**
     * Class name of the root element
     */
    SplitterClasses["root"] = "p-splitter";
    /**
     * Class name of the gutter element
     */
    SplitterClasses["gutter"] = "p-splitter-gutter";
    /**
     * Class name of the gutter handle element
     */
    SplitterClasses["gutterHandle"] = "p-splitter-gutter-handle";
})(SplitterClasses || (SplitterClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXR0ZXJzdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zcGxpdHRlci9zdHlsZS9zcGxpdHRlcnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozt3QkFJRixFQUFFLENBQUMsdUJBQXVCLENBQUM7a0JBQ2pDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztxQkFDdEIsRUFBRSxDQUFDLGtCQUFrQixDQUFDO2FBQzlCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7a0JBY2YsRUFBRSxDQUFDLDRCQUE0QixDQUFDOzs7O3FCQUk3QixFQUFFLENBQUMsK0JBQStCLENBQUM7a0JBQ3RDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQztnQ0FDbEIsRUFBRSxDQUFDLDhCQUE4QixDQUFDLGdCQUFnQixFQUFFLENBQUMsOEJBQThCLENBQUM7Ozs7O2tCQUtsRyxFQUFFLENBQUMsbUNBQW1DLENBQUM7ZUFDMUMsRUFBRSxDQUFDLGtDQUFrQyxDQUFDLElBQUksRUFBRSxDQUFDLGtDQUFrQyxDQUFDLElBQUksRUFBRSxDQUFDLGtDQUFrQyxDQUFDO3NCQUNuSCxFQUFFLENBQUMsbUNBQW1DLENBQUM7Ozs7Ozs7Ozs7Ozs7O2NBYy9DLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzs7Ozs7YUFLM0IsRUFBRSxDQUFDLHNCQUFzQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0EyQnRDLENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsd0JBQXdCLEVBQUUsYUFBYSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDN0UsTUFBTSxFQUFFLG1CQUFtQjtJQUMzQixZQUFZLEVBQUUsMEJBQTBCO0NBQzNDLENBQUM7QUFFRjs7SUFFSTtBQUdKLE1BQU0sT0FBTyxhQUFjLFNBQVEsU0FBUztJQUN4QyxJQUFJLEdBQUcsVUFBVSxDQUFDO0lBRWxCLEtBQUssR0FBRyxLQUFLLENBQUM7SUFFZCxPQUFPLEdBQUcsT0FBTyxDQUFDO2lPQUxULGFBQWEseUJBQWIsYUFBYTtnRUFBYixhQUFhLFdBQWIsYUFBYTs7aUZBQWIsYUFBYTtjQUR6QixVQUFVOztBQVdYOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFOLElBQVksZUFhWDtBQWJELFdBQVksZUFBZTtJQUN2Qjs7T0FFRztJQUNILHNDQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gsK0NBQTRCLENBQUE7SUFDNUI7O09BRUc7SUFDSCw0REFBeUMsQ0FBQTtBQUM3QyxDQUFDLEVBYlcsZUFBZSxLQUFmLGVBQWUsUUFhMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlU3R5bGUgfSBmcm9tICdwcmltZW5nL2Jhc2UnO1xuXG5jb25zdCB0aGVtZSA9ICh7IGR0IH0pID0+IGBcbi5wLXNwbGl0dGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtd3JhcDogbm93cmFwO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICR7ZHQoJ3NwbGl0dGVyLmJvcmRlci5jb2xvcicpfTtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCdzcGxpdHRlci5iYWNrZ3JvdW5kJyl9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ2JvcmRlci5yYWRpdXMubWQnKX07XG4gICAgY29sb3I6ICR7ZHQoJ3NwbGl0dGVyLmNvbG9yJyl9O1xufVxuXG4ucC1zcGxpdHRlci12ZXJ0aWNhbCB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLnAtc3BsaXR0ZXItZ3V0dGVyIHtcbiAgICBmbGV4LWdyb3c6IDA7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHotaW5kZXg6IDE7XG4gICAgYmFja2dyb3VuZDogJHtkdCgnc3BsaXR0ZXIuZ3V0dGVyLmJhY2tncm91bmQnKX07XG59XG5cbi5wLXNwbGl0dGVyLWd1dHRlci1oYW5kbGUge1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ3NwbGl0dGVyLmhhbmRsZS5ib3JkZXIucmFkaXVzJyl9O1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ3NwbGl0dGVyLmhhbmRsZS5iYWNrZ3JvdW5kJyl9O1xuICAgIHRyYW5zaXRpb246IG91dGxpbmUtY29sb3IgJHtkdCgnc3BsaXR0ZXIudHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgYm94LXNoYWRvdyAke2R0KCdzcGxpdHRlci50cmFuc2l0aW9uLmR1cmF0aW9uJyl9O1xuICAgIG91dGxpbmUtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4ucC1zcGxpdHRlci1ndXR0ZXItaGFuZGxlOmZvY3VzLXZpc2libGUge1xuICAgIGJveC1zaGFkb3c6ICR7ZHQoJ3NwbGl0dGVyLmhhbmRsZS5mb2N1cy5yaW5nLnNoYWRvdycpfTtcbiAgICBvdXRsaW5lOiAke2R0KCdzcGxpdHRlci5oYW5kbGUuZm9jdXMucmluZy53aWR0aCcpfSAke2R0KCdzcGxpdHRlci5oYW5kbGUuZm9jdXMucmluZy5zdHlsZScpfSAke2R0KCdzcGxpdHRlci5oYW5kbGUuZm9jdXMucmluZy5jb2xvcicpfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtkdCgnc3BsaXR0ZXIuaGFuZGxlLmZvY3VzLnJpbmcub2Zmc2V0Jyl9O1xufVxuXG4ucC1zcGxpdHRlci1ob3Jpem9udGFsLnAtc3BsaXR0ZXItcmVzaXppbmcge1xuICAgIGN1cnNvcjogY29sLXJlc2l6ZTtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbn1cblxuLnAtc3BsaXR0ZXItdmVydGljYWwucC1zcGxpdHRlci1yZXNpemluZyB7XG4gICAgY3Vyc29yOiByb3ctcmVzaXplO1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xufVxuXG4ucC1zcGxpdHRlci1ob3Jpem9udGFsID4gLnAtc3BsaXR0ZXItZ3V0dGVyID4gLnAtc3BsaXR0ZXItZ3V0dGVyLWhhbmRsZSB7XG4gICAgaGVpZ2h0OiAke2R0KCdzcGxpdHRlci5oYW5kbGUuc2l6ZScpfTtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLnAtc3BsaXR0ZXItdmVydGljYWwgPiAucC1zcGxpdHRlci1ndXR0ZXIgPiAucC1zcGxpdHRlci1ndXR0ZXItaGFuZGxlIHtcbiAgICB3aWR0aDogJHtkdCgnc3BsaXR0ZXIuaGFuZGxlLnNpemUnKX07XG4gICAgaGVpZ2h0OiAxMDAlO1xufVxuXG4ucC1zcGxpdHRlci1ob3Jpem9udGFsID4gLnAtc3BsaXR0ZXItZ3V0dGVyIHtcbiAgICBjdXJzb3I6IGNvbC1yZXNpemU7XG59XG5cbi5wLXNwbGl0dGVyLXZlcnRpY2FsID4gLnAtc3BsaXR0ZXItZ3V0dGVyIHtcbiAgICBjdXJzb3I6IHJvdy1yZXNpemU7XG59XG5cbi5wLXNwbGl0dGVycGFuZWwge1xuICAgIGZsZXgtZ3JvdzogMTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4ucC1zcGxpdHRlcnBhbmVsLW5lc3RlZCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWdyb3c6IDE7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi5wLXNwbGl0dGVycGFuZWwgLnAtc3BsaXR0ZXIge1xuICAgIGZsZXgtZ3JvdzogMTtcbiAgICBib3JkZXI6IDAgbm9uZTtcbn1cbmA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogKHsgcHJvcHMgfSkgPT4gWydwLXNwbGl0dGVyIHAtY29tcG9uZW50JywgJ3Atc3BsaXR0ZXItJyArIHByb3BzLmxheW91dF0sXG4gICAgZ3V0dGVyOiAncC1zcGxpdHRlci1ndXR0ZXInLFxuICAgIGd1dHRlckhhbmRsZTogJ3Atc3BsaXR0ZXItZ3V0dGVyLWhhbmRsZSdcbn07XG5cbi8qY29uc3QgaW5saW5lU3R5bGVzID0ge1xuICAgIHJvb3Q6ICh7IHByb3BzIH0pID0+IFt7IGRpc3BsYXk6ICdmbGV4JywgJ2ZsZXgtd3JhcCc6ICdub3dyYXAnIH0sIHByb3BzLmxheW91dCA9PT0gJ3ZlcnRpY2FsJyA/IHsgJ2ZsZXgtZGlyZWN0aW9uJzogJ2NvbHVtbicgfSA6ICcnXVxufTsqL1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3BsaXR0ZXJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICdzcGxpdHRlcic7XG5cbiAgICB0aGVtZSA9IHRoZW1lO1xuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXM7XG5cbiAgICAvL2lubGluZVN0eWxlcyA9IGlubGluZVN0eWxlcztcbn1cblxuLyoqXG4gKlxuICogU3BsaXR0ZXIgaXMgdXRpbGl6ZWQgdG8gc2VwYXJhdGUgYW5kIHJlc2l6ZSBwYW5lbHMuXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvc3BsaXR0ZXIvKVxuICpcbiAqIEBtb2R1bGUgc3BsaXR0ZXJzdHlsZVxuICpcbiAqL1xuZXhwb3J0IGVudW0gU3BsaXR0ZXJDbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICByb290ID0gJ3Atc3BsaXR0ZXInLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGd1dHRlciBlbGVtZW50XG4gICAgICovXG4gICAgZ3V0dGVyID0gJ3Atc3BsaXR0ZXItZ3V0dGVyJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBndXR0ZXIgaGFuZGxlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBndXR0ZXJIYW5kbGUgPSAncC1zcGxpdHRlci1ndXR0ZXItaGFuZGxlJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwbGl0dGVyU3R5bGUgZXh0ZW5kcyBCYXNlU3R5bGUge31cbiJdfQ==