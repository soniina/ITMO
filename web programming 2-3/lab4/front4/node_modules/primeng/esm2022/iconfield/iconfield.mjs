import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, HostBinding, inject, Input, NgModule, ViewEncapsulation } from '@angular/core';
import { BaseComponent } from 'primeng/basecomponent';
import { IconFieldStyle } from './style/iconfieldstyle';
import * as i0 from "@angular/core";
const _c0 = ["*"];
/**
 * IconField wraps an input and an icon.
 * @group Components
 */
export class IconField extends BaseComponent {
    /**
     * Position of the icon.
     * @group Props
     */
    iconPosition = 'left';
    get _styleClass() {
        return this.styleClass;
    }
    /**
     * Style class of the component.
     * @group Props
     */
    styleClass;
    _componentStyle = inject(IconFieldStyle);
    static ɵfac = /*@__PURE__*/ (() => { let ɵIconField_BaseFactory; return function IconField_Factory(__ngFactoryType__) { return (ɵIconField_BaseFactory || (ɵIconField_BaseFactory = i0.ɵɵgetInheritedFactory(IconField)))(__ngFactoryType__ || IconField); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: IconField, selectors: [["p-iconfield"], ["p-iconField"], ["p-icon-field"]], hostAttrs: [1, "p-iconfield"], hostVars: 6, hostBindings: function IconField_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵclassMap(ctx._styleClass);
            i0.ɵɵclassProp("p-iconfield-left", ctx.iconPosition === "left")("p-iconfield-right", ctx.iconPosition === "right");
        } }, inputs: { iconPosition: "iconPosition", styleClass: "styleClass" }, standalone: true, features: [i0.ɵɵProvidersFeature([IconFieldStyle]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function IconField_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        } }, dependencies: [CommonModule], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(IconField, [{
        type: Component,
        args: [{
                selector: 'p-iconfield, p-iconField, p-icon-field',
                standalone: true,
                imports: [CommonModule],
                template: ` <ng-content></ng-content>`,
                providers: [IconFieldStyle],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    class: 'p-iconfield',
                    '[class.p-iconfield-left]': 'iconPosition === "left"',
                    '[class.p-iconfield-right]': 'iconPosition === "right"'
                }
            }]
    }], null, { iconPosition: [{
            type: Input
        }], _styleClass: [{
            type: HostBinding,
            args: ['class']
        }], styleClass: [{
            type: Input
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(IconField, { className: "IconField" }); })();
export class IconFieldModule {
    static ɵfac = function IconFieldModule_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || IconFieldModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: IconFieldModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [IconField] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(IconFieldModule, [{
        type: NgModule,
        args: [{
                imports: [IconField],
                exports: [IconField]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(IconFieldModule, { imports: [IconField], exports: [IconField] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbmZpZWxkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ljb25maWVsZC9pY29uZmllbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7OztBQUV4RDs7O0dBR0c7QUFlSCxNQUFNLE9BQU8sU0FBVSxTQUFRLGFBQWE7SUFDeEM7OztPQUdHO0lBQ00sWUFBWSxHQUFxQixNQUFNLENBQUM7SUFFakQsSUFBMEIsV0FBVztRQUNqQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUNEOzs7T0FHRztJQUNNLFVBQVUsQ0FBUztJQUU1QixlQUFlLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2lOQWhCaEMsU0FBUyx5QkFBVCxTQUFTOzZEQUFULFNBQVM7WUFBVCw4QkFBUztZQUFULHdEQUFpQixNQUFNLENBQWQsMkNBQVEsT0FBTyxDQUFmO29JQVRQLENBQUMsY0FBYyxDQUFDOztZQURmLGtCQUF5Qjs0QkFEM0IsWUFBWTs7aUZBV2IsU0FBUztjQWRyQixTQUFTO2VBQUM7Z0JBQ1AsUUFBUSxFQUFFLHdDQUF3QztnQkFDbEQsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztnQkFDdkIsUUFBUSxFQUFFLDRCQUE0QjtnQkFDdEMsU0FBUyxFQUFFLENBQUMsY0FBYyxDQUFDO2dCQUMzQixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLElBQUksRUFBRTtvQkFDRixLQUFLLEVBQUUsYUFBYTtvQkFDcEIsMEJBQTBCLEVBQUUseUJBQXlCO29CQUNyRCwyQkFBMkIsRUFBRSwwQkFBMEI7aUJBQzFEO2FBQ0o7Z0JBTVksWUFBWTtrQkFBcEIsS0FBSztZQUVvQixXQUFXO2tCQUFwQyxXQUFXO21CQUFDLE9BQU87WUFPWCxVQUFVO2tCQUFsQixLQUFLOztrRkFkRyxTQUFTO0FBdUJ0QixNQUFNLE9BQU8sZUFBZTt5R0FBZixlQUFlOzREQUFmLGVBQWU7Z0VBSGQsU0FBUzs7aUZBR1YsZUFBZTtjQUozQixRQUFRO2VBQUM7Z0JBQ04sT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDO2dCQUNwQixPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUM7YUFDdkI7O3dGQUNZLGVBQWUsY0F2QmYsU0FBUyxhQUFULFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIGluamVjdCwgSW5wdXQsIE5nTW9kdWxlLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCB9IGZyb20gJ3ByaW1lbmcvYmFzZWNvbXBvbmVudCc7XG5pbXBvcnQgeyBJY29uRmllbGRTdHlsZSB9IGZyb20gJy4vc3R5bGUvaWNvbmZpZWxkc3R5bGUnO1xuXG4vKipcbiAqIEljb25GaWVsZCB3cmFwcyBhbiBpbnB1dCBhbmQgYW4gaWNvbi5cbiAqIEBncm91cCBDb21wb25lbnRzXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAncC1pY29uZmllbGQsIHAtaWNvbkZpZWxkLCBwLWljb24tZmllbGQnLFxuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gICAgdGVtcGxhdGU6IGAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gICAgcHJvdmlkZXJzOiBbSWNvbkZpZWxkU3R5bGVdLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgaG9zdDoge1xuICAgICAgICBjbGFzczogJ3AtaWNvbmZpZWxkJyxcbiAgICAgICAgJ1tjbGFzcy5wLWljb25maWVsZC1sZWZ0XSc6ICdpY29uUG9zaXRpb24gPT09IFwibGVmdFwiJyxcbiAgICAgICAgJ1tjbGFzcy5wLWljb25maWVsZC1yaWdodF0nOiAnaWNvblBvc2l0aW9uID09PSBcInJpZ2h0XCInXG4gICAgfVxufSlcbmV4cG9ydCBjbGFzcyBJY29uRmllbGQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBQb3NpdGlvbiBvZiB0aGUgaWNvbi5cbiAgICAgKiBAZ3JvdXAgUHJvcHNcbiAgICAgKi9cbiAgICBASW5wdXQoKSBpY29uUG9zaXRpb246ICdyaWdodCcgfCAnbGVmdCcgPSAnbGVmdCc7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgZ2V0IF9zdHlsZUNsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZUNsYXNzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdHlsZSBjbGFzcyBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqIEBncm91cCBQcm9wc1xuICAgICAqL1xuICAgIEBJbnB1dCgpIHN0eWxlQ2xhc3M6IHN0cmluZztcblxuICAgIF9jb21wb25lbnRTdHlsZSA9IGluamVjdChJY29uRmllbGRTdHlsZSk7XG59XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW0ljb25GaWVsZF0sXG4gICAgZXhwb3J0czogW0ljb25GaWVsZF1cbn0pXG5leHBvcnQgY2xhc3MgSWNvbkZpZWxkTW9kdWxlIHt9XG4iXX0=