import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-iconfield {
    position: relative;
    display: block;
}

.p-inputicon {
    position: absolute;
    top: 50%;
    margin-top: calc(-1 * (${dt('icon.size')} / 2));
    color: ${dt('iconfield.icon.color')};
    line-height: 1;
}

.p-iconfield .p-inputicon:first-child {
    inset-inline-start: ${dt('form.field.padding.x')};
}

.p-iconfield .p-inputicon:last-child {
    inset-inline-end: ${dt('form.field.padding.x')};
}

.p-iconfield .p-inputtext:not(:first-child) {
    padding-inline-start: calc((${dt('form.field.padding.x')} * 2) + ${dt('icon.size')});
}

.p-iconfield .p-inputtext:not(:last-child) {
    padding-inline-end: calc((${dt('form.field.padding.x')} * 2) + ${dt('icon.size')});
}

.p-iconfield:has(.p-inputfield-sm) .p-inputicon {
    font-size: ${dt('form.field.sm.font.size')};
    width: ${dt('form.field.sm.font.size')};
    height: ${dt('form.field.sm.font.size')};
    margin-top: calc(-1 * (${dt('form.field.sm.font.size')} / 2));
}

.p-iconfield:has(.p-inputfield-lg) .p-inputicon {
    font-size: ${dt('form.field.lg.font.size')};
    width: ${dt('form.field.lg.font.size')};
    height: ${dt('form.field.lg.font.size')};
    margin-top: calc(-1 * (${dt('form.field.lg.font.size')} / 2));
}
`;
const classes = {
    root: 'p-iconfield'
};
export class IconFieldStyle extends BaseStyle {
    name = 'iconfield';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵIconFieldStyle_BaseFactory; return function IconFieldStyle_Factory(__ngFactoryType__) { return (ɵIconFieldStyle_BaseFactory || (ɵIconFieldStyle_BaseFactory = i0.ɵɵgetInheritedFactory(IconFieldStyle)))(__ngFactoryType__ || IconFieldStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: IconFieldStyle, factory: IconFieldStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(IconFieldStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * IconField wraps an input and an icon.
 *
 * [Live Demo](https://www.primeng.org/iconfield/)
 *
 * @module iconfieldstyle
 *
 */
export var IconFieldClasses;
(function (IconFieldClasses) {
    /**
     * Class name of the root element
     */
    IconFieldClasses["root"] = "p-iconfield";
})(IconFieldClasses || (IconFieldClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbmZpZWxkc3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaWNvbmZpZWxkL3N0eWxlL2ljb25maWVsZHN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7Ozs7OzZCQVNHLEVBQUUsQ0FBQyxXQUFXLENBQUM7YUFDL0IsRUFBRSxDQUFDLHNCQUFzQixDQUFDOzs7OzswQkFLYixFQUFFLENBQUMsc0JBQXNCLENBQUM7Ozs7d0JBSTVCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzs7OztrQ0FJaEIsRUFBRSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQzs7OztnQ0FJdEQsRUFBRSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQzs7OztpQkFJbkUsRUFBRSxDQUFDLHlCQUF5QixDQUFDO2FBQ2pDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztjQUM1QixFQUFFLENBQUMseUJBQXlCLENBQUM7NkJBQ2QsRUFBRSxDQUFDLHlCQUF5QixDQUFDOzs7O2lCQUl6QyxFQUFFLENBQUMseUJBQXlCLENBQUM7YUFDakMsRUFBRSxDQUFDLHlCQUF5QixDQUFDO2NBQzVCLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQzs2QkFDZCxFQUFFLENBQUMseUJBQXlCLENBQUM7O0NBRXpELENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRSxhQUFhO0NBQ3RCLENBQUM7QUFHRixNQUFNLE9BQU8sY0FBZSxTQUFRLFNBQVM7SUFDekMsSUFBSSxHQUFHLFdBQVcsQ0FBQztJQUVuQixLQUFLLEdBQUcsS0FBSyxDQUFDO0lBRWQsT0FBTyxHQUFHLE9BQU8sQ0FBQztxT0FMVCxjQUFjLHlCQUFkLGNBQWM7Z0VBQWQsY0FBYyxXQUFkLGNBQWM7O2lGQUFkLGNBQWM7Y0FEMUIsVUFBVTs7QUFTWDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBTixJQUFZLGdCQUtYO0FBTEQsV0FBWSxnQkFBZ0I7SUFDeEI7O09BRUc7SUFDSCx3Q0FBb0IsQ0FBQTtBQUN4QixDQUFDLEVBTFcsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUszQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VTdHlsZSB9IGZyb20gJ3ByaW1lbmcvYmFzZSc7XG5cbmNvbnN0IHRoZW1lID0gKHsgZHQgfSkgPT4gYFxuLnAtaWNvbmZpZWxkIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogYmxvY2s7XG59XG5cbi5wLWlucHV0aWNvbiB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNTAlO1xuICAgIG1hcmdpbi10b3A6IGNhbGMoLTEgKiAoJHtkdCgnaWNvbi5zaXplJyl9IC8gMikpO1xuICAgIGNvbG9yOiAke2R0KCdpY29uZmllbGQuaWNvbi5jb2xvcicpfTtcbiAgICBsaW5lLWhlaWdodDogMTtcbn1cblxuLnAtaWNvbmZpZWxkIC5wLWlucHV0aWNvbjpmaXJzdC1jaGlsZCB7XG4gICAgaW5zZXQtaW5saW5lLXN0YXJ0OiAke2R0KCdmb3JtLmZpZWxkLnBhZGRpbmcueCcpfTtcbn1cblxuLnAtaWNvbmZpZWxkIC5wLWlucHV0aWNvbjpsYXN0LWNoaWxkIHtcbiAgICBpbnNldC1pbmxpbmUtZW5kOiAke2R0KCdmb3JtLmZpZWxkLnBhZGRpbmcueCcpfTtcbn1cblxuLnAtaWNvbmZpZWxkIC5wLWlucHV0dGV4dDpub3QoOmZpcnN0LWNoaWxkKSB7XG4gICAgcGFkZGluZy1pbmxpbmUtc3RhcnQ6IGNhbGMoKCR7ZHQoJ2Zvcm0uZmllbGQucGFkZGluZy54Jyl9ICogMikgKyAke2R0KCdpY29uLnNpemUnKX0pO1xufVxuXG4ucC1pY29uZmllbGQgLnAtaW5wdXR0ZXh0Om5vdCg6bGFzdC1jaGlsZCkge1xuICAgIHBhZGRpbmctaW5saW5lLWVuZDogY2FsYygoJHtkdCgnZm9ybS5maWVsZC5wYWRkaW5nLngnKX0gKiAyKSArICR7ZHQoJ2ljb24uc2l6ZScpfSk7XG59XG5cbi5wLWljb25maWVsZDpoYXMoLnAtaW5wdXRmaWVsZC1zbSkgLnAtaW5wdXRpY29uIHtcbiAgICBmb250LXNpemU6ICR7ZHQoJ2Zvcm0uZmllbGQuc20uZm9udC5zaXplJyl9O1xuICAgIHdpZHRoOiAke2R0KCdmb3JtLmZpZWxkLnNtLmZvbnQuc2l6ZScpfTtcbiAgICBoZWlnaHQ6ICR7ZHQoJ2Zvcm0uZmllbGQuc20uZm9udC5zaXplJyl9O1xuICAgIG1hcmdpbi10b3A6IGNhbGMoLTEgKiAoJHtkdCgnZm9ybS5maWVsZC5zbS5mb250LnNpemUnKX0gLyAyKSk7XG59XG5cbi5wLWljb25maWVsZDpoYXMoLnAtaW5wdXRmaWVsZC1sZykgLnAtaW5wdXRpY29uIHtcbiAgICBmb250LXNpemU6ICR7ZHQoJ2Zvcm0uZmllbGQubGcuZm9udC5zaXplJyl9O1xuICAgIHdpZHRoOiAke2R0KCdmb3JtLmZpZWxkLmxnLmZvbnQuc2l6ZScpfTtcbiAgICBoZWlnaHQ6ICR7ZHQoJ2Zvcm0uZmllbGQubGcuZm9udC5zaXplJyl9O1xuICAgIG1hcmdpbi10b3A6IGNhbGMoLTEgKiAoJHtkdCgnZm9ybS5maWVsZC5sZy5mb250LnNpemUnKX0gLyAyKSk7XG59XG5gO1xuXG5jb25zdCBjbGFzc2VzID0ge1xuICAgIHJvb3Q6ICdwLWljb25maWVsZCdcbn07XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJY29uRmllbGRTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICdpY29uZmllbGQnO1xuXG4gICAgdGhlbWUgPSB0aGVtZTtcblxuICAgIGNsYXNzZXMgPSBjbGFzc2VzO1xufVxuXG4vKipcbiAqXG4gKiBJY29uRmllbGQgd3JhcHMgYW4gaW5wdXQgYW5kIGFuIGljb24uXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvaWNvbmZpZWxkLylcbiAqXG4gKiBAbW9kdWxlIGljb25maWVsZHN0eWxlXG4gKlxuICovXG5leHBvcnQgZW51bSBJY29uRmllbGRDbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICByb290ID0gJ3AtaWNvbmZpZWxkJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEljb25GaWVsZFN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHt9XG4iXX0=