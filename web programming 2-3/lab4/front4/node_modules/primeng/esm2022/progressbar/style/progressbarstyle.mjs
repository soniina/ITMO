import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-progressbar {
    position: relative;
    overflow: hidden;
    height: ${dt('progressbar.height')};
    background: ${dt('progressbar.background')};
    border-radius: ${dt('progressbar.border.radius')};
}

.p-progressbar-value {
    margin: 0;
    background: ${dt('progressbar.value.background')};
}

.p-progressbar-label {
    color: ${dt('progressbar.label.color')};
    font-size: ${dt('progressbar.label.font.size')};
    font-weight: ${dt('progressbar.label.font.weight')};
}

.p-progressbar-determinate .p-progressbar-value {
    height: 100%;
    width: 0%;
    position: absolute;
    display: none;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    transition: width 1s ease-in-out;
}

.p-progressbar-determinate .p-progressbar-label {
    display: inline-flex;
}

.p-progressbar-indeterminate .p-progressbar-value::before {
    content: "";
    position: absolute;
    background: inherit;
    top: 0;
    inset-inline-start: 0;
    bottom: 0;
    will-change: inset-inline-start, inset-inline-end;
    animation: p-progressbar-indeterminate-anim 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
}

.p-progressbar-indeterminate .p-progressbar-value::after {
    content: "";
    position: absolute;
    background: inherit;
    top: 0;
    inset-inline-start: 0;
    bottom: 0;
    will-change: inset-inline-start, inset-inline-end;
    animation: p-progressbar-indeterminate-anim-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
    animation-delay: 1.15s;
}

@-webkit-keyframes p-progressbar-indeterminate-anim {
    0% {
        inset-inline-start: -35%;
        inset-inline-end: 100%;
    }
    60% {
        inset-inline-start: 100%;
        inset-inline-end: -90%;
    }
    100% {
        inset-inline-start: 100%;
        inset-inline-end: -90%;
    }
}
@keyframes p-progressbar-indeterminate-anim {
    0% {
        inset-inline-start: -35%;
        inset-inline-end: 100%;
    }
    60% {
        inset-inline-start: 100%;
        inset-inline-end: -90%;
    }
    100% {
        inset-inline-start: 100%;
        inset-inline-end: -90%;
    }
}
@-webkit-keyframes p-progressbar-indeterminate-anim-short {
    0% {
        inset-inline-start: -200%;
        inset-inline-end: 100%;
    }
    60% {
        inset-inline-start: 107%;
        inset-inline-end: -8%;
    }
    100% {
        inset-inline-start: 107%;
        inset-inline-end: -8%;
    }
}
@keyframes p-progressbar-indeterminate-anim-short {
    0% {
        inset-inline-start: -200%;
        inset-inline-end: 100%;
    }
    60% {
        inset-inline-start: 107%;
        inset-inline-end: -8%;
    }
    100% {
        inset-inline-start: 107%;
        inset-inline-end: -8%;
    }
}
`;
const classes = {
    root: ({ instance }) => [
        'p-progressbar p-component',
        {
            'p-progressbar-determinate': instance.determinate,
            'p-progressbar-indeterminate': instance.indeterminate
        }
    ],
    value: 'p-progressbar-value',
    label: 'p-progressbar-label'
};
export class ProgressBarStyle extends BaseStyle {
    name = 'progressbar';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵProgressBarStyle_BaseFactory; return function ProgressBarStyle_Factory(__ngFactoryType__) { return (ɵProgressBarStyle_BaseFactory || (ɵProgressBarStyle_BaseFactory = i0.ɵɵgetInheritedFactory(ProgressBarStyle)))(__ngFactoryType__ || ProgressBarStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProgressBarStyle, factory: ProgressBarStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ProgressBarStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * ProgressBar is a process status indicator.
 *
 * [Live Demo](https://www.primeng.org/progressbar)
 *
 * @module progressbarstyle
 *
 */
export var ProgressBarClasses;
(function (ProgressBarClasses) {
    /**
     * Class name of the root element
     */
    ProgressBarClasses["root"] = "p-progressbar";
    /**
     * Class name of the value element
     */
    ProgressBarClasses["value"] = "p-progressbar-value";
    /**
     * Class name of the label element
     */
    ProgressBarClasses["label"] = "p-progressbar-label";
})(ProgressBarClasses || (ProgressBarClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXJzdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm9ncmVzc2Jhci9zdHlsZS9wcm9ncmVzc2JhcnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7OztjQUlaLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztrQkFDcEIsRUFBRSxDQUFDLHdCQUF3QixDQUFDO3FCQUN6QixFQUFFLENBQUMsMkJBQTJCLENBQUM7Ozs7O2tCQUtsQyxFQUFFLENBQUMsOEJBQThCLENBQUM7Ozs7YUFJdkMsRUFBRSxDQUFDLHlCQUF5QixDQUFDO2lCQUN6QixFQUFFLENBQUMsNkJBQTZCLENBQUM7bUJBQy9CLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrR3JELENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3BCLDJCQUEyQjtRQUMzQjtZQUNJLDJCQUEyQixFQUFFLFFBQVEsQ0FBQyxXQUFXO1lBQ2pELDZCQUE2QixFQUFFLFFBQVEsQ0FBQyxhQUFhO1NBQ3hEO0tBQ0o7SUFDRCxLQUFLLEVBQUUscUJBQXFCO0lBQzVCLEtBQUssRUFBRSxxQkFBcUI7Q0FDL0IsQ0FBQztBQUdGLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxTQUFTO0lBQzNDLElBQUksR0FBRyxhQUFhLENBQUM7SUFFckIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUVkLE9BQU8sR0FBRyxPQUFPLENBQUM7Nk9BTFQsZ0JBQWdCLHlCQUFoQixnQkFBZ0I7Z0VBQWhCLGdCQUFnQixXQUFoQixnQkFBZ0I7O2lGQUFoQixnQkFBZ0I7Y0FENUIsVUFBVTs7QUFTWDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBTixJQUFZLGtCQWFYO0FBYkQsV0FBWSxrQkFBa0I7SUFDMUI7O09BRUc7SUFDSCw0Q0FBc0IsQ0FBQTtJQUN0Qjs7T0FFRztJQUNILG1EQUE2QixDQUFBO0lBQzdCOztPQUVHO0lBQ0gsbURBQTZCLENBQUE7QUFDakMsQ0FBQyxFQWJXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFhN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlU3R5bGUgfSBmcm9tICdwcmltZW5nL2Jhc2UnO1xuXG5jb25zdCB0aGVtZSA9ICh7IGR0IH0pID0+IGBcbi5wLXByb2dyZXNzYmFyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBoZWlnaHQ6ICR7ZHQoJ3Byb2dyZXNzYmFyLmhlaWdodCcpfTtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCdwcm9ncmVzc2Jhci5iYWNrZ3JvdW5kJyl9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ3Byb2dyZXNzYmFyLmJvcmRlci5yYWRpdXMnKX07XG59XG5cbi5wLXByb2dyZXNzYmFyLXZhbHVlIHtcbiAgICBtYXJnaW46IDA7XG4gICAgYmFja2dyb3VuZDogJHtkdCgncHJvZ3Jlc3NiYXIudmFsdWUuYmFja2dyb3VuZCcpfTtcbn1cblxuLnAtcHJvZ3Jlc3NiYXItbGFiZWwge1xuICAgIGNvbG9yOiAke2R0KCdwcm9ncmVzc2Jhci5sYWJlbC5jb2xvcicpfTtcbiAgICBmb250LXNpemU6ICR7ZHQoJ3Byb2dyZXNzYmFyLmxhYmVsLmZvbnQuc2l6ZScpfTtcbiAgICBmb250LXdlaWdodDogJHtkdCgncHJvZ3Jlc3NiYXIubGFiZWwuZm9udC53ZWlnaHQnKX07XG59XG5cbi5wLXByb2dyZXNzYmFyLWRldGVybWluYXRlIC5wLXByb2dyZXNzYmFyLXZhbHVlIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDAlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHRyYW5zaXRpb246IHdpZHRoIDFzIGVhc2UtaW4tb3V0O1xufVxuXG4ucC1wcm9ncmVzc2Jhci1kZXRlcm1pbmF0ZSAucC1wcm9ncmVzc2Jhci1sYWJlbCB7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG59XG5cbi5wLXByb2dyZXNzYmFyLWluZGV0ZXJtaW5hdGUgLnAtcHJvZ3Jlc3NiYXItdmFsdWU6OmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgICB0b3A6IDA7XG4gICAgaW5zZXQtaW5saW5lLXN0YXJ0OiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICB3aWxsLWNoYW5nZTogaW5zZXQtaW5saW5lLXN0YXJ0LCBpbnNldC1pbmxpbmUtZW5kO1xuICAgIGFuaW1hdGlvbjogcC1wcm9ncmVzc2Jhci1pbmRldGVybWluYXRlLWFuaW0gMi4xcyBjdWJpYy1iZXppZXIoMC42NSwgMC44MTUsIDAuNzM1LCAwLjM5NSkgaW5maW5pdGU7XG59XG5cbi5wLXByb2dyZXNzYmFyLWluZGV0ZXJtaW5hdGUgLnAtcHJvZ3Jlc3NiYXItdmFsdWU6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICAgIHRvcDogMDtcbiAgICBpbnNldC1pbmxpbmUtc3RhcnQ6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIHdpbGwtY2hhbmdlOiBpbnNldC1pbmxpbmUtc3RhcnQsIGluc2V0LWlubGluZS1lbmQ7XG4gICAgYW5pbWF0aW9uOiBwLXByb2dyZXNzYmFyLWluZGV0ZXJtaW5hdGUtYW5pbS1zaG9ydCAyLjFzIGN1YmljLWJlemllcigwLjE2NSwgMC44NCwgMC40NCwgMSkgaW5maW5pdGU7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAxLjE1cztcbn1cblxuQC13ZWJraXQta2V5ZnJhbWVzIHAtcHJvZ3Jlc3NiYXItaW5kZXRlcm1pbmF0ZS1hbmltIHtcbiAgICAwJSB7XG4gICAgICAgIGluc2V0LWlubGluZS1zdGFydDogLTM1JTtcbiAgICAgICAgaW5zZXQtaW5saW5lLWVuZDogMTAwJTtcbiAgICB9XG4gICAgNjAlIHtcbiAgICAgICAgaW5zZXQtaW5saW5lLXN0YXJ0OiAxMDAlO1xuICAgICAgICBpbnNldC1pbmxpbmUtZW5kOiAtOTAlO1xuICAgIH1cbiAgICAxMDAlIHtcbiAgICAgICAgaW5zZXQtaW5saW5lLXN0YXJ0OiAxMDAlO1xuICAgICAgICBpbnNldC1pbmxpbmUtZW5kOiAtOTAlO1xuICAgIH1cbn1cbkBrZXlmcmFtZXMgcC1wcm9ncmVzc2Jhci1pbmRldGVybWluYXRlLWFuaW0ge1xuICAgIDAlIHtcbiAgICAgICAgaW5zZXQtaW5saW5lLXN0YXJ0OiAtMzUlO1xuICAgICAgICBpbnNldC1pbmxpbmUtZW5kOiAxMDAlO1xuICAgIH1cbiAgICA2MCUge1xuICAgICAgICBpbnNldC1pbmxpbmUtc3RhcnQ6IDEwMCU7XG4gICAgICAgIGluc2V0LWlubGluZS1lbmQ6IC05MCU7XG4gICAgfVxuICAgIDEwMCUge1xuICAgICAgICBpbnNldC1pbmxpbmUtc3RhcnQ6IDEwMCU7XG4gICAgICAgIGluc2V0LWlubGluZS1lbmQ6IC05MCU7XG4gICAgfVxufVxuQC13ZWJraXQta2V5ZnJhbWVzIHAtcHJvZ3Jlc3NiYXItaW5kZXRlcm1pbmF0ZS1hbmltLXNob3J0IHtcbiAgICAwJSB7XG4gICAgICAgIGluc2V0LWlubGluZS1zdGFydDogLTIwMCU7XG4gICAgICAgIGluc2V0LWlubGluZS1lbmQ6IDEwMCU7XG4gICAgfVxuICAgIDYwJSB7XG4gICAgICAgIGluc2V0LWlubGluZS1zdGFydDogMTA3JTtcbiAgICAgICAgaW5zZXQtaW5saW5lLWVuZDogLTglO1xuICAgIH1cbiAgICAxMDAlIHtcbiAgICAgICAgaW5zZXQtaW5saW5lLXN0YXJ0OiAxMDclO1xuICAgICAgICBpbnNldC1pbmxpbmUtZW5kOiAtOCU7XG4gICAgfVxufVxuQGtleWZyYW1lcyBwLXByb2dyZXNzYmFyLWluZGV0ZXJtaW5hdGUtYW5pbS1zaG9ydCB7XG4gICAgMCUge1xuICAgICAgICBpbnNldC1pbmxpbmUtc3RhcnQ6IC0yMDAlO1xuICAgICAgICBpbnNldC1pbmxpbmUtZW5kOiAxMDAlO1xuICAgIH1cbiAgICA2MCUge1xuICAgICAgICBpbnNldC1pbmxpbmUtc3RhcnQ6IDEwNyU7XG4gICAgICAgIGluc2V0LWlubGluZS1lbmQ6IC04JTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICAgIGluc2V0LWlubGluZS1zdGFydDogMTA3JTtcbiAgICAgICAgaW5zZXQtaW5saW5lLWVuZDogLTglO1xuICAgIH1cbn1cbmA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogKHsgaW5zdGFuY2UgfSkgPT4gW1xuICAgICAgICAncC1wcm9ncmVzc2JhciBwLWNvbXBvbmVudCcsXG4gICAgICAgIHtcbiAgICAgICAgICAgICdwLXByb2dyZXNzYmFyLWRldGVybWluYXRlJzogaW5zdGFuY2UuZGV0ZXJtaW5hdGUsXG4gICAgICAgICAgICAncC1wcm9ncmVzc2Jhci1pbmRldGVybWluYXRlJzogaW5zdGFuY2UuaW5kZXRlcm1pbmF0ZVxuICAgICAgICB9XG4gICAgXSxcbiAgICB2YWx1ZTogJ3AtcHJvZ3Jlc3NiYXItdmFsdWUnLFxuICAgIGxhYmVsOiAncC1wcm9ncmVzc2Jhci1sYWJlbCdcbn07XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0JhclN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHtcbiAgICBuYW1lID0gJ3Byb2dyZXNzYmFyJztcblxuICAgIHRoZW1lID0gdGhlbWU7XG5cbiAgICBjbGFzc2VzID0gY2xhc3Nlcztcbn1cblxuLyoqXG4gKlxuICogUHJvZ3Jlc3NCYXIgaXMgYSBwcm9jZXNzIHN0YXR1cyBpbmRpY2F0b3IuXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvcHJvZ3Jlc3NiYXIpXG4gKlxuICogQG1vZHVsZSBwcm9ncmVzc2JhcnN0eWxlXG4gKlxuICovXG5leHBvcnQgZW51bSBQcm9ncmVzc0JhckNsYXNzZXMge1xuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICAgICAqL1xuICAgIHJvb3QgPSAncC1wcm9ncmVzc2JhcicsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgdmFsdWUgZWxlbWVudFxuICAgICAqL1xuICAgIHZhbHVlID0gJ3AtcHJvZ3Jlc3NiYXItdmFsdWUnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGxhYmVsIGVsZW1lbnRcbiAgICAgKi9cbiAgICBsYWJlbCA9ICdwLXByb2dyZXNzYmFyLWxhYmVsJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb2dyZXNzQmFyU3R5bGUgZXh0ZW5kcyBCYXNlU3R5bGUge31cbiJdfQ==