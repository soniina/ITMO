import { animate, animation, style, transition, trigger, useAnimation } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { booleanAttribute, ChangeDetectionStrategy, Component, EventEmitter, inject, Input, NgModule, numberAttribute, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { appendChild, blockBodyScroll } from '@primeuix/utils';
import { SharedModule } from 'primeng/api';
import { BaseComponent } from 'primeng/basecomponent';
import { ButtonModule } from 'primeng/button';
import { TimesIcon } from 'primeng/icons';
import { Ripple } from 'primeng/ripple';
import { ZIndexUtils } from 'primeng/utils';
import { DrawerStyle } from './style/drawerstyle';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "primeng/button";
const _c0 = ["maskRef"];
const _c1 = ["container"];
const _c2 = ["closeButton"];
const _c3 = ["*"];
const _c4 = (a0, a1) => ({ transform: a0, transition: a1 });
const _c5 = a0 => ({ value: "visible", params: a0 });
function Sidebar_div_0_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function Sidebar_div_0_ng_template_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function Sidebar_div_0_ng_template_4_p_button_2_TimesIcon_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "TimesIcon");
} if (rf & 2) {
    i0.ɵɵattribute("data-pc-section", "closeicon");
} }
function Sidebar_div_0_ng_template_4_p_button_2_span_2_1_ng_template_0_Template(rf, ctx) { }
function Sidebar_div_0_ng_template_4_p_button_2_span_2_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, Sidebar_div_0_ng_template_4_p_button_2_span_2_1_ng_template_0_Template, 0, 0, "ng-template");
} }
function Sidebar_div_0_ng_template_4_p_button_2_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 11);
    i0.ɵɵtemplate(1, Sidebar_div_0_ng_template_4_p_button_2_span_2_1_Template, 1, 0, null, 5);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(4);
    i0.ɵɵattribute("data-pc-section", "closeicon");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r1.closeIconTemplate);
} }
function Sidebar_div_0_ng_template_4_p_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "p-button", 9);
    i0.ɵɵlistener("onClick", function Sidebar_div_0_ng_template_4_p_button_2_Template_p_button_onClick_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r1 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r1.close($event)); })("keydown.enter", function Sidebar_div_0_ng_template_4_p_button_2_Template_p_button_keydown_enter_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r1 = i0.ɵɵnextContext(3); return i0.ɵɵresetView(ctx_r1.close($event)); });
    i0.ɵɵtemplate(1, Sidebar_div_0_ng_template_4_p_button_2_TimesIcon_1_Template, 1, 1, "TimesIcon", 8)(2, Sidebar_div_0_ng_template_4_p_button_2_span_2_Template, 2, 2, "span", 10);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", ctx_r1.cx("closeButton"))("buttonProps", ctx_r1.closeButtonProps)("ariaLabel", ctx_r1.ariaCloseLabel);
    i0.ɵɵattribute("data-pc-section", "closebutton")("data-pc-group-section", "iconcontainer");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", !ctx_r1.closeIconTemplate);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.closeIconTemplate);
} }
function Sidebar_div_0_ng_template_4_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function Sidebar_div_0_ng_template_4_ng_container_6_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function Sidebar_div_0_ng_template_4_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "div", 6);
    i0.ɵɵtemplate(2, Sidebar_div_0_ng_template_4_ng_container_6_ng_container_2_Template, 1, 0, "ng-container", 5);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngClass", ctx_r1.cx("footer"));
    i0.ɵɵattribute("data-pc-section", "footer");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r1.footerTemplate);
} }
function Sidebar_div_0_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵtemplate(1, Sidebar_div_0_ng_template_4_ng_container_1_Template, 1, 0, "ng-container", 5)(2, Sidebar_div_0_ng_template_4_p_button_2_Template, 3, 7, "p-button", 7);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 6);
    i0.ɵɵprojection(4);
    i0.ɵɵtemplate(5, Sidebar_div_0_ng_template_4_ng_container_5_Template, 1, 0, "ng-container", 5);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(6, Sidebar_div_0_ng_template_4_ng_container_6_Template, 3, 3, "ng-container", 8);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", ctx_r1.cx("header"));
    i0.ɵɵattribute("data-pc-section", "header");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r1.headerTemplate);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.showCloseIcon);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngClass", ctx_r1.cx("content"));
    i0.ɵɵattribute("data-pc-section", "content");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r1.contentTemplate);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r1.footerTemplate);
} }
function Sidebar_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r1 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 3, 0);
    i0.ɵɵlistener("@panelState.start", function Sidebar_div_0_Template_div_animation_panelState_start_0_listener($event) { i0.ɵɵrestoreView(_r1); const ctx_r1 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r1.onAnimationStart($event)); })("@panelState.done", function Sidebar_div_0_Template_div_animation_panelState_done_0_listener($event) { i0.ɵɵrestoreView(_r1); const ctx_r1 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r1.onAnimationEnd($event)); })("click", function Sidebar_div_0_Template_div_click_0_listener($event) { i0.ɵɵrestoreView(_r1); const ctx_r1 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r1.maskClickListener($event)); });
    i0.ɵɵelementStart(2, "div", 4);
    i0.ɵɵlistener("keydown", function Sidebar_div_0_Template_div_keydown_2_listener($event) { i0.ɵɵrestoreView(_r1); const ctx_r1 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r1.onKeyDown($event)); });
    i0.ɵɵtemplate(3, Sidebar_div_0_ng_container_3_Template, 1, 0, "ng-container", 5)(4, Sidebar_div_0_ng_template_4_Template, 7, 8, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementEnd()();
} if (rf & 2) {
    const notHeadless_r4 = i0.ɵɵreference(5);
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵstyleMap(ctx_r1.maskStyle);
    i0.ɵɵproperty("ngClass", ctx_r1.cx("mask"))("ngStyle", ctx_r1.sx("mask"))("@panelState", i0.ɵɵpureFunction1(15, _c5, i0.ɵɵpureFunction2(12, _c4, ctx_r1.transformOptions, ctx_r1.transitionOptions)));
    i0.ɵɵattribute("data-pc-name", "mask")("data-pc-section", "mask");
    i0.ɵɵadvance(2);
    i0.ɵɵclassMap(ctx_r1.styleClass);
    i0.ɵɵproperty("ngClass", ctx_r1.cx("root"));
    i0.ɵɵattribute("data-pc-section", "root");
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r1.headlessTemplate || notHeadless_r4);
} }
const showAnimation = animation([style({ transform: '{{transform}}', opacity: 0 }), animate('{{transition}}')]);
const hideAnimation = animation([animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 }))]);
/**
 * Sidebar is a panel component displayed as an overlay at the edges of the screen.
 * @group Components
 */
export class Sidebar extends BaseComponent {
    /**
     *  Target element to attach the dialog, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name).
     * @group Props
     */
    appendTo = 'body';
    /**
     * Whether to block scrolling of the document when sidebar is active.
     * @group Props
     */
    blockScroll = false;
    /**
     * Inline style of the component.
     * @group Props
     */
    style;
    /**
     * Style class of the component.
     * @group Props
     */
    styleClass;
    /**
     * Aria label of the close icon.
     * @group Props
     */
    ariaCloseLabel;
    /**
     * Whether to automatically manage layering.
     * @group Props
     */
    autoZIndex = true;
    /**
     * Base zIndex value to use in layering.
     * @group Props
     */
    baseZIndex = 0;
    /**
     * Whether an overlay mask is displayed behind the sidebar.
     * @group Props
     */
    modal = true;
    /**
     * Used to pass all properties of the ButtonProps to the Button component.
     * @group Props
     */
    closeButtonProps;
    /**
     * Whether to dismiss sidebar on click of the mask.
     * @group Props
     */
    dismissible = true;
    /**
     * Whether to display the close icon.
     * @group Props
     */
    showCloseIcon = true;
    /**
     * Specifies if pressing escape key should hide the sidebar.
     * @group Props
     */
    closeOnEscape = true;
    /**
     * Transition options of the animation.
     * @group Props
     */
    transitionOptions = '150ms cubic-bezier(0, 0, 0.2, 1)';
    /**
     * Specifies the visibility of the dialog.
     * @group Props
     */
    get visible() {
        return this._visible;
    }
    set visible(val) {
        this._visible = val;
    }
    /**
     * Specifies the position of the sidebar, valid values are "left", "right", "bottom" and "top".
     * @group Props
     */
    get position() {
        return this._position;
    }
    set position(value) {
        this._position = value;
        switch (value) {
            case 'left':
                this.transformOptions = 'translate3d(-100%, 0px, 0px)';
                break;
            case 'right':
                this.transformOptions = 'translate3d(100%, 0px, 0px)';
                break;
            case 'bottom':
                this.transformOptions = 'translate3d(0px, 100%, 0px)';
                break;
            case 'top':
                this.transformOptions = 'translate3d(0px, -100%, 0px)';
                break;
        }
    }
    /**
     * Adds a close icon to the header to hide the dialog.
     * @group Props
     */
    get fullScreen() {
        return this._fullScreen;
    }
    set fullScreen(value) {
        this._fullScreen = value;
        if (value)
            this.transformOptions = 'none';
    }
    maskStyle;
    /**
     * Callback to invoke when dialog is shown.
     * @group Emits
     */
    onShow = new EventEmitter();
    /**
     * Callback to invoke when dialog is hidden.
     * @group Emits
     */
    onHide = new EventEmitter();
    /**
     * Callback to invoke when dialog visibility is changed.
     * @param {boolean} value - Visible value.
     * @group Emits
     */
    visibleChange = new EventEmitter();
    maskRef;
    containerViewChild;
    closeButtonViewChild;
    initialized;
    _visible;
    _position = 'left';
    _fullScreen = false;
    container;
    transformOptions = 'translate3d(-100%, 0px, 0px)';
    mask;
    documentEscapeListener;
    _componentStyle = inject(DrawerStyle);
    /**
     * Header template.
     * @group Props
     */
    headerTemplate;
    /**
     * Footer template.
     * @group Props
     */
    footerTemplate;
    /**
     *
     * Close icon template.
     * @group Props
     */
    closeIconTemplate;
    /**
     * Headless template.
     * @group Props
     */
    headlessTemplate;
    /**
     * Headless template.
     * @group Props
     */
    contentTemplate;
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.initialized = true;
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        const key = Object.keys(changes).find((k) => k.includes('Template'));
        if (key) {
            this[`_${key}`] = changes[key].currentValue;
        }
    }
    ngAfterContentInit() {
        this.templates?.forEach((item) => {
            switch (item.getType()) {
                case 'header':
                    this.headerTemplate = item.template || this.headerTemplate;
                    break;
                case 'footer':
                    this.footerTemplate = item.template || this.footerTemplate;
                    break;
                case 'closeicon':
                    this.closeIconTemplate = item.template || this.closeIconTemplate;
                    break;
                case 'headless':
                    this.headlessTemplate = item.template || this.headlessTemplate;
                    break;
                case 'content':
                    this.contentTemplate = item.template || this.headlessTemplate;
                    break;
            }
        });
    }
    onKeyDown(event) {
        if (event.code === 'Escape') {
            this.hide(false);
        }
    }
    show() {
        if (this.autoZIndex) {
            ZIndexUtils.set('modal', this.container, this.baseZIndex || this.config.zIndex.modal);
        }
        this.onShow.emit({});
        this.visibleChange.emit(true);
    }
    hide(emit = true) {
        if (emit) {
            this.onHide.emit({});
        }
    }
    close(event) {
        this.hide();
        this.visibleChange.emit(false);
        event.preventDefault();
    }
    maskClickListener(event) {
        if (this.dismissible) {
            this.close(event);
        }
        if (this.blockScroll) {
            blockBodyScroll();
        }
    }
    onAnimationStart(event) {
        switch (event.toState) {
            case 'visible':
                this.container = event.element;
                this.appendContainer();
                this.show();
                if (this.closeOnEscape) {
                    this.bindDocumentEscapeListener();
                }
                break;
        }
    }
    onAnimationEnd(event) {
        switch (event.toState) {
            case 'void':
                this.hide(false);
                ZIndexUtils.clear(this.container);
                this.unbindGlobalListeners();
                break;
        }
    }
    appendContainer() {
        if (this.appendTo) {
            return this.appendTo === 'body' ? this.renderer.appendChild(this.document.body, this.container) : appendChild(this.appendTo, this.container);
        }
    }
    bindDocumentEscapeListener() {
        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : this.document;
        this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', (event) => {
            if (event.which == 27) {
                if (parseInt(this.container.style.zIndex) === ZIndexUtils.get(this.container)) {
                    this.close(event);
                }
            }
        });
    }
    unbindDocumentEscapeListener() {
        if (this.documentEscapeListener) {
            this.documentEscapeListener();
            this.documentEscapeListener = null;
        }
    }
    unbindGlobalListeners() {
        this.unbindDocumentEscapeListener();
    }
    ngOnDestroy() {
        this.initialized = false;
        if (this.appendTo && this.container) {
            this.renderer.appendChild(this.el.nativeElement, this.container);
        }
        if (this.container && this.autoZIndex) {
            ZIndexUtils.clear(this.container);
        }
        this.container = null;
        this.unbindGlobalListeners();
        super.ngOnDestroy();
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵSidebar_BaseFactory; return function Sidebar_Factory(__ngFactoryType__) { return (ɵSidebar_BaseFactory || (ɵSidebar_BaseFactory = i0.ɵɵgetInheritedFactory(Sidebar)))(__ngFactoryType__ || Sidebar); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Sidebar, selectors: [["p-sidebar"]], viewQuery: function Sidebar_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c0, 5);
            i0.ɵɵviewQuery(_c1, 5);
            i0.ɵɵviewQuery(_c2, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.maskRef = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.closeButtonViewChild = _t.first);
        } }, inputs: { appendTo: "appendTo", blockScroll: [2, "blockScroll", "blockScroll", booleanAttribute], style: "style", styleClass: "styleClass", ariaCloseLabel: "ariaCloseLabel", autoZIndex: [2, "autoZIndex", "autoZIndex", booleanAttribute], baseZIndex: [2, "baseZIndex", "baseZIndex", numberAttribute], modal: [2, "modal", "modal", booleanAttribute], closeButtonProps: "closeButtonProps", dismissible: [2, "dismissible", "dismissible", booleanAttribute], showCloseIcon: [2, "showCloseIcon", "showCloseIcon", booleanAttribute], closeOnEscape: [2, "closeOnEscape", "closeOnEscape", booleanAttribute], transitionOptions: "transitionOptions", visible: "visible", position: "position", fullScreen: "fullScreen", maskStyle: "maskStyle", headerTemplate: "headerTemplate", footerTemplate: "footerTemplate", closeIconTemplate: "closeIconTemplate", headlessTemplate: "headlessTemplate", contentTemplate: "contentTemplate" }, outputs: { onShow: "onShow", onHide: "onHide", visibleChange: "visibleChange" }, standalone: true, features: [i0.ɵɵProvidersFeature([DrawerStyle]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature], ngContentSelectors: _c3, decls: 1, vars: 1, consts: [["maskRef", ""], ["notHeadless", ""], [3, "ngClass", "ngStyle", "style", "click", 4, "ngIf"], [3, "click", "ngClass", "ngStyle"], [3, "keydown", "ngClass"], [4, "ngTemplateOutlet"], [3, "ngClass"], [3, "ngClass", "buttonProps", "ariaLabel", "onClick", "keydown.enter", 4, "ngIf"], [4, "ngIf"], [3, "onClick", "keydown.enter", "ngClass", "buttonProps", "ariaLabel"], ["class", "p-sidebar-close-icon", 4, "ngIf"], [1, "p-sidebar-close-icon"]], template: function Sidebar_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, Sidebar_div_0_Template, 6, 17, "div", 2);
        } if (rf & 2) {
            i0.ɵɵproperty("ngIf", ctx.visible);
        } }, dependencies: [CommonModule, i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, SharedModule, TimesIcon, ButtonModule, i2.Button], encapsulation: 2, data: { animation: [trigger('panelState', [transition('void => visible', [useAnimation(showAnimation)]), transition('visible => void', [useAnimation(hideAnimation)])])] }, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(Sidebar, [{
        type: Component,
        args: [{
                selector: 'p-sidebar',
                standalone: true,
                imports: [CommonModule, Ripple, SharedModule, TimesIcon, ButtonModule],
                template: `
        <div
            #maskRef
            *ngIf="visible"
            [ngClass]="cx('mask')"
            [ngStyle]="sx('mask')"
            [style]="maskStyle"
            [@panelState]="{ value: 'visible', params: { transform: transformOptions, transition: transitionOptions } }"
            (@panelState.start)="onAnimationStart($event)"
            (@panelState.done)="onAnimationEnd($event)"
            [attr.data-pc-name]="'mask'"
            [attr.data-pc-section]="'mask'"
            (click)="maskClickListener($event)"
        >
            <div [ngClass]="cx('root')" [class]="styleClass" [attr.data-pc-section]="'root'" (keydown)="onKeyDown($event)">
                <ng-container *ngTemplateOutlet="headlessTemplate || notHeadless"></ng-container>
                <ng-template #notHeadless>
                    <div [ngClass]="cx('header')" [attr.data-pc-section]="'header'">
                        <ng-container *ngTemplateOutlet="headerTemplate"></ng-container>
                        <p-button
                            *ngIf="showCloseIcon"
                            [ngClass]="cx('closeButton')"
                            (onClick)="close($event)"
                            (keydown.enter)="close($event)"
                            [buttonProps]="closeButtonProps"
                            [ariaLabel]="ariaCloseLabel"
                            [attr.data-pc-section]="'closebutton'"
                            [attr.data-pc-group-section]="'iconcontainer'"
                        >
                            <TimesIcon *ngIf="!closeIconTemplate" [attr.data-pc-section]="'closeicon'" />
                            <span *ngIf="closeIconTemplate" class="p-sidebar-close-icon" [attr.data-pc-section]="'closeicon'">
                                <ng-template *ngTemplateOutlet="closeIconTemplate"></ng-template>
                            </span>
                        </p-button>
                    </div>

                    <div [ngClass]="cx('content')" [attr.data-pc-section]="'content'">
                        <ng-content></ng-content>
                        <ng-container *ngTemplateOutlet="contentTemplate"></ng-container>
                    </div>

                    <ng-container *ngIf="footerTemplate">
                        <div [ngClass]="cx('footer')" [attr.data-pc-section]="'footer'">
                            <ng-container *ngTemplateOutlet="footerTemplate"></ng-container>
                        </div>
                    </ng-container>
                </ng-template>
            </div>
        </div>
    `,
                animations: [trigger('panelState', [transition('void => visible', [useAnimation(showAnimation)]), transition('visible => void', [useAnimation(hideAnimation)])])],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [DrawerStyle]
            }]
    }], null, { appendTo: [{
            type: Input
        }], blockScroll: [{
            type: Input,
            args: [{ transform: booleanAttribute }]
        }], style: [{
            type: Input
        }], styleClass: [{
            type: Input
        }], ariaCloseLabel: [{
            type: Input
        }], autoZIndex: [{
            type: Input,
            args: [{ transform: booleanAttribute }]
        }], baseZIndex: [{
            type: Input,
            args: [{ transform: numberAttribute }]
        }], modal: [{
            type: Input,
            args: [{ transform: booleanAttribute }]
        }], closeButtonProps: [{
            type: Input
        }], dismissible: [{
            type: Input,
            args: [{ transform: booleanAttribute }]
        }], showCloseIcon: [{
            type: Input,
            args: [{ transform: booleanAttribute }]
        }], closeOnEscape: [{
            type: Input,
            args: [{ transform: booleanAttribute }]
        }], transitionOptions: [{
            type: Input
        }], visible: [{
            type: Input
        }], position: [{
            type: Input
        }], fullScreen: [{
            type: Input
        }], maskStyle: [{
            type: Input
        }], onShow: [{
            type: Output
        }], onHide: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], maskRef: [{
            type: ViewChild,
            args: ['maskRef']
        }], containerViewChild: [{
            type: ViewChild,
            args: ['container']
        }], closeButtonViewChild: [{
            type: ViewChild,
            args: ['closeButton']
        }], headerTemplate: [{
            type: Input
        }], footerTemplate: [{
            type: Input
        }], closeIconTemplate: [{
            type: Input
        }], headlessTemplate: [{
            type: Input
        }], contentTemplate: [{
            type: Input
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(Sidebar, { className: "Sidebar" }); })();
export class SidebarModule {
    static ɵfac = function SidebarModule_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || SidebarModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: SidebarModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [Sidebar, SharedModule, SharedModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SidebarModule, [{
        type: NgModule,
        args: [{
                imports: [Sidebar, SharedModule],
                exports: [Sidebar, SharedModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(SidebarModule, { imports: [Sidebar, SharedModule], exports: [Sidebar, SharedModule] }); })();
//# sourceMappingURL=data:application/json;base64,