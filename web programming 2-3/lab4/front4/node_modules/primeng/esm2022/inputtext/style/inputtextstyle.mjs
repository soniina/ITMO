import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-inputtext {
    font-family: inherit;
    font-feature-settings: inherit;
    font-size: 1rem;
    color: ${dt('inputtext.color')};
    background: ${dt('inputtext.background')};
    padding-block: ${dt('inputtext.padding.y')};
    padding-inline: ${dt('inputtext.padding.x')};
    border: 1px solid ${dt('inputtext.border.color')};
    transition: background ${dt('inputtext.transition.duration')}, color ${dt('inputtext.transition.duration')}, border-color ${dt('inputtext.transition.duration')}, outline-color ${dt('inputtext.transition.duration')}, box-shadow ${dt('inputtext.transition.duration')};
    appearance: none;
    border-radius: ${dt('inputtext.border.radius')};
    outline-color: transparent;
    box-shadow: ${dt('inputtext.shadow')};
}

.p-inputtext.ng-invalid.ng-dirty {
    border-color: ${dt('inputtext.invalid.border.color')};
}

.p-inputtext:enabled:hover {
    border-color: ${dt('inputtext.hover.border.color')};
}

.p-inputtext:enabled:focus {
    border-color: ${dt('inputtext.focus.border.color')};
    box-shadow: ${dt('inputtext.focus.ring.shadow')};
    outline: ${dt('inputtext.focus.ring.width')} ${dt('inputtext.focus.ring.style')} ${dt('inputtext.focus.ring.color')};
    outline-offset: ${dt('inputtext.focus.ring.offset')};
}

.p-inputtext.p-invalid {
    border-color: ${dt('inputtext.invalid.border.color')};
}

.p-inputtext.p-variant-filled {
    background: ${dt('inputtext.filled.background')};
}

.p-inputtext.p-variant-filled:enabled:focus {
    background: ${dt('inputtext.filled.focus.background')};
}

.p-inputtext:disabled {
    opacity: 1;
    background: ${dt('inputtext.disabled.background')};
    color: ${dt('inputtext.disabled.color')};
}

.p-inputtext::placeholder {
    color: ${dt('inputtext.placeholder.color')};
}

.p-inputtext.ng-invalid.ng-dirty::placeholder {
    color: ${dt('inputtext.invalid.placeholder.color')};
}

.p-inputtext-sm {
    font-size: ${dt('inputtext.sm.font.size')};
    padding-block: ${dt('inputtext.sm.padding.y')};
    padding-inline: ${dt('inputtext.sm.padding.x')};
}

.p-inputtext-lg {
    font-size: ${dt('inputtext.lg.font.size')};
    padding-block: ${dt('inputtext.lg.padding.y')};
    padding-inline: ${dt('inputtext.lg.padding.x')};
}

.p-inputtext-fluid {
    width: 100%;
}
`;
const classes = {
    root: ({ instance, props }) => [
        'p-inputtext p-component',
        {
            'p-filled': instance.filled,
            'p-inputtext-sm': props.size === 'small',
            'p-inputtext-lg': props.size === 'large',
            'p-invalid': props.invalid,
            'p-variant-filled': props.variant === 'filled',
            'p-inputtext-fluid': props.fluid
        }
    ]
};
export class InputTextStyle extends BaseStyle {
    name = 'inputtext';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵInputTextStyle_BaseFactory; return function InputTextStyle_Factory(__ngFactoryType__) { return (ɵInputTextStyle_BaseFactory || (ɵInputTextStyle_BaseFactory = i0.ɵɵgetInheritedFactory(InputTextStyle)))(__ngFactoryType__ || InputTextStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: InputTextStyle, factory: InputTextStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(InputTextStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * InputText renders a text field to enter data.
 *
 * [Live Demo](https://www.primeng.org/inputtext/)
 *
 * @module inputtextstyle
 *
 */
export var InputTextClasses;
(function (InputTextClasses) {
    /**
     * The class of root element
     */
    InputTextClasses["root"] = "p-inputtext";
})(InputTextClasses || (InputTextClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXR0ZXh0c3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW5wdXR0ZXh0L3N0eWxlL2lucHV0dGV4dHN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7YUFLYixFQUFFLENBQUMsaUJBQWlCLENBQUM7a0JBQ2hCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztxQkFDdkIsRUFBRSxDQUFDLHFCQUFxQixDQUFDO3NCQUN4QixFQUFFLENBQUMscUJBQXFCLENBQUM7d0JBQ3ZCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQzs2QkFDdkIsRUFBRSxDQUFDLCtCQUErQixDQUFDLFdBQVcsRUFBRSxDQUFDLCtCQUErQixDQUFDLGtCQUFrQixFQUFFLENBQUMsK0JBQStCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUNuTywrQkFBK0IsQ0FDbEM7O3FCQUVnQixFQUFFLENBQUMseUJBQXlCLENBQUM7O2tCQUVoQyxFQUFFLENBQUMsa0JBQWtCLENBQUM7Ozs7b0JBSXBCLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQzs7OztvQkFJcEMsRUFBRSxDQUFDLDhCQUE4QixDQUFDOzs7O29CQUlsQyxFQUFFLENBQUMsOEJBQThCLENBQUM7a0JBQ3BDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQztlQUNwQyxFQUFFLENBQUMsNEJBQTRCLENBQUMsSUFBSSxFQUFFLENBQUMsNEJBQTRCLENBQUMsSUFBSSxFQUFFLENBQUMsNEJBQTRCLENBQUM7c0JBQ2pHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQzs7OztvQkFJbkMsRUFBRSxDQUFDLGdDQUFnQyxDQUFDOzs7O2tCQUl0QyxFQUFFLENBQUMsNkJBQTZCLENBQUM7Ozs7a0JBSWpDLEVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQzs7Ozs7a0JBS3ZDLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQzthQUN4QyxFQUFFLENBQUMsMEJBQTBCLENBQUM7Ozs7YUFJOUIsRUFBRSxDQUFDLDZCQUE2QixDQUFDOzs7O2FBSWpDLEVBQUUsQ0FBQyxxQ0FBcUMsQ0FBQzs7OztpQkFJckMsRUFBRSxDQUFDLHdCQUF3QixDQUFDO3FCQUN4QixFQUFFLENBQUMsd0JBQXdCLENBQUM7c0JBQzNCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQzs7OztpQkFJakMsRUFBRSxDQUFDLHdCQUF3QixDQUFDO3FCQUN4QixFQUFFLENBQUMsd0JBQXdCLENBQUM7c0JBQzNCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQzs7Ozs7O0NBTWpELENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUMzQix5QkFBeUI7UUFDekI7WUFDSSxVQUFVLEVBQUUsUUFBUSxDQUFDLE1BQU07WUFDM0IsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPO1lBQ3hDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTztZQUN4QyxXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDMUIsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLE9BQU8sS0FBSyxRQUFRO1lBQzlDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxLQUFLO1NBQ25DO0tBQ0o7Q0FDSixDQUFDO0FBR0YsTUFBTSxPQUFPLGNBQWUsU0FBUSxTQUFTO0lBQ3pDLElBQUksR0FBRyxXQUFXLENBQUM7SUFFbkIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUVkLE9BQU8sR0FBRyxPQUFPLENBQUM7cU9BTFQsY0FBYyx5QkFBZCxjQUFjO2dFQUFkLGNBQWMsV0FBZCxjQUFjOztpRkFBZCxjQUFjO2NBRDFCLFVBQVU7O0FBU1g7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQU4sSUFBWSxnQkFLWDtBQUxELFdBQVksZ0JBQWdCO0lBQ3hCOztPQUVHO0lBQ0gsd0NBQW9CLENBQUE7QUFDeEIsQ0FBQyxFQUxXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFLM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlU3R5bGUgfSBmcm9tICdwcmltZW5nL2Jhc2UnO1xuXG5jb25zdCB0aGVtZSA9ICh7IGR0IH0pID0+IGBcbi5wLWlucHV0dGV4dCB7XG4gICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBpbmhlcml0O1xuICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICBjb2xvcjogJHtkdCgnaW5wdXR0ZXh0LmNvbG9yJyl9O1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ2lucHV0dGV4dC5iYWNrZ3JvdW5kJyl9O1xuICAgIHBhZGRpbmctYmxvY2s6ICR7ZHQoJ2lucHV0dGV4dC5wYWRkaW5nLnknKX07XG4gICAgcGFkZGluZy1pbmxpbmU6ICR7ZHQoJ2lucHV0dGV4dC5wYWRkaW5nLngnKX07XG4gICAgYm9yZGVyOiAxcHggc29saWQgJHtkdCgnaW5wdXR0ZXh0LmJvcmRlci5jb2xvcicpfTtcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kICR7ZHQoJ2lucHV0dGV4dC50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBjb2xvciAke2R0KCdpbnB1dHRleHQudHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgYm9yZGVyLWNvbG9yICR7ZHQoJ2lucHV0dGV4dC50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBvdXRsaW5lLWNvbG9yICR7ZHQoJ2lucHV0dGV4dC50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBib3gtc2hhZG93ICR7ZHQoXG4gICAgICAgICdpbnB1dHRleHQudHJhbnNpdGlvbi5kdXJhdGlvbidcbiAgICApfTtcbiAgICBhcHBlYXJhbmNlOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ2lucHV0dGV4dC5ib3JkZXIucmFkaXVzJyl9O1xuICAgIG91dGxpbmUtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJveC1zaGFkb3c6ICR7ZHQoJ2lucHV0dGV4dC5zaGFkb3cnKX07XG59XG5cbi5wLWlucHV0dGV4dC5uZy1pbnZhbGlkLm5nLWRpcnR5IHtcbiAgICBib3JkZXItY29sb3I6ICR7ZHQoJ2lucHV0dGV4dC5pbnZhbGlkLmJvcmRlci5jb2xvcicpfTtcbn1cblxuLnAtaW5wdXR0ZXh0OmVuYWJsZWQ6aG92ZXIge1xuICAgIGJvcmRlci1jb2xvcjogJHtkdCgnaW5wdXR0ZXh0LmhvdmVyLmJvcmRlci5jb2xvcicpfTtcbn1cblxuLnAtaW5wdXR0ZXh0OmVuYWJsZWQ6Zm9jdXMge1xuICAgIGJvcmRlci1jb2xvcjogJHtkdCgnaW5wdXR0ZXh0LmZvY3VzLmJvcmRlci5jb2xvcicpfTtcbiAgICBib3gtc2hhZG93OiAke2R0KCdpbnB1dHRleHQuZm9jdXMucmluZy5zaGFkb3cnKX07XG4gICAgb3V0bGluZTogJHtkdCgnaW5wdXR0ZXh0LmZvY3VzLnJpbmcud2lkdGgnKX0gJHtkdCgnaW5wdXR0ZXh0LmZvY3VzLnJpbmcuc3R5bGUnKX0gJHtkdCgnaW5wdXR0ZXh0LmZvY3VzLnJpbmcuY29sb3InKX07XG4gICAgb3V0bGluZS1vZmZzZXQ6ICR7ZHQoJ2lucHV0dGV4dC5mb2N1cy5yaW5nLm9mZnNldCcpfTtcbn1cblxuLnAtaW5wdXR0ZXh0LnAtaW52YWxpZCB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2R0KCdpbnB1dHRleHQuaW52YWxpZC5ib3JkZXIuY29sb3InKX07XG59XG5cbi5wLWlucHV0dGV4dC5wLXZhcmlhbnQtZmlsbGVkIHtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCdpbnB1dHRleHQuZmlsbGVkLmJhY2tncm91bmQnKX07XG59XG5cbi5wLWlucHV0dGV4dC5wLXZhcmlhbnQtZmlsbGVkOmVuYWJsZWQ6Zm9jdXMge1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ2lucHV0dGV4dC5maWxsZWQuZm9jdXMuYmFja2dyb3VuZCcpfTtcbn1cblxuLnAtaW5wdXR0ZXh0OmRpc2FibGVkIHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ2lucHV0dGV4dC5kaXNhYmxlZC5iYWNrZ3JvdW5kJyl9O1xuICAgIGNvbG9yOiAke2R0KCdpbnB1dHRleHQuZGlzYWJsZWQuY29sb3InKX07XG59XG5cbi5wLWlucHV0dGV4dDo6cGxhY2Vob2xkZXIge1xuICAgIGNvbG9yOiAke2R0KCdpbnB1dHRleHQucGxhY2Vob2xkZXIuY29sb3InKX07XG59XG5cbi5wLWlucHV0dGV4dC5uZy1pbnZhbGlkLm5nLWRpcnR5OjpwbGFjZWhvbGRlciB7XG4gICAgY29sb3I6ICR7ZHQoJ2lucHV0dGV4dC5pbnZhbGlkLnBsYWNlaG9sZGVyLmNvbG9yJyl9O1xufVxuXG4ucC1pbnB1dHRleHQtc20ge1xuICAgIGZvbnQtc2l6ZTogJHtkdCgnaW5wdXR0ZXh0LnNtLmZvbnQuc2l6ZScpfTtcbiAgICBwYWRkaW5nLWJsb2NrOiAke2R0KCdpbnB1dHRleHQuc20ucGFkZGluZy55Jyl9O1xuICAgIHBhZGRpbmctaW5saW5lOiAke2R0KCdpbnB1dHRleHQuc20ucGFkZGluZy54Jyl9O1xufVxuXG4ucC1pbnB1dHRleHQtbGcge1xuICAgIGZvbnQtc2l6ZTogJHtkdCgnaW5wdXR0ZXh0LmxnLmZvbnQuc2l6ZScpfTtcbiAgICBwYWRkaW5nLWJsb2NrOiAke2R0KCdpbnB1dHRleHQubGcucGFkZGluZy55Jyl9O1xuICAgIHBhZGRpbmctaW5saW5lOiAke2R0KCdpbnB1dHRleHQubGcucGFkZGluZy54Jyl9O1xufVxuXG4ucC1pbnB1dHRleHQtZmx1aWQge1xuICAgIHdpZHRoOiAxMDAlO1xufVxuYDtcblxuY29uc3QgY2xhc3NlcyA9IHtcbiAgICByb290OiAoeyBpbnN0YW5jZSwgcHJvcHMgfSkgPT4gW1xuICAgICAgICAncC1pbnB1dHRleHQgcC1jb21wb25lbnQnLFxuICAgICAgICB7XG4gICAgICAgICAgICAncC1maWxsZWQnOiBpbnN0YW5jZS5maWxsZWQsXG4gICAgICAgICAgICAncC1pbnB1dHRleHQtc20nOiBwcm9wcy5zaXplID09PSAnc21hbGwnLFxuICAgICAgICAgICAgJ3AtaW5wdXR0ZXh0LWxnJzogcHJvcHMuc2l6ZSA9PT0gJ2xhcmdlJyxcbiAgICAgICAgICAgICdwLWludmFsaWQnOiBwcm9wcy5pbnZhbGlkLFxuICAgICAgICAgICAgJ3AtdmFyaWFudC1maWxsZWQnOiBwcm9wcy52YXJpYW50ID09PSAnZmlsbGVkJyxcbiAgICAgICAgICAgICdwLWlucHV0dGV4dC1mbHVpZCc6IHByb3BzLmZsdWlkXG4gICAgICAgIH1cbiAgICBdXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW5wdXRUZXh0U3R5bGUgZXh0ZW5kcyBCYXNlU3R5bGUge1xuICAgIG5hbWUgPSAnaW5wdXR0ZXh0JztcblxuICAgIHRoZW1lID0gdGhlbWU7XG5cbiAgICBjbGFzc2VzID0gY2xhc3Nlcztcbn1cblxuLyoqXG4gKlxuICogSW5wdXRUZXh0IHJlbmRlcnMgYSB0ZXh0IGZpZWxkIHRvIGVudGVyIGRhdGEuXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvaW5wdXR0ZXh0LylcbiAqXG4gKiBAbW9kdWxlIGlucHV0dGV4dHN0eWxlXG4gKlxuICovXG5leHBvcnQgZW51bSBJbnB1dFRleHRDbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY2xhc3Mgb2Ygcm9vdCBlbGVtZW50XG4gICAgICovXG4gICAgcm9vdCA9ICdwLWlucHV0dGV4dCdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnB1dFRleHRTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19