import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-avatar {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: ${dt('avatar.width')};
    height: ${dt('avatar.height')};
    font-size: ${dt('avatar.font.size')};
    color: ${dt('avatar.color')};
    background: ${dt('avatar.background')};
    border-radius: ${dt('avatar.border.radius')};
}

.p-avatar-image {
    background: transparent;
}

.p-avatar-circle {
    border-radius: 50%;
}

.p-avatar-circle img {
    border-radius: 50%;
}

.p-avatar-icon {
    font-size: ${dt('avatar.icon.size')};
    width: ${dt('avatar.icon.size')};
    height: ${dt('avatar.icon.size')};
}

.p-avatar img {
    width: 100%;
    height: 100%;
}

.p-avatar-lg {
    width: ${dt('avatar.lg.width')};
    height: ${dt('avatar.lg.width')};
    font-size: ${dt('avatar.lg.font.size')};
}

.p-avatar-lg .p-avatar-icon {
    font-size: ${dt('avatar.lg.icon.size')};
    width: ${dt('avatar.lg.icon.size')};
    height: ${dt('avatar.lg.icon.size')};
}

.p-avatar-xl {
    width: ${dt('avatar.xl.width')};
    height: ${dt('avatar.xl.width')};
    font-size: ${dt('avatar.xl.font.size')};
}

.p-avatar-xl .p-avatar-icon {
    font-size: ${dt('avatar.xl.font.size')};
}

.p-avatar-group {
    display: flex;
    align-items: center;
}

.p-avatar-group .p-avatar + .p-avatar {
    margin-inline-start: ${dt('avatar.group.offset')};
}

.p-avatar-group .p-avatar {
    border: 2px solid ${dt('avatar.group.border.color')};
}

.p-avatar-group .p-avatar-lg + .p-avatar-lg {
    margin-inline-start: ${dt('avatar.lg.group.offset')};
}

.p-avatar-group .p-avatar-xl + .p-avatar-xl {
    margin-inline-start: ${dt('avatar.xl.group.offset')};
}
`;
const classes = {
    root: ({ props }) => [
        'p-avatar p-component',
        {
            'p-avatar-image': props.image != null,
            'p-avatar-circle': props.shape === 'circle',
            'p-avatar-lg': props.size === 'large',
            'p-avatar-xl': props.size === 'xlarge'
        }
    ],
    label: 'p-avatar-label',
    icon: 'p-avatar-icon'
};
export class AvatarStyle extends BaseStyle {
    name = 'avatar';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵAvatarStyle_BaseFactory; return function AvatarStyle_Factory(__ngFactoryType__) { return (ɵAvatarStyle_BaseFactory || (ɵAvatarStyle_BaseFactory = i0.ɵɵgetInheritedFactory(AvatarStyle)))(__ngFactoryType__ || AvatarStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AvatarStyle, factory: AvatarStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AvatarStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Avatar represents people using icons, labels and images.
 *
 * - [Live Demo](https://primeng.org/avatar)
 *
 * @module avatarstyle
 *
 */
export var AvatarClasses;
(function (AvatarClasses) {
    /**
     * Class name of the root element
     */
    AvatarClasses["root"] = "p-avatar";
    /**
     * Class name of the label element
     */
    AvatarClasses["label"] = "p-avatar-label";
    /**
     * Class name of the icon element
     */
    AvatarClasses["icon"] = "p-avatar-icon";
})(AvatarClasses || (AvatarClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyc3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXZhdGFyL3N0eWxlL2F2YXRhcnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7YUFLYixFQUFFLENBQUMsY0FBYyxDQUFDO2NBQ2pCLEVBQUUsQ0FBQyxlQUFlLENBQUM7aUJBQ2hCLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzthQUMxQixFQUFFLENBQUMsY0FBYyxDQUFDO2tCQUNiLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztxQkFDcEIsRUFBRSxDQUFDLHNCQUFzQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O2lCQWdCOUIsRUFBRSxDQUFDLGtCQUFrQixDQUFDO2FBQzFCLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztjQUNyQixFQUFFLENBQUMsa0JBQWtCLENBQUM7Ozs7Ozs7OzthQVN2QixFQUFFLENBQUMsaUJBQWlCLENBQUM7Y0FDcEIsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2lCQUNsQixFQUFFLENBQUMscUJBQXFCLENBQUM7Ozs7aUJBSXpCLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzthQUM3QixFQUFFLENBQUMscUJBQXFCLENBQUM7Y0FDeEIsRUFBRSxDQUFDLHFCQUFxQixDQUFDOzs7O2FBSTFCLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztjQUNwQixFQUFFLENBQUMsaUJBQWlCLENBQUM7aUJBQ2xCLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzs7OztpQkFJekIsRUFBRSxDQUFDLHFCQUFxQixDQUFDOzs7Ozs7Ozs7MkJBU2YsRUFBRSxDQUFDLHFCQUFxQixDQUFDOzs7O3dCQUk1QixFQUFFLENBQUMsMkJBQTJCLENBQUM7Ozs7MkJBSTVCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQzs7OzsyQkFJNUIsRUFBRSxDQUFDLHdCQUF3QixDQUFDOztDQUV0RCxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUc7SUFDWixJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNqQixzQkFBc0I7UUFDdEI7WUFDSSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsS0FBSyxJQUFJLElBQUk7WUFDckMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLEtBQUssS0FBSyxRQUFRO1lBQzNDLGFBQWEsRUFBRSxLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU87WUFDckMsYUFBYSxFQUFFLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUTtTQUN6QztLQUNKO0lBQ0QsS0FBSyxFQUFFLGdCQUFnQjtJQUN2QixJQUFJLEVBQUUsZUFBZTtDQUN4QixDQUFDO0FBR0YsTUFBTSxPQUFPLFdBQVksU0FBUSxTQUFTO0lBQ3RDLElBQUksR0FBRyxRQUFRLENBQUM7SUFFaEIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUVkLE9BQU8sR0FBRyxPQUFPLENBQUM7eU5BTFQsV0FBVyx5QkFBWCxXQUFXO2dFQUFYLFdBQVcsV0FBWCxXQUFXOztpRkFBWCxXQUFXO2NBRHZCLFVBQVU7O0FBU1g7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQU4sSUFBWSxhQWFYO0FBYkQsV0FBWSxhQUFhO0lBQ3JCOztPQUVHO0lBQ0gsa0NBQWlCLENBQUE7SUFDakI7O09BRUc7SUFDSCx5Q0FBd0IsQ0FBQTtJQUN4Qjs7T0FFRztJQUNILHVDQUFzQixDQUFBO0FBQzFCLENBQUMsRUFiVyxhQUFhLEtBQWIsYUFBYSxRQWF4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VTdHlsZSB9IGZyb20gJ3ByaW1lbmcvYmFzZSc7XG5cbmNvbnN0IHRoZW1lID0gKHsgZHQgfSkgPT4gYFxuLnAtYXZhdGFyIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHdpZHRoOiAke2R0KCdhdmF0YXIud2lkdGgnKX07XG4gICAgaGVpZ2h0OiAke2R0KCdhdmF0YXIuaGVpZ2h0Jyl9O1xuICAgIGZvbnQtc2l6ZTogJHtkdCgnYXZhdGFyLmZvbnQuc2l6ZScpfTtcbiAgICBjb2xvcjogJHtkdCgnYXZhdGFyLmNvbG9yJyl9O1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ2F2YXRhci5iYWNrZ3JvdW5kJyl9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ2F2YXRhci5ib3JkZXIucmFkaXVzJyl9O1xufVxuXG4ucC1hdmF0YXItaW1hZ2Uge1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG4ucC1hdmF0YXItY2lyY2xlIHtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG59XG5cbi5wLWF2YXRhci1jaXJjbGUgaW1nIHtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG59XG5cbi5wLWF2YXRhci1pY29uIHtcbiAgICBmb250LXNpemU6ICR7ZHQoJ2F2YXRhci5pY29uLnNpemUnKX07XG4gICAgd2lkdGg6ICR7ZHQoJ2F2YXRhci5pY29uLnNpemUnKX07XG4gICAgaGVpZ2h0OiAke2R0KCdhdmF0YXIuaWNvbi5zaXplJyl9O1xufVxuXG4ucC1hdmF0YXIgaW1nIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG59XG5cbi5wLWF2YXRhci1sZyB7XG4gICAgd2lkdGg6ICR7ZHQoJ2F2YXRhci5sZy53aWR0aCcpfTtcbiAgICBoZWlnaHQ6ICR7ZHQoJ2F2YXRhci5sZy53aWR0aCcpfTtcbiAgICBmb250LXNpemU6ICR7ZHQoJ2F2YXRhci5sZy5mb250LnNpemUnKX07XG59XG5cbi5wLWF2YXRhci1sZyAucC1hdmF0YXItaWNvbiB7XG4gICAgZm9udC1zaXplOiAke2R0KCdhdmF0YXIubGcuaWNvbi5zaXplJyl9O1xuICAgIHdpZHRoOiAke2R0KCdhdmF0YXIubGcuaWNvbi5zaXplJyl9O1xuICAgIGhlaWdodDogJHtkdCgnYXZhdGFyLmxnLmljb24uc2l6ZScpfTtcbn1cblxuLnAtYXZhdGFyLXhsIHtcbiAgICB3aWR0aDogJHtkdCgnYXZhdGFyLnhsLndpZHRoJyl9O1xuICAgIGhlaWdodDogJHtkdCgnYXZhdGFyLnhsLndpZHRoJyl9O1xuICAgIGZvbnQtc2l6ZTogJHtkdCgnYXZhdGFyLnhsLmZvbnQuc2l6ZScpfTtcbn1cblxuLnAtYXZhdGFyLXhsIC5wLWF2YXRhci1pY29uIHtcbiAgICBmb250LXNpemU6ICR7ZHQoJ2F2YXRhci54bC5mb250LnNpemUnKX07XG59XG5cbi5wLWF2YXRhci1ncm91cCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4ucC1hdmF0YXItZ3JvdXAgLnAtYXZhdGFyICsgLnAtYXZhdGFyIHtcbiAgICBtYXJnaW4taW5saW5lLXN0YXJ0OiAke2R0KCdhdmF0YXIuZ3JvdXAub2Zmc2V0Jyl9O1xufVxuXG4ucC1hdmF0YXItZ3JvdXAgLnAtYXZhdGFyIHtcbiAgICBib3JkZXI6IDJweCBzb2xpZCAke2R0KCdhdmF0YXIuZ3JvdXAuYm9yZGVyLmNvbG9yJyl9O1xufVxuXG4ucC1hdmF0YXItZ3JvdXAgLnAtYXZhdGFyLWxnICsgLnAtYXZhdGFyLWxnIHtcbiAgICBtYXJnaW4taW5saW5lLXN0YXJ0OiAke2R0KCdhdmF0YXIubGcuZ3JvdXAub2Zmc2V0Jyl9O1xufVxuXG4ucC1hdmF0YXItZ3JvdXAgLnAtYXZhdGFyLXhsICsgLnAtYXZhdGFyLXhsIHtcbiAgICBtYXJnaW4taW5saW5lLXN0YXJ0OiAke2R0KCdhdmF0YXIueGwuZ3JvdXAub2Zmc2V0Jyl9O1xufVxuYDtcblxuY29uc3QgY2xhc3NlcyA9IHtcbiAgICByb290OiAoeyBwcm9wcyB9KSA9PiBbXG4gICAgICAgICdwLWF2YXRhciBwLWNvbXBvbmVudCcsXG4gICAgICAgIHtcbiAgICAgICAgICAgICdwLWF2YXRhci1pbWFnZSc6IHByb3BzLmltYWdlICE9IG51bGwsXG4gICAgICAgICAgICAncC1hdmF0YXItY2lyY2xlJzogcHJvcHMuc2hhcGUgPT09ICdjaXJjbGUnLFxuICAgICAgICAgICAgJ3AtYXZhdGFyLWxnJzogcHJvcHMuc2l6ZSA9PT0gJ2xhcmdlJyxcbiAgICAgICAgICAgICdwLWF2YXRhci14bCc6IHByb3BzLnNpemUgPT09ICd4bGFyZ2UnXG4gICAgICAgIH1cbiAgICBdLFxuICAgIGxhYmVsOiAncC1hdmF0YXItbGFiZWwnLFxuICAgIGljb246ICdwLWF2YXRhci1pY29uJ1xufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF2YXRhclN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHtcbiAgICBuYW1lID0gJ2F2YXRhcic7XG5cbiAgICB0aGVtZSA9IHRoZW1lO1xuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXM7XG59XG5cbi8qKlxuICpcbiAqIEF2YXRhciByZXByZXNlbnRzIHBlb3BsZSB1c2luZyBpY29ucywgbGFiZWxzIGFuZCBpbWFnZXMuXG4gKlxuICogLSBbTGl2ZSBEZW1vXShodHRwczovL3ByaW1lbmcub3JnL2F2YXRhcilcbiAqXG4gKiBAbW9kdWxlIGF2YXRhcnN0eWxlXG4gKlxuICovXG5leHBvcnQgZW51bSBBdmF0YXJDbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICByb290ID0gJ3AtYXZhdGFyJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBsYWJlbCBlbGVtZW50XG4gICAgICovXG4gICAgbGFiZWwgPSAncC1hdmF0YXItbGFiZWwnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGljb24gZWxlbWVudFxuICAgICAqL1xuICAgIGljb24gPSAncC1hdmF0YXItaWNvbidcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdmF0YXJTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19