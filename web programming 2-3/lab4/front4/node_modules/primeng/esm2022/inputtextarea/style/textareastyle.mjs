import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-textarea {
    font-family: inherit;
    font-feature-settings: inherit;
    font-size: 1rem;
    color: ${dt('textarea.color')};
    background: ${dt('textarea.background')};
    padding: ${dt('textarea.padding.y')} ${dt('textarea.padding.x')};
    border: 1px solid ${dt('textarea.border.color')};
    transition: background ${dt('textarea.transition.duration')}, color ${dt('textarea.transition.duration')}, border-color ${dt('textarea.transition.duration')}, outline-color ${dt('textarea.transition.duration')}, box-shadow ${dt('textarea.transition.duration')};
    appearance: none;
    border-radius: ${dt('textarea.border.radius')};
    outline-color: transparent;
    box-shadow: ${dt('textarea.shadow')};
}

.p-textarea:enabled:hover {
    border-color: ${dt('textarea.hover.border.color')};
}

.p-textarea:enabled:focus {
    border-color: ${dt('textarea.focus.border.color')};
    box-shadow: ${dt('textarea.focus.ring.shadow')};
    outline: ${dt('textarea.focus.ring.width')} ${dt('textarea.focus.ring.style')} ${dt('textarea.focus.ring.color')};
    outline-offset: ${dt('textarea.focus.ring.offset')};
}

.p-textarea.p-invalid {
    border-color: ${dt('textarea.invalid.border.color')};
}

.p-textarea.p-variant-filled {
    background: ${dt('textarea.filled.background')};
}

.p-textarea.p-variant-filled:enabled:focus {
    background: ${dt('textarea.filled.focus.background')};
}

.p-textarea:disabled {
    opacity: 1;
    background: ${dt('textarea.disabled.background')};
    color: ${dt('textarea.disabled.color')};
}

.p-textarea::placeholder {
    color: ${dt('textarea.placeholder.color')};
}

.p-textarea-fluid {
    width: 100%;
}

.p-textarea-resizable {
    overflow: hidden;
    resize: none;
}

.p-textarea.ng-invalid.ng-dirty {
    border-color: ${dt('textarea.invalid.border.color')}
}

.p-textarea.ng-invalid.ng-dirty::placeholder {
    color: ${dt('textarea.invalid.placeholder.color')};
}`;
const classes = {
    root: ({ instance, props }) => [
        'p-textarea p-component',
        {
            'p-filled': instance.filled,
            'p-textarea-resizable ': props.autoResize,
            'p-invalid': props.invalid,
            'p-variant-filled': props.variant ? props.variant === 'filled' : instance.config.inputStyle === 'filled' || instance.config.inputVariant === 'filled',
            'p-textarea-fluid': props.fluid
        }
    ]
};
export class TextareaStyle extends BaseStyle {
    name = 'textarea';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵTextareaStyle_BaseFactory; return function TextareaStyle_Factory(__ngFactoryType__) { return (ɵTextareaStyle_BaseFactory || (ɵTextareaStyle_BaseFactory = i0.ɵɵgetInheritedFactory(TextareaStyle)))(__ngFactoryType__ || TextareaStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TextareaStyle, factory: TextareaStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TextareaStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Textarea is a multi-line text input element.
 *
 * [Live Demo](https://www.primeng.org/textarea/)
 *
 * @module textareastyle
 *
 */
export var TextareaClasses;
(function (TextareaClasses) {
    /**
     * Class name of the root element
     */
    TextareaClasses["root"] = "p-textarea";
})(TextareaClasses || (TextareaClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGFyZWFzdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbnB1dHRleHRhcmVhL3N0eWxlL3RleHRhcmVhc3R5bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQUV6QyxNQUFNLEtBQUssR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDOzs7OzthQUtiLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztrQkFDZixFQUFFLENBQUMscUJBQXFCLENBQUM7ZUFDNUIsRUFBRSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLG9CQUFvQixDQUFDO3dCQUMzQyxFQUFFLENBQUMsdUJBQXVCLENBQUM7NkJBQ3RCLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLDhCQUE4QixDQUFDLG1CQUFtQixFQUFFLENBQUMsOEJBQThCLENBQUMsZ0JBQWdCLEVBQUUsQ0FDL04sOEJBQThCLENBQ2pDOztxQkFFZ0IsRUFBRSxDQUFDLHdCQUF3QixDQUFDOztrQkFFL0IsRUFBRSxDQUFDLGlCQUFpQixDQUFDOzs7O29CQUluQixFQUFFLENBQUMsNkJBQTZCLENBQUM7Ozs7b0JBSWpDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQztrQkFDbkMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO2VBQ25DLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztzQkFDOUYsRUFBRSxDQUFDLDRCQUE0QixDQUFDOzs7O29CQUlsQyxFQUFFLENBQUMsK0JBQStCLENBQUM7Ozs7a0JBSXJDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7OztrQkFJaEMsRUFBRSxDQUFDLGtDQUFrQyxDQUFDOzs7OztrQkFLdEMsRUFBRSxDQUFDLDhCQUE4QixDQUFDO2FBQ3ZDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQzs7OzthQUk3QixFQUFFLENBQUMsNEJBQTRCLENBQUM7Ozs7Ozs7Ozs7Ozs7b0JBYXpCLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQzs7OzthQUkxQyxFQUFFLENBQUMsb0NBQW9DLENBQUM7RUFDbkQsQ0FBQztBQUVILE1BQU0sT0FBTyxHQUFHO0lBQ1osSUFBSSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQzNCLHdCQUF3QjtRQUN4QjtZQUNJLFVBQVUsRUFBRSxRQUFRLENBQUMsTUFBTTtZQUMzQix1QkFBdUIsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUN6QyxXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDMUIsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxLQUFLLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksS0FBSyxRQUFRO1lBQ3JKLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxLQUFLO1NBQ2xDO0tBQ0o7Q0FDSixDQUFDO0FBR0YsTUFBTSxPQUFPLGFBQWMsU0FBUSxTQUFTO0lBQ3hDLElBQUksR0FBRyxVQUFVLENBQUM7SUFFbEIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUVkLE9BQU8sR0FBRyxPQUFPLENBQUM7aU9BTFQsYUFBYSx5QkFBYixhQUFhO2dFQUFiLGFBQWEsV0FBYixhQUFhOztpRkFBYixhQUFhO2NBRHpCLFVBQVU7O0FBU1g7Ozs7Ozs7O0dBUUc7QUFFSCxNQUFNLENBQU4sSUFBWSxlQUtYO0FBTEQsV0FBWSxlQUFlO0lBQ3ZCOztPQUVHO0lBQ0gsc0NBQW1CLENBQUE7QUFDdkIsQ0FBQyxFQUxXLGVBQWUsS0FBZixlQUFlLFFBSzFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC10ZXh0YXJlYSB7XG4gICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBpbmhlcml0O1xuICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICBjb2xvcjogJHtkdCgndGV4dGFyZWEuY29sb3InKX07XG4gICAgYmFja2dyb3VuZDogJHtkdCgndGV4dGFyZWEuYmFja2dyb3VuZCcpfTtcbiAgICBwYWRkaW5nOiAke2R0KCd0ZXh0YXJlYS5wYWRkaW5nLnknKX0gJHtkdCgndGV4dGFyZWEucGFkZGluZy54Jyl9O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICR7ZHQoJ3RleHRhcmVhLmJvcmRlci5jb2xvcicpfTtcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kICR7ZHQoJ3RleHRhcmVhLnRyYW5zaXRpb24uZHVyYXRpb24nKX0sIGNvbG9yICR7ZHQoJ3RleHRhcmVhLnRyYW5zaXRpb24uZHVyYXRpb24nKX0sIGJvcmRlci1jb2xvciAke2R0KCd0ZXh0YXJlYS50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBvdXRsaW5lLWNvbG9yICR7ZHQoJ3RleHRhcmVhLnRyYW5zaXRpb24uZHVyYXRpb24nKX0sIGJveC1zaGFkb3cgJHtkdChcbiAgICAgICAgJ3RleHRhcmVhLnRyYW5zaXRpb24uZHVyYXRpb24nXG4gICAgKX07XG4gICAgYXBwZWFyYW5jZTogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiAke2R0KCd0ZXh0YXJlYS5ib3JkZXIucmFkaXVzJyl9O1xuICAgIG91dGxpbmUtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJveC1zaGFkb3c6ICR7ZHQoJ3RleHRhcmVhLnNoYWRvdycpfTtcbn1cblxuLnAtdGV4dGFyZWE6ZW5hYmxlZDpob3ZlciB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2R0KCd0ZXh0YXJlYS5ob3Zlci5ib3JkZXIuY29sb3InKX07XG59XG5cbi5wLXRleHRhcmVhOmVuYWJsZWQ6Zm9jdXMge1xuICAgIGJvcmRlci1jb2xvcjogJHtkdCgndGV4dGFyZWEuZm9jdXMuYm9yZGVyLmNvbG9yJyl9O1xuICAgIGJveC1zaGFkb3c6ICR7ZHQoJ3RleHRhcmVhLmZvY3VzLnJpbmcuc2hhZG93Jyl9O1xuICAgIG91dGxpbmU6ICR7ZHQoJ3RleHRhcmVhLmZvY3VzLnJpbmcud2lkdGgnKX0gJHtkdCgndGV4dGFyZWEuZm9jdXMucmluZy5zdHlsZScpfSAke2R0KCd0ZXh0YXJlYS5mb2N1cy5yaW5nLmNvbG9yJyl9O1xuICAgIG91dGxpbmUtb2Zmc2V0OiAke2R0KCd0ZXh0YXJlYS5mb2N1cy5yaW5nLm9mZnNldCcpfTtcbn1cblxuLnAtdGV4dGFyZWEucC1pbnZhbGlkIHtcbiAgICBib3JkZXItY29sb3I6ICR7ZHQoJ3RleHRhcmVhLmludmFsaWQuYm9yZGVyLmNvbG9yJyl9O1xufVxuXG4ucC10ZXh0YXJlYS5wLXZhcmlhbnQtZmlsbGVkIHtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCd0ZXh0YXJlYS5maWxsZWQuYmFja2dyb3VuZCcpfTtcbn1cblxuLnAtdGV4dGFyZWEucC12YXJpYW50LWZpbGxlZDplbmFibGVkOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCd0ZXh0YXJlYS5maWxsZWQuZm9jdXMuYmFja2dyb3VuZCcpfTtcbn1cblxuLnAtdGV4dGFyZWE6ZGlzYWJsZWQge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgYmFja2dyb3VuZDogJHtkdCgndGV4dGFyZWEuZGlzYWJsZWQuYmFja2dyb3VuZCcpfTtcbiAgICBjb2xvcjogJHtkdCgndGV4dGFyZWEuZGlzYWJsZWQuY29sb3InKX07XG59XG5cbi5wLXRleHRhcmVhOjpwbGFjZWhvbGRlciB7XG4gICAgY29sb3I6ICR7ZHQoJ3RleHRhcmVhLnBsYWNlaG9sZGVyLmNvbG9yJyl9O1xufVxuXG4ucC10ZXh0YXJlYS1mbHVpZCB7XG4gICAgd2lkdGg6IDEwMCU7XG59XG5cbi5wLXRleHRhcmVhLXJlc2l6YWJsZSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICByZXNpemU6IG5vbmU7XG59XG5cbi5wLXRleHRhcmVhLm5nLWludmFsaWQubmctZGlydHkge1xuICAgIGJvcmRlci1jb2xvcjogJHtkdCgndGV4dGFyZWEuaW52YWxpZC5ib3JkZXIuY29sb3InKX1cbn1cblxuLnAtdGV4dGFyZWEubmctaW52YWxpZC5uZy1kaXJ0eTo6cGxhY2Vob2xkZXIge1xuICAgIGNvbG9yOiAke2R0KCd0ZXh0YXJlYS5pbnZhbGlkLnBsYWNlaG9sZGVyLmNvbG9yJyl9O1xufWA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogKHsgaW5zdGFuY2UsIHByb3BzIH0pID0+IFtcbiAgICAgICAgJ3AtdGV4dGFyZWEgcC1jb21wb25lbnQnLFxuICAgICAgICB7XG4gICAgICAgICAgICAncC1maWxsZWQnOiBpbnN0YW5jZS5maWxsZWQsXG4gICAgICAgICAgICAncC10ZXh0YXJlYS1yZXNpemFibGUgJzogcHJvcHMuYXV0b1Jlc2l6ZSxcbiAgICAgICAgICAgICdwLWludmFsaWQnOiBwcm9wcy5pbnZhbGlkLFxuICAgICAgICAgICAgJ3AtdmFyaWFudC1maWxsZWQnOiBwcm9wcy52YXJpYW50ID8gcHJvcHMudmFyaWFudCA9PT0gJ2ZpbGxlZCcgOiBpbnN0YW5jZS5jb25maWcuaW5wdXRTdHlsZSA9PT0gJ2ZpbGxlZCcgfHwgaW5zdGFuY2UuY29uZmlnLmlucHV0VmFyaWFudCA9PT0gJ2ZpbGxlZCcsXG4gICAgICAgICAgICAncC10ZXh0YXJlYS1mbHVpZCc6IHByb3BzLmZsdWlkXG4gICAgICAgIH1cbiAgICBdXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGV4dGFyZWFTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICd0ZXh0YXJlYSc7XG5cbiAgICB0aGVtZSA9IHRoZW1lO1xuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXM7XG59XG5cbi8qKlxuICpcbiAqIFRleHRhcmVhIGlzIGEgbXVsdGktbGluZSB0ZXh0IGlucHV0IGVsZW1lbnQuXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvdGV4dGFyZWEvKVxuICpcbiAqIEBtb2R1bGUgdGV4dGFyZWFzdHlsZVxuICpcbiAqL1xuXG5leHBvcnQgZW51bSBUZXh0YXJlYUNsYXNzZXMge1xuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudFxuICAgICAqL1xuICAgIHJvb3QgPSAncC10ZXh0YXJlYSdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0YXJlYVN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHt9XG4iXX0=