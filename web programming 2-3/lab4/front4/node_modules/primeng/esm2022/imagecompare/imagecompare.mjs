import { CommonModule, isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChild, inject, Input, NgModule, ViewEncapsulation } from '@angular/core';
import { SharedModule } from 'primeng/api';
import { BaseComponent } from 'primeng/basecomponent';
import { ImageCompareStyle } from './style/imagecomparestyle';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const _c0 = ["left"];
const _c1 = ["right"];
function ImageCompare_0_ng_template_0_Template(rf, ctx) { }
function ImageCompare_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, ImageCompare_0_ng_template_0_Template, 0, 0, "ng-template");
} }
function ImageCompare_1_ng_template_0_Template(rf, ctx) { }
function ImageCompare_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, ImageCompare_1_ng_template_0_Template, 0, 0, "ng-template");
} }
/**
 * Compare two images side by side with a slider.
 * @group Components
 */
export class ImageCompare extends BaseComponent {
    isRTL = false;
    /**
     * Index of the element in tabbing order.
     * @defaultValue 0
     * @group Props
     */
    tabindex;
    /**
     * Defines a string value that labels an interactive element.
     * @group Props
     */
    ariaLabelledby;
    /**
     * Identifier of the underlying input element.
     * @group Props
     */
    ariaLabel;
    /**
     * Template for the left side.
     * @group Templates
     */
    leftTemplate;
    /**
     * Template for the right side.
     * @group Templates
     */
    rightTemplate;
    _componentStyle = inject(ImageCompareStyle);
    mutationObserver;
    ngOnInit() {
        super.ngOnInit();
        this.updateDirection();
        this.observeDirectionChanges();
    }
    onSlide(event) {
        const value = event.target.value;
        const image = event.target.previousElementSibling;
        if (this.isRTL) {
            image.style.clipPath = `polygon(${100 - value}% 0, 100% 0, 100% 100%, ${100 - value}% 100%)`;
        }
        else {
            image.style.clipPath = `polygon(0 0, ${value}% 0, ${value}% 100%, 0 100%)`;
        }
    }
    updateDirection() {
        this.isRTL = !!this.el.nativeElement.closest('[dir="rtl"]');
    }
    observeDirectionChanges() {
        if (isPlatformBrowser(this.platformId)) {
            const targetNode = document?.documentElement;
            const config = { attributes: true, attributeFilter: ['dir'] };
            this.mutationObserver = new MutationObserver(() => {
                this.updateDirection();
            });
            this.mutationObserver.observe(targetNode, config);
        }
    }
    ngOnDestroy() {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
        }
        super.ngOnDestroy();
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵImageCompare_BaseFactory; return function ImageCompare_Factory(__ngFactoryType__) { return (ɵImageCompare_BaseFactory || (ɵImageCompare_BaseFactory = i0.ɵɵgetInheritedFactory(ImageCompare)))(__ngFactoryType__ || ImageCompare); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ImageCompare, selectors: [["p-imageCompare"], ["p-imagecompare"], ["p-image-compare"]], contentQueries: function ImageCompare_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, _c0, 5);
            i0.ɵɵcontentQuery(dirIndex, _c1, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.leftTemplate = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rightTemplate = _t.first);
        } }, hostAttrs: [1, "p-imagecompare"], hostVars: 3, hostBindings: function ImageCompare_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("tabindex", ctx.tabindex)("aria-labelledby", ctx.ariaLabelledby)("aria-label", ctx.ariaLabel);
        } }, inputs: { tabindex: "tabindex", ariaLabelledby: "ariaLabelledby", ariaLabel: "ariaLabel" }, standalone: true, features: [i0.ɵɵProvidersFeature([ImageCompareStyle]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature], decls: 3, vars: 4, consts: [[4, "ngTemplateOutlet"], ["type", "range", "min", "0", "max", "100", "value", "50", 3, "input"]], template: function ImageCompare_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵtemplate(0, ImageCompare_0_Template, 1, 0, null, 0)(1, ImageCompare_1_Template, 1, 0, null, 0);
            i0.ɵɵelementStart(2, "input", 1);
            i0.ɵɵlistener("input", function ImageCompare_Template_input_input_2_listener($event) { return ctx.onSlide($event); });
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵproperty("ngTemplateOutlet", ctx.leftTemplate);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngTemplateOutlet", ctx.rightTemplate);
            i0.ɵɵadvance();
            i0.ɵɵclassMap(ctx.cx("slider"));
        } }, dependencies: [CommonModule, i1.NgTemplateOutlet, SharedModule], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ImageCompare, [{
        type: Component,
        args: [{
                selector: 'p-imageCompare, p-imagecompare, p-image-compare',
                standalone: true,
                imports: [CommonModule, SharedModule],
                template: `
        <ng-template *ngTemplateOutlet="leftTemplate"></ng-template>
        <ng-template *ngTemplateOutlet="rightTemplate"></ng-template>

        <input type="range" min="0" max="100" value="50" (input)="onSlide($event)" [class]="cx('slider')" />
    `,
                host: {
                    class: 'p-imagecompare',
                    '[attr.tabindex]': 'tabindex',
                    '[attr.aria-labelledby]': 'ariaLabelledby',
                    '[attr.aria-label]': 'ariaLabel'
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [ImageCompareStyle]
            }]
    }], null, { tabindex: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], leftTemplate: [{
            type: ContentChild,
            args: ['left']
        }], rightTemplate: [{
            type: ContentChild,
            args: ['right']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(ImageCompare, { className: "ImageCompare" }); })();
export class ImageCompareModule {
    static ɵfac = function ImageCompareModule_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || ImageCompareModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: ImageCompareModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [ImageCompare, SharedModule, SharedModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ImageCompareModule, [{
        type: NgModule,
        args: [{
                imports: [ImageCompare, SharedModule],
                exports: [ImageCompare, SharedModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(ImageCompareModule, { imports: [ImageCompare, SharedModule], exports: [ImageCompare, SharedModule] }); })();
//# sourceMappingURL=data:application/json;base64,