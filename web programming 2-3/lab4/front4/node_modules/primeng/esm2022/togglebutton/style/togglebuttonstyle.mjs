import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-togglebutton {
    display: inline-flex;
    cursor: pointer;
    user-select: none;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    position: relative;
    color: ${dt('togglebutton.color')};
    background: ${dt('togglebutton.background')};
    border: 1px solid ${dt('togglebutton.border.color')};
    padding: ${dt('togglebutton.padding')};
    font-size: 1rem;
    font-family: inherit;
    font-feature-settings: inherit;
    transition: background ${dt('togglebutton.transition.duration')}, color ${dt('togglebutton.transition.duration')}, border-color ${dt('togglebutton.transition.duration')},
        outline-color ${dt('togglebutton.transition.duration')}, box-shadow ${dt('togglebutton.transition.duration')};
    border-radius: ${dt('togglebutton.border.radius')};
    outline-color: transparent;
    font-weight: ${dt('togglebutton.font.weight')};
}

.p-togglebutton-content {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: ${dt('togglebutton.gap')};
}

.p-togglebutton-label,
.p-togglebutton-icon {
    position: relative;
    transition: none;
}

.p-togglebutton::before {
    content: "";
    background: transparent;
    transition: background ${dt('togglebutton.transition.duration')}, color ${dt('togglebutton.transition.duration')}, border-color ${dt('togglebutton.transition.duration')},
            outline-color ${dt('togglebutton.transition.duration')}, box-shadow ${dt('togglebutton.transition.duration')};
    position: absolute;
    inset-inline-start: ${dt('togglebutton.content.left')};
    top: ${dt('togglebutton.content.top')};
    width: calc(100% - calc(2 *  ${dt('togglebutton.content.left')}));
    height: calc(100% - calc(2 *  ${dt('togglebutton.content.top')}));
    border-radius: ${dt('togglebutton.border.radius')};
}

.p-togglebutton.p-togglebutton-checked::before {
    background: ${dt('togglebutton.content.checked.background')};
    box-shadow: ${dt('togglebutton.content.checked.shadow')};
}

.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover {
    background: ${dt('togglebutton.hover.background')};
    color: ${dt('togglebutton.hover.color')};
}

.p-togglebutton.p-togglebutton-checked {
    background: ${dt('togglebutton.checked.background')};
    border-color: ${dt('togglebutton.checked.border.color')};
    color: ${dt('togglebutton.checked.color')};
}

.p-togglebutton:focus-visible {
    box-shadow: ${dt('togglebutton.focus.ring.shadow')};
    outline: ${dt('togglebutton.focus.ring.width')} ${dt('togglebutton.focus.ring.style')} ${dt('togglebutton.focus.ring.color')};
    outline-offset: ${dt('togglebutton.focus.ring.offset')};
}

.p-togglebutton.p-invalid {
    border-color: ${dt('togglebutton.invalid.border.color')};
}

.p-togglebutton:disabled {
    opacity: 1;
    cursor: default;
    background: ${dt('togglebutton.disabled.background')};
    border-color: ${dt('togglebutton.disabled.border.color')};
    color: ${dt('togglebutton.disabled.color')};
}

.p-togglebutton-icon {
    color: ${dt('togglebutton.icon.color')};
}

.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover .p-togglebutton-icon {
    color: ${dt('togglebutton.icon.hover.color')};
}

.p-togglebutton.p-togglebutton-checked .p-togglebutton-icon {
    color: ${dt('togglebutton.icon.checked.color')};
}

.p-togglebutton:disabled .p-togglebutton-icon {
    color: ${dt('togglebutton.icon.disabled.color')};
}

.p-togglebutton-sm {
    padding: ${dt('togglebutton.sm.padding')};
    font-size: ${dt('togglebutton.sm.font.size')};
}

.p-togglebutton-lg {
    padding: ${dt('togglebutton.lg.padding')};
    font-size: ${dt('togglebutton.lg.font.size')};
}

/* For PrimeNG (iconPos) */

.p-togglebutton-icon-right {
    order: 1;
}

p-togglebutton.ng-invalid.ng-dirty > .p-togglebutton {
    border-color: ${dt('togglebutton.invalid.border.color')};
}
`;
const classes = {
    root: ({ instance }) => ({
        'p-togglebutton p-component': true,
        'p-togglebutton-checked': instance.checked,
        'p-disabled': instance.disabled,
        'p-togglebutton-sm p-inputfield-sm': instance.size === 'small',
        'p-togglebutton-lg p-inputfield-lg': instance.size === 'large'
    }),
    content: 'p-togglebutton-content',
    icon: 'p-togglebutton-icon',
    label: 'p-togglebutton-label'
};
export class ToggleButtonStyle extends BaseStyle {
    name = 'togglebutton';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵToggleButtonStyle_BaseFactory; return function ToggleButtonStyle_Factory(__ngFactoryType__) { return (ɵToggleButtonStyle_BaseFactory || (ɵToggleButtonStyle_BaseFactory = i0.ɵɵgetInheritedFactory(ToggleButtonStyle)))(__ngFactoryType__ || ToggleButtonStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ToggleButtonStyle, factory: ToggleButtonStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ToggleButtonStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * ToggleButton is used to select a boolean value using a button.
 *
 * [Live Demo](https://www.primeng.org/togglebutton/)
 *
 * @module togglebuttonstyle
 *
 */
export var ToggleButtonClasses;
(function (ToggleButtonClasses) {
    /**
     * Class name of the root element
     */
    ToggleButtonClasses["root"] = "p-togglebutton";
    /**
     * Class name of the icon element
     */
    ToggleButtonClasses["icon"] = "p-togglebutton-icon";
    /**
     * Class name of the label element
     */
    ToggleButtonClasses["label"] = "p-togglebutton-label";
})(ToggleButtonClasses || (ToggleButtonClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlYnV0dG9uc3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdG9nZ2xlYnV0dG9uL3N0eWxlL3RvZ2dsZWJ1dHRvbnN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7Ozs7O2FBU2IsRUFBRSxDQUFDLG9CQUFvQixDQUFDO2tCQUNuQixFQUFFLENBQUMseUJBQXlCLENBQUM7d0JBQ3ZCLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztlQUN4QyxFQUFFLENBQUMsc0JBQXNCLENBQUM7Ozs7NkJBSVosRUFBRSxDQUFDLGtDQUFrQyxDQUFDLFdBQVcsRUFBRSxDQUFDLGtDQUFrQyxDQUFDLGtCQUFrQixFQUFFLENBQUMsa0NBQWtDLENBQUM7d0JBQ3BKLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLGtDQUFrQyxDQUFDO3FCQUMvRixFQUFFLENBQUMsNEJBQTRCLENBQUM7O21CQUVsQyxFQUFFLENBQUMsMEJBQTBCLENBQUM7Ozs7Ozs7O1dBUXRDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzs7Ozs7Ozs7Ozs7OzZCQVlKLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGtDQUFrQyxDQUFDOzRCQUNoSixFQUFFLENBQUMsa0NBQWtDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQzs7MEJBRTlGLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztXQUM5QyxFQUFFLENBQUMsMEJBQTBCLENBQUM7bUNBQ04sRUFBRSxDQUFDLDJCQUEyQixDQUFDO29DQUM5QixFQUFFLENBQUMsMEJBQTBCLENBQUM7cUJBQzdDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7OztrQkFJbkMsRUFBRSxDQUFDLHlDQUF5QyxDQUFDO2tCQUM3QyxFQUFFLENBQUMscUNBQXFDLENBQUM7Ozs7a0JBSXpDLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQzthQUN4QyxFQUFFLENBQUMsMEJBQTBCLENBQUM7Ozs7a0JBSXpCLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQztvQkFDbkMsRUFBRSxDQUFDLG1DQUFtQyxDQUFDO2FBQzlDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzs7OztrQkFJM0IsRUFBRSxDQUFDLGdDQUFnQyxDQUFDO2VBQ3ZDLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQztzQkFDMUcsRUFBRSxDQUFDLGdDQUFnQyxDQUFDOzs7O29CQUl0QyxFQUFFLENBQUMsbUNBQW1DLENBQUM7Ozs7OztrQkFNekMsRUFBRSxDQUFDLGtDQUFrQyxDQUFDO29CQUNwQyxFQUFFLENBQUMsb0NBQW9DLENBQUM7YUFDL0MsRUFBRSxDQUFDLDZCQUE2QixDQUFDOzs7O2FBSWpDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQzs7OzthQUk3QixFQUFFLENBQUMsK0JBQStCLENBQUM7Ozs7YUFJbkMsRUFBRSxDQUFDLGlDQUFpQyxDQUFDOzs7O2FBSXJDLEVBQUUsQ0FBQyxrQ0FBa0MsQ0FBQzs7OztlQUlwQyxFQUFFLENBQUMseUJBQXlCLENBQUM7aUJBQzNCLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQzs7OztlQUlqQyxFQUFFLENBQUMseUJBQXlCLENBQUM7aUJBQzNCLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQzs7Ozs7Ozs7OztvQkFVNUIsRUFBRSxDQUFDLG1DQUFtQyxDQUFDOztDQUUxRCxDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQUc7SUFDWixJQUFJLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLDRCQUE0QixFQUFFLElBQUk7UUFDbEMsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLE9BQU87UUFDMUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxRQUFRO1FBQy9CLG1DQUFtQyxFQUFFLFFBQVEsQ0FBQyxJQUFJLEtBQUssT0FBTztRQUM5RCxtQ0FBbUMsRUFBRSxRQUFRLENBQUMsSUFBSSxLQUFLLE9BQU87S0FDakUsQ0FBQztJQUNGLE9BQU8sRUFBRSx3QkFBd0I7SUFDakMsSUFBSSxFQUFFLHFCQUFxQjtJQUMzQixLQUFLLEVBQUUsc0JBQXNCO0NBQ2hDLENBQUM7QUFHRixNQUFNLE9BQU8saUJBQWtCLFNBQVEsU0FBUztJQUM1QyxJQUFJLEdBQUcsY0FBYyxDQUFDO0lBRXRCLEtBQUssR0FBRyxLQUFLLENBQUM7SUFFZCxPQUFPLEdBQUcsT0FBTyxDQUFDO2lQQUxULGlCQUFpQix5QkFBakIsaUJBQWlCO2dFQUFqQixpQkFBaUIsV0FBakIsaUJBQWlCOztpRkFBakIsaUJBQWlCO2NBRDdCLFVBQVU7O0FBU1g7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLENBQU4sSUFBWSxtQkFhWDtBQWJELFdBQVksbUJBQW1CO0lBQzNCOztPQUVHO0lBQ0gsOENBQXVCLENBQUE7SUFDdkI7O09BRUc7SUFDSCxtREFBNEIsQ0FBQTtJQUM1Qjs7T0FFRztJQUNILHFEQUE4QixDQUFBO0FBQ2xDLENBQUMsRUFiVyxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBYTlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC10b2dnbGVidXR0b24ge1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGNvbG9yOiAke2R0KCd0b2dnbGVidXR0b24uY29sb3InKX07XG4gICAgYmFja2dyb3VuZDogJHtkdCgndG9nZ2xlYnV0dG9uLmJhY2tncm91bmQnKX07XG4gICAgYm9yZGVyOiAxcHggc29saWQgJHtkdCgndG9nZ2xlYnV0dG9uLmJvcmRlci5jb2xvcicpfTtcbiAgICBwYWRkaW5nOiAke2R0KCd0b2dnbGVidXR0b24ucGFkZGluZycpfTtcbiAgICBmb250LXNpemU6IDFyZW07XG4gICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gICAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBpbmhlcml0O1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgJHtkdCgndG9nZ2xlYnV0dG9uLnRyYW5zaXRpb24uZHVyYXRpb24nKX0sIGNvbG9yICR7ZHQoJ3RvZ2dsZWJ1dHRvbi50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBib3JkZXItY29sb3IgJHtkdCgndG9nZ2xlYnV0dG9uLnRyYW5zaXRpb24uZHVyYXRpb24nKX0sXG4gICAgICAgIG91dGxpbmUtY29sb3IgJHtkdCgndG9nZ2xlYnV0dG9uLnRyYW5zaXRpb24uZHVyYXRpb24nKX0sIGJveC1zaGFkb3cgJHtkdCgndG9nZ2xlYnV0dG9uLnRyYW5zaXRpb24uZHVyYXRpb24nKX07XG4gICAgYm9yZGVyLXJhZGl1czogJHtkdCgndG9nZ2xlYnV0dG9uLmJvcmRlci5yYWRpdXMnKX07XG4gICAgb3V0bGluZS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgZm9udC13ZWlnaHQ6ICR7ZHQoJ3RvZ2dsZWJ1dHRvbi5mb250LndlaWdodCcpfTtcbn1cblxuLnAtdG9nZ2xlYnV0dG9uLWNvbnRlbnQge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGdhcDogJHtkdCgndG9nZ2xlYnV0dG9uLmdhcCcpfTtcbn1cblxuLnAtdG9nZ2xlYnV0dG9uLWxhYmVsLFxuLnAtdG9nZ2xlYnV0dG9uLWljb24ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB0cmFuc2l0aW9uOiBub25lO1xufVxuXG4ucC10b2dnbGVidXR0b246OmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kICR7ZHQoJ3RvZ2dsZWJ1dHRvbi50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LCBjb2xvciAke2R0KCd0b2dnbGVidXR0b24udHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgYm9yZGVyLWNvbG9yICR7ZHQoJ3RvZ2dsZWJ1dHRvbi50cmFuc2l0aW9uLmR1cmF0aW9uJyl9LFxuICAgICAgICAgICAgb3V0bGluZS1jb2xvciAke2R0KCd0b2dnbGVidXR0b24udHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgYm94LXNoYWRvdyAke2R0KCd0b2dnbGVidXR0b24udHJhbnNpdGlvbi5kdXJhdGlvbicpfTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgaW5zZXQtaW5saW5lLXN0YXJ0OiAke2R0KCd0b2dnbGVidXR0b24uY29udGVudC5sZWZ0Jyl9O1xuICAgIHRvcDogJHtkdCgndG9nZ2xlYnV0dG9uLmNvbnRlbnQudG9wJyl9O1xuICAgIHdpZHRoOiBjYWxjKDEwMCUgLSBjYWxjKDIgKiAgJHtkdCgndG9nZ2xlYnV0dG9uLmNvbnRlbnQubGVmdCcpfSkpO1xuICAgIGhlaWdodDogY2FsYygxMDAlIC0gY2FsYygyICogICR7ZHQoJ3RvZ2dsZWJ1dHRvbi5jb250ZW50LnRvcCcpfSkpO1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ3RvZ2dsZWJ1dHRvbi5ib3JkZXIucmFkaXVzJyl9O1xufVxuXG4ucC10b2dnbGVidXR0b24ucC10b2dnbGVidXR0b24tY2hlY2tlZDo6YmVmb3JlIHtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCd0b2dnbGVidXR0b24uY29udGVudC5jaGVja2VkLmJhY2tncm91bmQnKX07XG4gICAgYm94LXNoYWRvdzogJHtkdCgndG9nZ2xlYnV0dG9uLmNvbnRlbnQuY2hlY2tlZC5zaGFkb3cnKX07XG59XG5cbi5wLXRvZ2dsZWJ1dHRvbjpub3QoOmRpc2FibGVkKTpub3QoLnAtdG9nZ2xlYnV0dG9uLWNoZWNrZWQpOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAke2R0KCd0b2dnbGVidXR0b24uaG92ZXIuYmFja2dyb3VuZCcpfTtcbiAgICBjb2xvcjogJHtkdCgndG9nZ2xlYnV0dG9uLmhvdmVyLmNvbG9yJyl9O1xufVxuXG4ucC10b2dnbGVidXR0b24ucC10b2dnbGVidXR0b24tY2hlY2tlZCB7XG4gICAgYmFja2dyb3VuZDogJHtkdCgndG9nZ2xlYnV0dG9uLmNoZWNrZWQuYmFja2dyb3VuZCcpfTtcbiAgICBib3JkZXItY29sb3I6ICR7ZHQoJ3RvZ2dsZWJ1dHRvbi5jaGVja2VkLmJvcmRlci5jb2xvcicpfTtcbiAgICBjb2xvcjogJHtkdCgndG9nZ2xlYnV0dG9uLmNoZWNrZWQuY29sb3InKX07XG59XG5cbi5wLXRvZ2dsZWJ1dHRvbjpmb2N1cy12aXNpYmxlIHtcbiAgICBib3gtc2hhZG93OiAke2R0KCd0b2dnbGVidXR0b24uZm9jdXMucmluZy5zaGFkb3cnKX07XG4gICAgb3V0bGluZTogJHtkdCgndG9nZ2xlYnV0dG9uLmZvY3VzLnJpbmcud2lkdGgnKX0gJHtkdCgndG9nZ2xlYnV0dG9uLmZvY3VzLnJpbmcuc3R5bGUnKX0gJHtkdCgndG9nZ2xlYnV0dG9uLmZvY3VzLnJpbmcuY29sb3InKX07XG4gICAgb3V0bGluZS1vZmZzZXQ6ICR7ZHQoJ3RvZ2dsZWJ1dHRvbi5mb2N1cy5yaW5nLm9mZnNldCcpfTtcbn1cblxuLnAtdG9nZ2xlYnV0dG9uLnAtaW52YWxpZCB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2R0KCd0b2dnbGVidXR0b24uaW52YWxpZC5ib3JkZXIuY29sb3InKX07XG59XG5cbi5wLXRvZ2dsZWJ1dHRvbjpkaXNhYmxlZCB7XG4gICAgb3BhY2l0eTogMTtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgYmFja2dyb3VuZDogJHtkdCgndG9nZ2xlYnV0dG9uLmRpc2FibGVkLmJhY2tncm91bmQnKX07XG4gICAgYm9yZGVyLWNvbG9yOiAke2R0KCd0b2dnbGVidXR0b24uZGlzYWJsZWQuYm9yZGVyLmNvbG9yJyl9O1xuICAgIGNvbG9yOiAke2R0KCd0b2dnbGVidXR0b24uZGlzYWJsZWQuY29sb3InKX07XG59XG5cbi5wLXRvZ2dsZWJ1dHRvbi1pY29uIHtcbiAgICBjb2xvcjogJHtkdCgndG9nZ2xlYnV0dG9uLmljb24uY29sb3InKX07XG59XG5cbi5wLXRvZ2dsZWJ1dHRvbjpub3QoOmRpc2FibGVkKTpub3QoLnAtdG9nZ2xlYnV0dG9uLWNoZWNrZWQpOmhvdmVyIC5wLXRvZ2dsZWJ1dHRvbi1pY29uIHtcbiAgICBjb2xvcjogJHtkdCgndG9nZ2xlYnV0dG9uLmljb24uaG92ZXIuY29sb3InKX07XG59XG5cbi5wLXRvZ2dsZWJ1dHRvbi5wLXRvZ2dsZWJ1dHRvbi1jaGVja2VkIC5wLXRvZ2dsZWJ1dHRvbi1pY29uIHtcbiAgICBjb2xvcjogJHtkdCgndG9nZ2xlYnV0dG9uLmljb24uY2hlY2tlZC5jb2xvcicpfTtcbn1cblxuLnAtdG9nZ2xlYnV0dG9uOmRpc2FibGVkIC5wLXRvZ2dsZWJ1dHRvbi1pY29uIHtcbiAgICBjb2xvcjogJHtkdCgndG9nZ2xlYnV0dG9uLmljb24uZGlzYWJsZWQuY29sb3InKX07XG59XG5cbi5wLXRvZ2dsZWJ1dHRvbi1zbSB7XG4gICAgcGFkZGluZzogJHtkdCgndG9nZ2xlYnV0dG9uLnNtLnBhZGRpbmcnKX07XG4gICAgZm9udC1zaXplOiAke2R0KCd0b2dnbGVidXR0b24uc20uZm9udC5zaXplJyl9O1xufVxuXG4ucC10b2dnbGVidXR0b24tbGcge1xuICAgIHBhZGRpbmc6ICR7ZHQoJ3RvZ2dsZWJ1dHRvbi5sZy5wYWRkaW5nJyl9O1xuICAgIGZvbnQtc2l6ZTogJHtkdCgndG9nZ2xlYnV0dG9uLmxnLmZvbnQuc2l6ZScpfTtcbn1cblxuLyogRm9yIFByaW1lTkcgKGljb25Qb3MpICovXG5cbi5wLXRvZ2dsZWJ1dHRvbi1pY29uLXJpZ2h0IHtcbiAgICBvcmRlcjogMTtcbn1cblxucC10b2dnbGVidXR0b24ubmctaW52YWxpZC5uZy1kaXJ0eSA+IC5wLXRvZ2dsZWJ1dHRvbiB7XG4gICAgYm9yZGVyLWNvbG9yOiAke2R0KCd0b2dnbGVidXR0b24uaW52YWxpZC5ib3JkZXIuY29sb3InKX07XG59XG5gO1xuXG5jb25zdCBjbGFzc2VzID0ge1xuICAgIHJvb3Q6ICh7IGluc3RhbmNlIH0pID0+ICh7XG4gICAgICAgICdwLXRvZ2dsZWJ1dHRvbiBwLWNvbXBvbmVudCc6IHRydWUsXG4gICAgICAgICdwLXRvZ2dsZWJ1dHRvbi1jaGVja2VkJzogaW5zdGFuY2UuY2hlY2tlZCxcbiAgICAgICAgJ3AtZGlzYWJsZWQnOiBpbnN0YW5jZS5kaXNhYmxlZCxcbiAgICAgICAgJ3AtdG9nZ2xlYnV0dG9uLXNtIHAtaW5wdXRmaWVsZC1zbSc6IGluc3RhbmNlLnNpemUgPT09ICdzbWFsbCcsXG4gICAgICAgICdwLXRvZ2dsZWJ1dHRvbi1sZyBwLWlucHV0ZmllbGQtbGcnOiBpbnN0YW5jZS5zaXplID09PSAnbGFyZ2UnXG4gICAgfSksXG4gICAgY29udGVudDogJ3AtdG9nZ2xlYnV0dG9uLWNvbnRlbnQnLFxuICAgIGljb246ICdwLXRvZ2dsZWJ1dHRvbi1pY29uJyxcbiAgICBsYWJlbDogJ3AtdG9nZ2xlYnV0dG9uLWxhYmVsJ1xufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRvZ2dsZUJ1dHRvblN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHtcbiAgICBuYW1lID0gJ3RvZ2dsZWJ1dHRvbic7XG5cbiAgICB0aGVtZSA9IHRoZW1lO1xuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXM7XG59XG5cbi8qKlxuICpcbiAqIFRvZ2dsZUJ1dHRvbiBpcyB1c2VkIHRvIHNlbGVjdCBhIGJvb2xlYW4gdmFsdWUgdXNpbmcgYSBidXR0b24uXG4gKlxuICogW0xpdmUgRGVtb10oaHR0cHM6Ly93d3cucHJpbWVuZy5vcmcvdG9nZ2xlYnV0dG9uLylcbiAqXG4gKiBAbW9kdWxlIHRvZ2dsZWJ1dHRvbnN0eWxlXG4gKlxuICovXG5leHBvcnQgZW51bSBUb2dnbGVCdXR0b25DbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICByb290ID0gJ3AtdG9nZ2xlYnV0dG9uJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBpY29uIGVsZW1lbnRcbiAgICAgKi9cbiAgICBpY29uID0gJ3AtdG9nZ2xlYnV0dG9uLWljb24nLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGxhYmVsIGVsZW1lbnRcbiAgICAgKi9cbiAgICBsYWJlbCA9ICdwLXRvZ2dsZWJ1dHRvbi1sYWJlbCdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb2dnbGVCdXR0b25TdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19