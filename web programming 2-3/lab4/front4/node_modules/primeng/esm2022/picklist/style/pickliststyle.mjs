import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-picklist {
    display: flex;
    gap: ${dt('picklist.gap')};
}

.p-picklist-controls {
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: ${dt('picklist.controls.gap')};
}

.p-picklist-list-container {
    flex: 1 1 50%;
}

.p-picklist .p-listbox {
    height: 100%;
}
`;
const classes = {
    root: 'p-picklist p-component',
    sourceControls: 'p-picklist-controls p-picklist-source-controls',
    sourceListContainer: 'p-picklist-list-container p-picklist-source-list-container',
    transferControls: 'p-picklist-controls p-picklist-transfer-controls',
    targetListContainer: 'p-picklist-list-container p-picklist-target-list-container',
    targetControls: 'p-picklist-controls p-picklist-target-controls'
};
export class PickListStyle extends BaseStyle {
    name = 'picklist';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵPickListStyle_BaseFactory; return function PickListStyle_Factory(__ngFactoryType__) { return (ɵPickListStyle_BaseFactory || (ɵPickListStyle_BaseFactory = i0.ɵɵgetInheritedFactory(PickListStyle)))(__ngFactoryType__ || PickListStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PickListStyle, factory: PickListStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PickListStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * PickList is used to reorder items between different lists.
 *
 * [Live Demo](https://www.primeng.org/picklist)
 *
 * @module pickliststyle
 *
 */
export var PickListClasses;
(function (PickListClasses) {
    /**
     * Class name of the root element
     */
    PickListClasses["root"] = "p-picklist";
    /**
     * Class name of the source controls element
     */
    PickListClasses["sourceControls"] = "p-picklist-source-controls";
    /**
     * Class name of the source list container element
     */
    PickListClasses["sourceListContainer"] = "p-picklist-source-list-container";
    /**
     * Class name of the transfer controls element
     */
    PickListClasses["transferControls"] = "p-picklist-transfer-controls";
    /**
     * Class name of the target list container element
     */
    PickListClasses["targetListContainer"] = "p-picklist-target-list-container";
    /**
     * Class name of the target controls element
     */
    PickListClasses["targetControls"] = "p-picklist-target-controls";
})(PickListClasses || (PickListClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja2xpc3RzdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9waWNrbGlzdC9zdHlsZS9waWNrbGlzdHN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7O1dBR2YsRUFBRSxDQUFDLGNBQWMsQ0FBQzs7Ozs7OztXQU9sQixFQUFFLENBQUMsdUJBQXVCLENBQUM7Ozs7Ozs7Ozs7Q0FVckMsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHO0lBQ1osSUFBSSxFQUFFLHdCQUF3QjtJQUM5QixjQUFjLEVBQUUsZ0RBQWdEO0lBQ2hFLG1CQUFtQixFQUFFLDREQUE0RDtJQUNqRixnQkFBZ0IsRUFBRSxrREFBa0Q7SUFDcEUsbUJBQW1CLEVBQUUsNERBQTREO0lBQ2pGLGNBQWMsRUFBRSxnREFBZ0Q7Q0FDbkUsQ0FBQztBQUdGLE1BQU0sT0FBTyxhQUFjLFNBQVEsU0FBUztJQUN4QyxJQUFJLEdBQUcsVUFBVSxDQUFDO0lBRWxCLEtBQUssR0FBRyxLQUFLLENBQUM7SUFFZCxPQUFPLEdBQUcsT0FBTyxDQUFDO2lPQUxULGFBQWEseUJBQWIsYUFBYTtnRUFBYixhQUFhLFdBQWIsYUFBYTs7aUZBQWIsYUFBYTtjQUR6QixVQUFVOztBQVNYOzs7Ozs7OztHQVFHO0FBRUgsTUFBTSxDQUFOLElBQVksZUF5Qlg7QUF6QkQsV0FBWSxlQUFlO0lBQ3ZCOztPQUVHO0lBQ0gsc0NBQW1CLENBQUE7SUFDbkI7O09BRUc7SUFDSCxnRUFBNkMsQ0FBQTtJQUM3Qzs7T0FFRztJQUNILDJFQUF3RCxDQUFBO0lBQ3hEOztPQUVHO0lBQ0gsb0VBQWlELENBQUE7SUFDakQ7O09BRUc7SUFDSCwyRUFBd0QsQ0FBQTtJQUN4RDs7T0FFRztJQUNILGdFQUE2QyxDQUFBO0FBQ2pELENBQUMsRUF6QlcsZUFBZSxLQUFmLGVBQWUsUUF5QjFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC1waWNrbGlzdCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6ICR7ZHQoJ3BpY2tsaXN0LmdhcCcpfTtcbn1cblxuLnAtcGlja2xpc3QtY29udHJvbHMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBnYXA6ICR7ZHQoJ3BpY2tsaXN0LmNvbnRyb2xzLmdhcCcpfTtcbn1cblxuLnAtcGlja2xpc3QtbGlzdC1jb250YWluZXIge1xuICAgIGZsZXg6IDEgMSA1MCU7XG59XG5cbi5wLXBpY2tsaXN0IC5wLWxpc3Rib3gge1xuICAgIGhlaWdodDogMTAwJTtcbn1cbmA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogJ3AtcGlja2xpc3QgcC1jb21wb25lbnQnLFxuICAgIHNvdXJjZUNvbnRyb2xzOiAncC1waWNrbGlzdC1jb250cm9scyBwLXBpY2tsaXN0LXNvdXJjZS1jb250cm9scycsXG4gICAgc291cmNlTGlzdENvbnRhaW5lcjogJ3AtcGlja2xpc3QtbGlzdC1jb250YWluZXIgcC1waWNrbGlzdC1zb3VyY2UtbGlzdC1jb250YWluZXInLFxuICAgIHRyYW5zZmVyQ29udHJvbHM6ICdwLXBpY2tsaXN0LWNvbnRyb2xzIHAtcGlja2xpc3QtdHJhbnNmZXItY29udHJvbHMnLFxuICAgIHRhcmdldExpc3RDb250YWluZXI6ICdwLXBpY2tsaXN0LWxpc3QtY29udGFpbmVyIHAtcGlja2xpc3QtdGFyZ2V0LWxpc3QtY29udGFpbmVyJyxcbiAgICB0YXJnZXRDb250cm9sczogJ3AtcGlja2xpc3QtY29udHJvbHMgcC1waWNrbGlzdC10YXJnZXQtY29udHJvbHMnXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGlja0xpc3RTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICdwaWNrbGlzdCc7XG5cbiAgICB0aGVtZSA9IHRoZW1lO1xuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXM7XG59XG5cbi8qKlxuICpcbiAqIFBpY2tMaXN0IGlzIHVzZWQgdG8gcmVvcmRlciBpdGVtcyBiZXR3ZWVuIGRpZmZlcmVudCBsaXN0cy5cbiAqXG4gKiBbTGl2ZSBEZW1vXShodHRwczovL3d3dy5wcmltZW5nLm9yZy9waWNrbGlzdClcbiAqXG4gKiBAbW9kdWxlIHBpY2tsaXN0c3R5bGVcbiAqXG4gKi9cblxuZXhwb3J0IGVudW0gUGlja0xpc3RDbGFzc2VzIHtcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICByb290ID0gJ3AtcGlja2xpc3QnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHNvdXJjZSBjb250cm9scyBlbGVtZW50XG4gICAgICovXG4gICAgc291cmNlQ29udHJvbHMgPSAncC1waWNrbGlzdC1zb3VyY2UtY29udHJvbHMnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHNvdXJjZSBsaXN0IGNvbnRhaW5lciBlbGVtZW50XG4gICAgICovXG4gICAgc291cmNlTGlzdENvbnRhaW5lciA9ICdwLXBpY2tsaXN0LXNvdXJjZS1saXN0LWNvbnRhaW5lcicsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgdHJhbnNmZXIgY29udHJvbHMgZWxlbWVudFxuICAgICAqL1xuICAgIHRyYW5zZmVyQ29udHJvbHMgPSAncC1waWNrbGlzdC10cmFuc2Zlci1jb250cm9scycsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgdGFyZ2V0IGxpc3QgY29udGFpbmVyIGVsZW1lbnRcbiAgICAgKi9cbiAgICB0YXJnZXRMaXN0Q29udGFpbmVyID0gJ3AtcGlja2xpc3QtdGFyZ2V0LWxpc3QtY29udGFpbmVyJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSB0YXJnZXQgY29udHJvbHMgZWxlbWVudFxuICAgICAqL1xuICAgIHRhcmdldENvbnRyb2xzID0gJ3AtcGlja2xpc3QtdGFyZ2V0LWNvbnRyb2xzJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBpY2tMaXN0U3R5bGUgZXh0ZW5kcyBCYXNlU3R5bGUge31cbiJdfQ==