import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-terminal {
    height: ${dt('terminal.height')};
    overflow: auto;
    background: ${dt('terminal.background')};
    color: ${dt('terminal.color')};
    border: 1px solid ${dt('terminal.border.color')};
    padding: ${dt('terminal.padding')};
    border-radius: ${dt('terminal.border.radius')};
}

.p-terminal-prompt {
    display: flex;
    align-items: center;
}

.p-terminal-prompt-value {
    flex: 1 1 auto;
    border: 0 none;
    background: transparent;
    color: inherit;
    padding: 0;
    outline: 0 none;
    font-family: inherit;
    font-feature-settings: inherit;
    font-size: 1rem;
}

.p-terminal-prompt-label {
    margin-inline-end: ${dt('terminal.prompt.gap')};
}

.p-terminal-input::-ms-clear {
    display: none;
}

.p-terminal-command-response {
    margin: ${dt('terminal.command.response.margin')};
}
`;
const classes = {
    root: 'p-terminal p-component',
    welcomeMessage: 'p-terminal-welcome-message',
    commandList: 'p-terminal-command-list',
    command: 'p-terminal-command',
    commandValue: 'p-terminal-command-value',
    commandResponse: 'p-terminal-command-response',
    prompt: 'p-terminal-prompt',
    promptLabel: 'p-terminal-prompt-label',
    promptValue: 'p-terminal-prompt-value'
};
export class TerminalStyle extends BaseStyle {
    name = 'terminal';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵTerminalStyle_BaseFactory; return function TerminalStyle_Factory(__ngFactoryType__) { return (ɵTerminalStyle_BaseFactory || (ɵTerminalStyle_BaseFactory = i0.ɵɵgetInheritedFactory(TerminalStyle)))(__ngFactoryType__ || TerminalStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TerminalStyle, factory: TerminalStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TerminalStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Terminal is a text based user interface.
 *
 * [Live Demo](https://www.primeng.org/terminal)
 *
 * @module terminalstyle
 *
 */
export var TerminalClasses;
(function (TerminalClasses) {
    /**
     * Class name of the root element
     */
    TerminalClasses["root"] = "p-terminal";
    /**
     * Class name of the welcome message element
     */
    TerminalClasses["welcomeMessage"] = "p-terminal-welcome-message";
    /**
     * Class name of the command list element
     */
    TerminalClasses["commandList"] = "p-terminal-command-list";
    /**
     * Class name of the command element
     */
    TerminalClasses["command"] = "p-terminal-command";
    /**
     * Class name of the command value element
     */
    TerminalClasses["commandValue"] = "p-terminal-command-value";
    /**
     * Class name of the command response element
     */
    TerminalClasses["commandResponse"] = "p-terminal-command-response";
    /**
     * Class name of the prompt element
     */
    TerminalClasses["prompt"] = "p-terminal-prompt";
    /**
     * Class name of the prompt label element
     */
    TerminalClasses["promptLabel"] = "p-terminal-prompt-label";
    /**
     * Class name of the prompt value element
     */
    TerminalClasses["promptValue"] = "p-terminal-prompt-value";
})(TerminalClasses || (TerminalClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVybWluYWxzdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90ZXJtaW5hbC9zdHlsZS90ZXJtaW5hbHN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Y0FFWixFQUFFLENBQUMsaUJBQWlCLENBQUM7O2tCQUVqQixFQUFFLENBQUMscUJBQXFCLENBQUM7YUFDOUIsRUFBRSxDQUFDLGdCQUFnQixDQUFDO3dCQUNULEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztlQUNwQyxFQUFFLENBQUMsa0JBQWtCLENBQUM7cUJBQ2hCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQXFCeEIsRUFBRSxDQUFDLHFCQUFxQixDQUFDOzs7Ozs7OztjQVFwQyxFQUFFLENBQUMsa0NBQWtDLENBQUM7O0NBRW5ELENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRSx3QkFBd0I7SUFDOUIsY0FBYyxFQUFFLDRCQUE0QjtJQUM1QyxXQUFXLEVBQUUseUJBQXlCO0lBQ3RDLE9BQU8sRUFBRSxvQkFBb0I7SUFDN0IsWUFBWSxFQUFFLDBCQUEwQjtJQUN4QyxlQUFlLEVBQUUsNkJBQTZCO0lBQzlDLE1BQU0sRUFBRSxtQkFBbUI7SUFDM0IsV0FBVyxFQUFFLHlCQUF5QjtJQUN0QyxXQUFXLEVBQUUseUJBQXlCO0NBQ3pDLENBQUM7QUFHRixNQUFNLE9BQU8sYUFBYyxTQUFRLFNBQVM7SUFDeEMsSUFBSSxHQUFHLFVBQVUsQ0FBQztJQUVsQixLQUFLLEdBQUcsS0FBSyxDQUFDO0lBRWQsT0FBTyxHQUFHLE9BQU8sQ0FBQztpT0FMVCxhQUFhLHlCQUFiLGFBQWE7Z0VBQWIsYUFBYSxXQUFiLGFBQWE7O2lGQUFiLGFBQWE7Y0FEekIsVUFBVTs7QUFTWDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBTixJQUFZLGVBcUNYO0FBckNELFdBQVksZUFBZTtJQUN2Qjs7T0FFRztJQUNILHNDQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gsZ0VBQTZDLENBQUE7SUFDN0M7O09BRUc7SUFDSCwwREFBdUMsQ0FBQTtJQUN2Qzs7T0FFRztJQUNILGlEQUE4QixDQUFBO0lBQzlCOztPQUVHO0lBQ0gsNERBQXlDLENBQUE7SUFDekM7O09BRUc7SUFDSCxrRUFBK0MsQ0FBQTtJQUMvQzs7T0FFRztJQUNILCtDQUE0QixDQUFBO0lBQzVCOztPQUVHO0lBQ0gsMERBQXVDLENBQUE7SUFDdkM7O09BRUc7SUFDSCwwREFBdUMsQ0FBQTtBQUMzQyxDQUFDLEVBckNXLGVBQWUsS0FBZixlQUFlLFFBcUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VTdHlsZSB9IGZyb20gJ3ByaW1lbmcvYmFzZSc7XG5cbmNvbnN0IHRoZW1lID0gKHsgZHQgfSkgPT4gYFxuLnAtdGVybWluYWwge1xuICAgIGhlaWdodDogJHtkdCgndGVybWluYWwuaGVpZ2h0Jyl9O1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ3Rlcm1pbmFsLmJhY2tncm91bmQnKX07XG4gICAgY29sb3I6ICR7ZHQoJ3Rlcm1pbmFsLmNvbG9yJyl9O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICR7ZHQoJ3Rlcm1pbmFsLmJvcmRlci5jb2xvcicpfTtcbiAgICBwYWRkaW5nOiAke2R0KCd0ZXJtaW5hbC5wYWRkaW5nJyl9O1xuICAgIGJvcmRlci1yYWRpdXM6ICR7ZHQoJ3Rlcm1pbmFsLmJvcmRlci5yYWRpdXMnKX07XG59XG5cbi5wLXRlcm1pbmFsLXByb21wdCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4ucC10ZXJtaW5hbC1wcm9tcHQtdmFsdWUge1xuICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgIGJvcmRlcjogMCBub25lO1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIGNvbG9yOiBpbmhlcml0O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgb3V0bGluZTogMCBub25lO1xuICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAgIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogaW5oZXJpdDtcbiAgICBmb250LXNpemU6IDFyZW07XG59XG5cbi5wLXRlcm1pbmFsLXByb21wdC1sYWJlbCB7XG4gICAgbWFyZ2luLWlubGluZS1lbmQ6ICR7ZHQoJ3Rlcm1pbmFsLnByb21wdC5nYXAnKX07XG59XG5cbi5wLXRlcm1pbmFsLWlucHV0OjotbXMtY2xlYXIge1xuICAgIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5wLXRlcm1pbmFsLWNvbW1hbmQtcmVzcG9uc2Uge1xuICAgIG1hcmdpbjogJHtkdCgndGVybWluYWwuY29tbWFuZC5yZXNwb25zZS5tYXJnaW4nKX07XG59XG5gO1xuXG5jb25zdCBjbGFzc2VzID0ge1xuICAgIHJvb3Q6ICdwLXRlcm1pbmFsIHAtY29tcG9uZW50JyxcbiAgICB3ZWxjb21lTWVzc2FnZTogJ3AtdGVybWluYWwtd2VsY29tZS1tZXNzYWdlJyxcbiAgICBjb21tYW5kTGlzdDogJ3AtdGVybWluYWwtY29tbWFuZC1saXN0JyxcbiAgICBjb21tYW5kOiAncC10ZXJtaW5hbC1jb21tYW5kJyxcbiAgICBjb21tYW5kVmFsdWU6ICdwLXRlcm1pbmFsLWNvbW1hbmQtdmFsdWUnLFxuICAgIGNvbW1hbmRSZXNwb25zZTogJ3AtdGVybWluYWwtY29tbWFuZC1yZXNwb25zZScsXG4gICAgcHJvbXB0OiAncC10ZXJtaW5hbC1wcm9tcHQnLFxuICAgIHByb21wdExhYmVsOiAncC10ZXJtaW5hbC1wcm9tcHQtbGFiZWwnLFxuICAgIHByb21wdFZhbHVlOiAncC10ZXJtaW5hbC1wcm9tcHQtdmFsdWUnXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGVybWluYWxTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7XG4gICAgbmFtZSA9ICd0ZXJtaW5hbCc7XG5cbiAgICB0aGVtZSA9IHRoZW1lO1xuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXM7XG59XG5cbi8qKlxuICpcbiAqIFRlcm1pbmFsIGlzIGEgdGV4dCBiYXNlZCB1c2VyIGludGVyZmFjZS5cbiAqXG4gKiBbTGl2ZSBEZW1vXShodHRwczovL3d3dy5wcmltZW5nLm9yZy90ZXJtaW5hbClcbiAqXG4gKiBAbW9kdWxlIHRlcm1pbmFsc3R5bGVcbiAqXG4gKi9cbmV4cG9ydCBlbnVtIFRlcm1pbmFsQ2xhc3NlcyB7XG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50XG4gICAgICovXG4gICAgcm9vdCA9ICdwLXRlcm1pbmFsJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSB3ZWxjb21lIG1lc3NhZ2UgZWxlbWVudFxuICAgICAqL1xuICAgIHdlbGNvbWVNZXNzYWdlID0gJ3AtdGVybWluYWwtd2VsY29tZS1tZXNzYWdlJyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBjb21tYW5kIGxpc3QgZWxlbWVudFxuICAgICAqL1xuICAgIGNvbW1hbmRMaXN0ID0gJ3AtdGVybWluYWwtY29tbWFuZC1saXN0JyxcbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIG9mIHRoZSBjb21tYW5kIGVsZW1lbnRcbiAgICAgKi9cbiAgICBjb21tYW5kID0gJ3AtdGVybWluYWwtY29tbWFuZCcsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgY29tbWFuZCB2YWx1ZSBlbGVtZW50XG4gICAgICovXG4gICAgY29tbWFuZFZhbHVlID0gJ3AtdGVybWluYWwtY29tbWFuZC12YWx1ZScsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgY29tbWFuZCByZXNwb25zZSBlbGVtZW50XG4gICAgICovXG4gICAgY29tbWFuZFJlc3BvbnNlID0gJ3AtdGVybWluYWwtY29tbWFuZC1yZXNwb25zZScsXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgcHJvbXB0IGVsZW1lbnRcbiAgICAgKi9cbiAgICBwcm9tcHQgPSAncC10ZXJtaW5hbC1wcm9tcHQnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHByb21wdCBsYWJlbCBlbGVtZW50XG4gICAgICovXG4gICAgcHJvbXB0TGFiZWwgPSAncC10ZXJtaW5hbC1wcm9tcHQtbGFiZWwnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHByb21wdCB2YWx1ZSBlbGVtZW50XG4gICAgICovXG4gICAgcHJvbXB0VmFsdWUgPSAncC10ZXJtaW5hbC1wcm9tcHQtdmFsdWUnXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVybWluYWxTdHlsZSBleHRlbmRzIEJhc2VTdHlsZSB7fVxuIl19