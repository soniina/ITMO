import { CommonModule, isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, computed, ContentChild, effect, forwardRef, inject, signal, ViewChild, ViewEncapsulation } from '@angular/core';
import { findSingle, getHeight, getOffset, getOuterWidth, getWidth, isRTL } from '@primeuix/utils';
import { SharedModule } from 'primeng/api';
import { BaseComponent } from 'primeng/basecomponent';
import { ChevronLeftIcon, ChevronRightIcon } from 'primeng/icons';
import { RippleModule } from 'primeng/ripple';
import { Tabs } from './tabs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "primeng/ripple";
const _c0 = ["previcon"];
const _c1 = ["nexticon"];
const _c2 = ["content"];
const _c3 = ["prevButton"];
const _c4 = ["nextButton"];
const _c5 = ["inkbar"];
const _c6 = ["tabs"];
const _c7 = ["*"];
const _c8 = a0 => ({ "p-tablist-viewport": a0 });
function TabList_Conditional_0_Conditional_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TabList_Conditional_0_Conditional_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TabList_Conditional_0_Conditional_2_ng_container_0_Template, 1, 0, "ng-container", 11);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.prevIconTemplate);
} }
function TabList_Conditional_0_Conditional_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ChevronLeftIcon");
} }
function TabList_Conditional_0_Template(rf, ctx) { if (rf & 1) {
    const _r2 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 10, 3);
    i0.ɵɵlistener("click", function TabList_Conditional_0_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r2); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.onPrevButtonClick()); });
    i0.ɵɵtemplate(2, TabList_Conditional_0_Conditional_2_Template, 1, 1, "ng-container")(3, TabList_Conditional_0_Conditional_3_Template, 1, 0, "ChevronLeftIcon");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵattribute("aria-label", ctx_r2.prevButtonAriaLabel)("tabindex", ctx_r2.tabindex)("data-pc-group-section", "navigator");
    i0.ɵɵadvance(2);
    i0.ɵɵconditional(ctx_r2.prevIconTemplate ? 2 : 3);
} }
function TabList_Conditional_8_Conditional_2_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function TabList_Conditional_8_Conditional_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, TabList_Conditional_8_Conditional_2_ng_container_0_Template, 1, 0, "ng-container", 11);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r2.nextIconTemplate);
} }
function TabList_Conditional_8_Conditional_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "ChevronRightIcon");
} }
function TabList_Conditional_8_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 12, 4);
    i0.ɵɵlistener("click", function TabList_Conditional_8_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r4); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.onNextButtonClick()); });
    i0.ɵɵtemplate(2, TabList_Conditional_8_Conditional_2_Template, 1, 1, "ng-container")(3, TabList_Conditional_8_Conditional_3_Template, 1, 0, "ChevronRightIcon");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵattribute("aria-label", ctx_r2.nextButtonAriaLabel)("tabindex", ctx_r2.tabindex)("data-pc-group-section", "navigator");
    i0.ɵɵadvance(2);
    i0.ɵɵconditional(ctx_r2.nextIconTemplate ? 2 : 3);
} }
/**
 * TabList is a helper component for Tabs component.
 * @group Components
 */
export class TabList extends BaseComponent {
    /**
     * A template reference variable that represents the previous icon in a UI component.
     * @type {TemplateRef<any> | undefined}
     * @group Templates
     */
    prevIconTemplate;
    /**
     * A template reference variable that represents the next icon in a UI component.
     * @type {TemplateRef<any> | undefined}
     * @group Templates
     */
    nextIconTemplate;
    content;
    prevButton;
    nextButton;
    inkbar;
    tabs;
    pcTabs = inject(forwardRef(() => Tabs));
    isPrevButtonEnabled = signal(false);
    isNextButtonEnabled = signal(false);
    resizeObserver;
    showNavigators = computed(() => this.pcTabs.showNavigators());
    tabindex = computed(() => this.pcTabs.tabindex());
    scrollable = computed(() => this.pcTabs.scrollable());
    constructor() {
        super();
        effect(() => {
            this.pcTabs.value();
            if (isPlatformBrowser(this.platformId)) {
                setTimeout(() => {
                    this.updateInkBar();
                });
            }
        });
    }
    get prevButtonAriaLabel() {
        return this.config.translation.aria.previous;
    }
    get nextButtonAriaLabel() {
        return this.config.translation.aria.next;
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.showNavigators() && isPlatformBrowser(this.platformId)) {
            this.updateButtonState();
            this.bindResizeObserver();
        }
    }
    ngAfterContentInit() {
        this.templates.forEach((t) => {
            switch (t.getType()) {
                case 'previcon':
                    this.prevIconTemplate = t.template;
                    break;
                case 'nexticon':
                    this.nextIconTemplate = t.template;
                    break;
            }
        });
    }
    ngOnDestroy() {
        this.unbindResizeObserver();
        super.ngOnDestroy();
    }
    onScroll(event) {
        this.showNavigators() && this.updateButtonState();
        event.preventDefault();
    }
    onPrevButtonClick() {
        const _content = this.content.nativeElement;
        const width = getWidth(_content);
        const pos = Math.abs(_content.scrollLeft) - width;
        const scrollLeft = pos <= 0 ? 0 : pos;
        _content.scrollLeft = isRTL(_content) ? -1 * scrollLeft : scrollLeft;
    }
    onNextButtonClick() {
        const _content = this.content.nativeElement;
        const width = getWidth(_content) - this.getVisibleButtonWidths();
        const pos = _content.scrollLeft + width;
        const lastPos = _content.scrollWidth - width;
        const scrollLeft = pos >= lastPos ? lastPos : pos;
        _content.scrollLeft = isRTL(_content) ? -1 * scrollLeft : scrollLeft;
    }
    updateButtonState() {
        const _content = this.content?.nativeElement;
        const _list = this.el?.nativeElement;
        const { scrollTop, scrollWidth, scrollHeight, offsetWidth, offsetHeight } = _content;
        const scrollLeft = Math.abs(_content.scrollLeft);
        const [width, height] = [getWidth(_content), getHeight(_content)];
        this.isPrevButtonEnabled.set(scrollLeft !== 0);
        this.isNextButtonEnabled.set(_list.offsetWidth >= offsetWidth && scrollLeft !== scrollWidth - width);
    }
    updateInkBar() {
        const _content = this.content.nativeElement;
        const _inkbar = this.inkbar.nativeElement;
        const _tabs = this.tabs.nativeElement;
        const activeTab = findSingle(_content, '[data-pc-name="tab"][data-p-active="true"]');
        _inkbar.style.width = getOuterWidth(activeTab) + 'px';
        _inkbar.style.left = getOffset(activeTab).left - getOffset(_tabs).left + 'px';
    }
    getVisibleButtonWidths() {
        const _prevBtn = this.prevButton?.nativeElement;
        const _nextBtn = this.nextButton?.nativeElement;
        return [_prevBtn, _nextBtn].reduce((acc, el) => (el ? acc + getWidth(el) : acc), 0);
    }
    bindResizeObserver() {
        this.resizeObserver = new ResizeObserver(() => this.updateButtonState());
        this.resizeObserver.observe(this.el.nativeElement);
    }
    unbindResizeObserver() {
        if (this.resizeObserver) {
            this.resizeObserver.unobserve(this.el.nativeElement);
            this.resizeObserver = null;
        }
    }
    static ɵfac = function TabList_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || TabList)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TabList, selectors: [["p-tablist"]], contentQueries: function TabList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            i0.ɵɵcontentQuery(dirIndex, _c0, 5);
            i0.ɵɵcontentQuery(dirIndex, _c1, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.prevIconTemplate = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nextIconTemplate = _t.first);
        } }, viewQuery: function TabList_Query(rf, ctx) { if (rf & 1) {
            i0.ɵɵviewQuery(_c2, 5);
            i0.ɵɵviewQuery(_c3, 5);
            i0.ɵɵviewQuery(_c4, 5);
            i0.ɵɵviewQuery(_c5, 5);
            i0.ɵɵviewQuery(_c6, 5);
        } if (rf & 2) {
            let _t;
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.prevButton = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nextButton = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inkbar = _t.first);
            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabs = _t.first);
        } }, hostVars: 5, hostBindings: function TabList_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("data-pc-name", "tablist");
            i0.ɵɵclassProp("p-tablist", true)("p-component", true);
        } }, standalone: true, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature], ngContentSelectors: _c7, decls: 9, vars: 6, consts: [["content", ""], ["tabs", ""], ["inkbar", ""], ["prevButton", ""], ["nextButton", ""], ["pRipple", "", 1, "p-tablist-nav-button", "p-tablist-prev-button"], [1, "p-tablist-content", 3, "scroll", "ngClass"], ["role", "tablist", 1, "p-tablist-tab-list"], ["role", "presentation", 1, "p-tablist-active-bar"], ["pRipple", "", 1, "p-tablist-nav-button", "p-tablist-next-button"], ["pRipple", "", 1, "p-tablist-nav-button", "p-tablist-prev-button", 3, "click"], [4, "ngTemplateOutlet"], ["pRipple", "", 1, "p-tablist-nav-button", "p-tablist-next-button", 3, "click"]], template: function TabList_Template(rf, ctx) { if (rf & 1) {
            const _r1 = i0.ɵɵgetCurrentView();
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, TabList_Conditional_0_Template, 4, 4, "button", 5);
            i0.ɵɵelementStart(1, "div", 6, 0);
            i0.ɵɵlistener("scroll", function TabList_Template_div_scroll_1_listener($event) { i0.ɵɵrestoreView(_r1); return i0.ɵɵresetView(ctx.onScroll($event)); });
            i0.ɵɵelementStart(3, "div", 7, 1);
            i0.ɵɵprojection(5);
            i0.ɵɵelement(6, "span", 8, 2);
            i0.ɵɵelementEnd()();
            i0.ɵɵtemplate(8, TabList_Conditional_8_Template, 4, 4, "button", 9);
        } if (rf & 2) {
            i0.ɵɵconditional(ctx.showNavigators() && ctx.isPrevButtonEnabled() ? 0 : -1);
            i0.ɵɵadvance();
            i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(4, _c8, ctx.scrollable()));
            i0.ɵɵadvance(5);
            i0.ɵɵattribute("data-pc-section", "inkbar");
            i0.ɵɵadvance(2);
            i0.ɵɵconditional(ctx.showNavigators() && ctx.isNextButtonEnabled() ? 8 : -1);
        } }, dependencies: [CommonModule, i1.NgClass, i1.NgTemplateOutlet, ChevronLeftIcon, ChevronRightIcon, RippleModule, i2.Ripple, SharedModule], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TabList, [{
        type: Component,
        args: [{
                selector: 'p-tablist',
                standalone: true,
                imports: [CommonModule, ChevronLeftIcon, ChevronRightIcon, RippleModule, SharedModule],
                template: `
        @if (showNavigators() && isPrevButtonEnabled()) {
            <button #prevButton pRipple class="p-tablist-nav-button p-tablist-prev-button" [attr.aria-label]="prevButtonAriaLabel" [attr.tabindex]="tabindex" [attr.data-pc-group-section]="'navigator'" (click)="onPrevButtonClick()">
                @if (prevIconTemplate) {
                    <ng-container *ngTemplateOutlet="prevIconTemplate"></ng-container>
                } @else {
                    <ChevronLeftIcon />
                }
            </button>
        }
        <div #content class="p-tablist-content" [ngClass]="{ 'p-tablist-viewport': scrollable() }" (scroll)="onScroll($event)">
            <div #tabs class="p-tablist-tab-list" role="tablist">
                <ng-content></ng-content>
                <span #inkbar role="presentation" class="p-tablist-active-bar" [attr.data-pc-section]="'inkbar'"></span>
            </div>
        </div>
        @if (showNavigators() && isNextButtonEnabled()) {
            <button #nextButton pRipple class="p-tablist-nav-button p-tablist-next-button" [attr.aria-label]="nextButtonAriaLabel" [attr.tabindex]="tabindex" [attr.data-pc-group-section]="'navigator'" (click)="onNextButtonClick()">
                @if (nextIconTemplate) {
                    <ng-container *ngTemplateOutlet="nextIconTemplate"></ng-container>
                } @else {
                    <ChevronRightIcon />
                }
            </button>
        }
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.p-tablist]': 'true',
                    '[class.p-component]': 'true',
                    '[attr.data-pc-name]': '"tablist"'
                }
            }]
    }], () => [], { prevIconTemplate: [{
            type: ContentChild,
            args: ['previcon']
        }], nextIconTemplate: [{
            type: ContentChild,
            args: ['nexticon']
        }], content: [{
            type: ViewChild,
            args: ['content']
        }], prevButton: [{
            type: ViewChild,
            args: ['prevButton']
        }], nextButton: [{
            type: ViewChild,
            args: ['nextButton']
        }], inkbar: [{
            type: ViewChild,
            args: ['inkbar']
        }], tabs: [{
            type: ViewChild,
            args: ['tabs']
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(TabList, { className: "TabList" }); })();
//# sourceMappingURL=data:application/json;base64,