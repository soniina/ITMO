import { CommonModule } from '@angular/common';
import { booleanAttribute, ChangeDetectionStrategy, Component, inject, input, model, NgModule, numberAttribute, signal, ViewEncapsulation } from '@angular/core';
import { uuid } from '@primeuix/utils';
import { BaseComponent } from 'primeng/basecomponent';
import { TabsStyle } from './style/tabsstyle';
import { Tab } from './tab';
import { TabList } from './tablist';
import { TabPanel } from './tabpanel';
import { TabPanels } from './tabpanels';
import * as i0 from "@angular/core";
const _c0 = ["*"];
/**
 * Tabs facilitates seamless switching between different views.
 * @group Components
 */
export class Tabs extends BaseComponent {
    /**
     * Value of the active tab.
     * @defaultValue undefined
     * @group Props
     */
    value = model(undefined);
    /**
     * When specified, enables horizontal and/or vertical scrolling.
     * @type boolean
     * @defaultValue false
     * @group Props
     */
    scrollable = input(false, { transform: booleanAttribute });
    /**
     * When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css.
     * @type boolean
     * @defaultValue false
     * @group Props
     */
    lazy = input(false, { transform: booleanAttribute });
    /**
     * When enabled, the focused tab is activated.
     * @type boolean
     * @defaultValue false
     * @group Props
     */
    selectOnFocus = input(false, { transform: booleanAttribute });
    /**
     * Whether to display navigation buttons in container when scrollable is enabled.
     * @type boolean
     * @defaultValue true
     * @group Props
     */
    showNavigators = input(true, { transform: booleanAttribute });
    /**
     * Tabindex of the tab buttons.
     * @type number
     * @defaultValue 0
     * @group Props
     */
    tabindex = input(0, { transform: numberAttribute });
    id = signal(uuid('pn_id_'));
    _componentStyle = inject(TabsStyle);
    updateValue(newValue) {
        this.value.update(() => newValue);
    }
    static ɵfac = /*@__PURE__*/ (() => { let ɵTabs_BaseFactory; return function Tabs_Factory(__ngFactoryType__) { return (ɵTabs_BaseFactory || (ɵTabs_BaseFactory = i0.ɵɵgetInheritedFactory(Tabs)))(__ngFactoryType__ || Tabs); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Tabs, selectors: [["p-tabs"]], hostVars: 8, hostBindings: function Tabs_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("data-pc-name", "tabs")("id", ctx.id);
            i0.ɵɵclassProp("p-tabs", true)("p-tabs-scrollable", ctx.scrollable())("p-component", true);
        } }, inputs: { value: [1, "value"], scrollable: [1, "scrollable"], lazy: [1, "lazy"], selectOnFocus: [1, "selectOnFocus"], showNavigators: [1, "showNavigators"], tabindex: [1, "tabindex"] }, outputs: { value: "valueChange" }, standalone: true, features: [i0.ɵɵProvidersFeature([TabsStyle]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function Tabs_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
        } }, dependencies: [CommonModule], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(Tabs, [{
        type: Component,
        args: [{
                selector: 'p-tabs',
                standalone: true,
                imports: [CommonModule],
                template: ` <ng-content></ng-content>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [TabsStyle],
                host: {
                    '[class.p-tabs]': 'true',
                    '[class.p-tabs-scrollable]': 'scrollable()',
                    '[class.p-component]': 'true',
                    '[attr.data-pc-name]': '"tabs"',
                    '[attr.id]': 'id'
                }
            }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(Tabs, { className: "Tabs" }); })();
export class TabsModule {
    static ɵfac = function TabsModule_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || TabsModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: TabsModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [Tabs, TabPanels, TabPanel, TabList, Tab] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TabsModule, [{
        type: NgModule,
        args: [{
                imports: [Tabs, TabPanels, TabPanel, TabList, Tab],
                exports: [Tabs, TabPanels, TabPanel, TabList, Tab]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(TabsModule, { imports: [Tabs, TabPanels, TabPanel, TabList, Tab], exports: [Tabs, TabPanels, TabPanel, TabList, Tab] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJzL3RhYnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakssT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUM1QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7O0FBRXhDOzs7R0FHRztBQWlCSCxNQUFNLE9BQU8sSUFBSyxTQUFRLGFBQWE7SUFDbkM7Ozs7T0FJRztJQUNILEtBQUssR0FBRyxLQUFLLENBQThCLFNBQVMsQ0FBQyxDQUFDO0lBQ3REOzs7OztPQUtHO0lBQ0gsVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzNEOzs7OztPQUtHO0lBQ0gsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ3JEOzs7OztPQUtHO0lBQ0gsYUFBYSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzlEOzs7OztPQUtHO0lBQ0gsY0FBYyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzlEOzs7OztPQUtHO0lBQ0gsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUVwRCxFQUFFLEdBQUcsTUFBTSxDQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRXBDLGVBQWUsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFcEMsV0FBVyxDQUFDLFFBQVE7UUFDaEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs2TEFqRFEsSUFBSSx5QkFBSixJQUFJOzZEQUFKLElBQUk7MkNBQUosTUFBTTtZQUFOLHlCQUFBLElBQUksQ0FBQSxzQkFBSixnQkFBWSxDQUFSLGdCQUFKLElBQUksQ0FBQTs2UkFURixDQUFDLFNBQVMsQ0FBQzs7WUFIVixrQkFBeUI7NEJBRDNCLFlBQVk7O2lGQWFiLElBQUk7Y0FoQmhCLFNBQVM7ZUFBQztnQkFDUCxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztnQkFDdkIsUUFBUSxFQUFFLDRCQUE0QjtnQkFDdEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUM7Z0JBQ3RCLElBQUksRUFBRTtvQkFDRixnQkFBZ0IsRUFBRSxNQUFNO29CQUN4QiwyQkFBMkIsRUFBRSxjQUFjO29CQUMzQyxxQkFBcUIsRUFBRSxNQUFNO29CQUM3QixxQkFBcUIsRUFBRSxRQUFRO29CQUMvQixXQUFXLEVBQUUsSUFBSTtpQkFDcEI7YUFDSjs7a0ZBQ1ksSUFBSTtBQXdEakIsTUFBTSxPQUFPLFVBQVU7b0dBQVYsVUFBVTs0REFBVixVQUFVO2dFQUhULElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHOztpRkFHeEMsVUFBVTtjQUp0QixRQUFRO2VBQUM7Z0JBQ04sT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQztnQkFDbEQsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQzthQUNyRDs7d0ZBQ1ksVUFBVSxjQXhEVixJQUFJLEVBcURHLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsYUFyRHhDLElBQUksRUFzREcsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBib29sZWFuQXR0cmlidXRlLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBpbmplY3QsIGlucHV0LCBtb2RlbCwgTmdNb2R1bGUsIG51bWJlckF0dHJpYnV0ZSwgc2lnbmFsLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyB1dWlkIH0gZnJvbSAnQHByaW1ldWl4L3V0aWxzJztcbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tICdwcmltZW5nL2Jhc2Vjb21wb25lbnQnO1xuaW1wb3J0IHsgVGFic1N0eWxlIH0gZnJvbSAnLi9zdHlsZS90YWJzc3R5bGUnO1xuaW1wb3J0IHsgVGFiIH0gZnJvbSAnLi90YWInO1xuaW1wb3J0IHsgVGFiTGlzdCB9IGZyb20gJy4vdGFibGlzdCc7XG5pbXBvcnQgeyBUYWJQYW5lbCB9IGZyb20gJy4vdGFicGFuZWwnO1xuaW1wb3J0IHsgVGFiUGFuZWxzIH0gZnJvbSAnLi90YWJwYW5lbHMnO1xuXG4vKipcbiAqIFRhYnMgZmFjaWxpdGF0ZXMgc2VhbWxlc3Mgc3dpdGNoaW5nIGJldHdlZW4gZGlmZmVyZW50IHZpZXdzLlxuICogQGdyb3VwIENvbXBvbmVudHNcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdwLXRhYnMnLFxuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gICAgdGVtcGxhdGU6IGAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBwcm92aWRlcnM6IFtUYWJzU3R5bGVdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1tjbGFzcy5wLXRhYnNdJzogJ3RydWUnLFxuICAgICAgICAnW2NsYXNzLnAtdGFicy1zY3JvbGxhYmxlXSc6ICdzY3JvbGxhYmxlKCknLFxuICAgICAgICAnW2NsYXNzLnAtY29tcG9uZW50XSc6ICd0cnVlJyxcbiAgICAgICAgJ1thdHRyLmRhdGEtcGMtbmFtZV0nOiAnXCJ0YWJzXCInLFxuICAgICAgICAnW2F0dHIuaWRdJzogJ2lkJ1xuICAgIH1cbn0pXG5leHBvcnQgY2xhc3MgVGFicyBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIFZhbHVlIG9mIHRoZSBhY3RpdmUgdGFiLlxuICAgICAqIEBkZWZhdWx0VmFsdWUgdW5kZWZpbmVkXG4gICAgICogQGdyb3VwIFByb3BzXG4gICAgICovXG4gICAgdmFsdWUgPSBtb2RlbDxzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG4gICAgLyoqXG4gICAgICogV2hlbiBzcGVjaWZpZWQsIGVuYWJsZXMgaG9yaXpvbnRhbCBhbmQvb3IgdmVydGljYWwgc2Nyb2xsaW5nLlxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFZhbHVlIGZhbHNlXG4gICAgICogQGdyb3VwIFByb3BzXG4gICAgICovXG4gICAgc2Nyb2xsYWJsZSA9IGlucHV0KGZhbHNlLCB7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KTtcbiAgICAvKipcbiAgICAgKiBXaGVuIGVuYWJsZWQsIGhpZGRlbiB0YWJzIGFyZSBub3QgcmVuZGVyZWQgYXQgYWxsLiBEZWZhdWx0cyB0byBmYWxzZSB0aGF0IGhpZGVzIHRhYnMgd2l0aCBjc3MuXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0VmFsdWUgZmFsc2VcbiAgICAgKiBAZ3JvdXAgUHJvcHNcbiAgICAgKi9cbiAgICBsYXp5ID0gaW5wdXQoZmFsc2UsIHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pO1xuICAgIC8qKlxuICAgICAqIFdoZW4gZW5hYmxlZCwgdGhlIGZvY3VzZWQgdGFiIGlzIGFjdGl2YXRlZC5cbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHRWYWx1ZSBmYWxzZVxuICAgICAqIEBncm91cCBQcm9wc1xuICAgICAqL1xuICAgIHNlbGVjdE9uRm9jdXMgPSBpbnB1dChmYWxzZSwgeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSk7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBkaXNwbGF5IG5hdmlnYXRpb24gYnV0dG9ucyBpbiBjb250YWluZXIgd2hlbiBzY3JvbGxhYmxlIGlzIGVuYWJsZWQuXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0VmFsdWUgdHJ1ZVxuICAgICAqIEBncm91cCBQcm9wc1xuICAgICAqL1xuICAgIHNob3dOYXZpZ2F0b3JzID0gaW5wdXQodHJ1ZSwgeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSk7XG4gICAgLyoqXG4gICAgICogVGFiaW5kZXggb2YgdGhlIHRhYiBidXR0b25zLlxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0VmFsdWUgMFxuICAgICAqIEBncm91cCBQcm9wc1xuICAgICAqL1xuICAgIHRhYmluZGV4ID0gaW5wdXQoMCwgeyB0cmFuc2Zvcm06IG51bWJlckF0dHJpYnV0ZSB9KTtcblxuICAgIGlkID0gc2lnbmFsPHN0cmluZz4odXVpZCgncG5faWRfJykpO1xuXG4gICAgX2NvbXBvbmVudFN0eWxlID0gaW5qZWN0KFRhYnNTdHlsZSk7XG5cbiAgICB1cGRhdGVWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlLnVwZGF0ZSgoKSA9PiBuZXdWYWx1ZSk7XG4gICAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtUYWJzLCBUYWJQYW5lbHMsIFRhYlBhbmVsLCBUYWJMaXN0LCBUYWJdLFxuICAgIGV4cG9ydHM6IFtUYWJzLCBUYWJQYW5lbHMsIFRhYlBhbmVsLCBUYWJMaXN0LCBUYWJdXG59KVxuZXhwb3J0IGNsYXNzIFRhYnNNb2R1bGUge31cbiJdfQ==