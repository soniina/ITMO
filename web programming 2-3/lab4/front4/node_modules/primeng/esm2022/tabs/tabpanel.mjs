import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, computed, forwardRef, inject, model, ViewEncapsulation } from '@angular/core';
import { equals } from '@primeuix/utils';
import { BaseComponent } from 'primeng/basecomponent';
import { Tabs } from './tabs';
import * as i0 from "@angular/core";
const _c0 = ["*"];
function TabPanel_Conditional_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0);
} }
/**
 * TabPanel is a helper component for Tabs component.
 * @group Components
 */
export class TabPanel extends BaseComponent {
    pcTabs = inject(forwardRef(() => Tabs));
    /**
     * Value of the active tab.
     * @defaultValue undefined
     * @group Props
     */
    value = model(undefined);
    id = computed(() => `${this.pcTabs.id()}_tabpanel_${this.value()}`);
    ariaLabelledby = computed(() => `${this.pcTabs.id()}_tab_${this.value()}`);
    active = computed(() => equals(this.pcTabs.value(), this.value()));
    static ɵfac = /*@__PURE__*/ (() => { let ɵTabPanel_BaseFactory; return function TabPanel_Factory(__ngFactoryType__) { return (ɵTabPanel_BaseFactory || (ɵTabPanel_BaseFactory = i0.ɵɵgetInheritedFactory(TabPanel)))(__ngFactoryType__ || TabPanel); }; })();
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TabPanel, selectors: [["p-tabpanel"]], hostVars: 9, hostBindings: function TabPanel_HostBindings(rf, ctx) { if (rf & 2) {
            i0.ɵɵattribute("data-pc-name", "tabpanel")("id", ctx.id())("role", "tabpanel")("aria-labelledby", ctx.ariaLabelledby())("data-p-active", ctx.active());
            i0.ɵɵclassProp("p-tabpanel", true)("p-component", true);
        } }, inputs: { value: [1, "value"] }, outputs: { value: "valueChange" }, standalone: true, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature], ngContentSelectors: _c0, decls: 1, vars: 1, template: function TabPanel_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵtemplate(0, TabPanel_Conditional_0_Template, 1, 0);
        } if (rf & 2) {
            i0.ɵɵconditional(ctx.active() ? 0 : -1);
        } }, dependencies: [CommonModule], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TabPanel, [{
        type: Component,
        args: [{
                selector: 'p-tabpanel',
                standalone: true,
                imports: [CommonModule],
                template: `@if (active()) {
        <ng-content></ng-content>
    }`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    '[class.p-tabpanel]': 'true',
                    '[class.p-component]': 'true',
                    '[attr.data-pc-name]': '"tabpanel"',
                    '[attr.id]': 'id()',
                    '[attr.role]': '"tabpanel"',
                    '[attr.aria-labelledby]': 'ariaLabelledby()',
                    '[attr.data-p-active]': 'active()'
                }
            }]
    }], null, null); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(TabPanel, { className: "TabPanel" }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicGFuZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGFicy90YWJwYW5lbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0gsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDOzs7O0lBV3RCLGtCQUF5Qjs7QUFUakM7OztHQUdHO0FBb0JILE1BQU0sT0FBTyxRQUFTLFNBQVEsYUFBYTtJQUN2QyxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3hDOzs7O09BSUc7SUFDSCxLQUFLLEdBQUcsS0FBSyxDQUE4QixTQUFTLENBQUMsQ0FBQztJQUV0RCxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXBFLGNBQWMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFM0UsTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOzZNQWIxRCxRQUFRLHlCQUFSLFFBQVE7NkRBQVIsUUFBUTsyQ0FBUixVQUFVLFFBQVYsUUFBSSxVQUFKLFVBQVUscUJBQVYsb0JBQWdCLG1CQUFoQixZQUFRO1lBQVIsNkJBQUEsSUFBSSxDQUFJLGdCQUFSLElBQUksQ0FBSTs7O1lBZk4sdURBQWdCOztZQUFoQix1Q0FFVjs0QkFIUyxZQUFZOztpRkFnQmIsUUFBUTtjQW5CcEIsU0FBUztlQUFDO2dCQUNQLFFBQVEsRUFBRSxZQUFZO2dCQUN0QixVQUFVLEVBQUUsSUFBSTtnQkFDaEIsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2dCQUN2QixRQUFRLEVBQUU7O01BRVI7Z0JBQ0YsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxJQUFJLEVBQUU7b0JBQ0Ysb0JBQW9CLEVBQUUsTUFBTTtvQkFDNUIscUJBQXFCLEVBQUUsTUFBTTtvQkFDN0IscUJBQXFCLEVBQUUsWUFBWTtvQkFDbkMsV0FBVyxFQUFFLE1BQU07b0JBQ25CLGFBQWEsRUFBRSxZQUFZO29CQUMzQix3QkFBd0IsRUFBRSxrQkFBa0I7b0JBQzVDLHNCQUFzQixFQUFFLFVBQVU7aUJBQ3JDO2FBQ0o7O2tGQUNZLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgY29tcHV0ZWQsIGZvcndhcmRSZWYsIGluamVjdCwgbW9kZWwsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBlcXVhbHMgfSBmcm9tICdAcHJpbWV1aXgvdXRpbHMnO1xuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCB9IGZyb20gJ3ByaW1lbmcvYmFzZWNvbXBvbmVudCc7XG5pbXBvcnQgeyBUYWJzIH0gZnJvbSAnLi90YWJzJztcblxuLyoqXG4gKiBUYWJQYW5lbCBpcyBhIGhlbHBlciBjb21wb25lbnQgZm9yIFRhYnMgY29tcG9uZW50LlxuICogQGdyb3VwIENvbXBvbmVudHNcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdwLXRhYnBhbmVsJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICAgIHRlbXBsYXRlOiBgQGlmIChhY3RpdmUoKSkge1xuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgfWAsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbY2xhc3MucC10YWJwYW5lbF0nOiAndHJ1ZScsXG4gICAgICAgICdbY2xhc3MucC1jb21wb25lbnRdJzogJ3RydWUnLFxuICAgICAgICAnW2F0dHIuZGF0YS1wYy1uYW1lXSc6ICdcInRhYnBhbmVsXCInLFxuICAgICAgICAnW2F0dHIuaWRdJzogJ2lkKCknLFxuICAgICAgICAnW2F0dHIucm9sZV0nOiAnXCJ0YWJwYW5lbFwiJyxcbiAgICAgICAgJ1thdHRyLmFyaWEtbGFiZWxsZWRieV0nOiAnYXJpYUxhYmVsbGVkYnkoKScsXG4gICAgICAgICdbYXR0ci5kYXRhLXAtYWN0aXZlXSc6ICdhY3RpdmUoKSdcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIFRhYlBhbmVsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gICAgcGNUYWJzID0gaW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVGFicykpO1xuICAgIC8qKlxuICAgICAqIFZhbHVlIG9mIHRoZSBhY3RpdmUgdGFiLlxuICAgICAqIEBkZWZhdWx0VmFsdWUgdW5kZWZpbmVkXG4gICAgICogQGdyb3VwIFByb3BzXG4gICAgICovXG4gICAgdmFsdWUgPSBtb2RlbDxzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cbiAgICBpZCA9IGNvbXB1dGVkKCgpID0+IGAke3RoaXMucGNUYWJzLmlkKCl9X3RhYnBhbmVsXyR7dGhpcy52YWx1ZSgpfWApO1xuXG4gICAgYXJpYUxhYmVsbGVkYnkgPSBjb21wdXRlZCgoKSA9PiBgJHt0aGlzLnBjVGFicy5pZCgpfV90YWJfJHt0aGlzLnZhbHVlKCl9YCk7XG5cbiAgICBhY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBlcXVhbHModGhpcy5wY1RhYnMudmFsdWUoKSwgdGhpcy52YWx1ZSgpKSk7XG59XG4iXX0=