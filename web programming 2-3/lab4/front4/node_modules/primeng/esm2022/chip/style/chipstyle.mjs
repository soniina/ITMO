import { Injectable } from '@angular/core';
import { BaseStyle } from 'primeng/base';
import * as i0 from "@angular/core";
const theme = ({ dt }) => `
.p-chip {
    display: inline-flex;
    align-items: center;
    background: ${dt('chip.background')};
    color: ${dt('chip.color')};
    border-radius: ${dt('chip.border.radius')};
    padding: ${dt('chip.padding.y')} ${dt('chip.padding.x')};
    gap: ${dt('chip.gap')};
}

.p-chip-icon {
    color: ${dt('chip.icon.color')};
    font-size: ${dt('chip.icon.font.size')};
    width: ${dt('chip.icon.size')};
    height: ${dt('chip.icon.size')};
}

.p-chip-image {
    border-radius: 50%;
    width: ${dt('chip.image.width')};
    height: ${dt('chip.image.height')};
    margin-left: calc(-1 * ${dt('chip.padding.y')});
}

.p-chip:has(.p-chip-remove-icon) {
    padding-inline-end: ${dt('chip.padding.y')};
}

.p-chip:has(.p-chip-image) {
    padding-top: calc(${dt('chip.padding.y')} / 2);
    padding-bottom: calc(${dt('chip.padding.y')} / 2);
}

.p-chip-remove-icon {
    cursor: pointer;
    font-size: ${dt('chip.remove.icon.font.size')};
    width: ${dt('chip.remove.icon.size')};
    height: ${dt('chip.remove.icon.size')};
    color: ${dt('chip.remove.icon.color')};
    border-radius: 50%;
    transition: outline-color ${dt('chip.transition.duration')}, box-shadow ${dt('chip.transition.duration')};
    outline-color: transparent;
}

.p-chip-remove-icon:focus-visible {
    box-shadow: ${dt('chip.remove.icon.focus.ring.shadow')};
    outline: ${dt('chip.remove.icon.focus.ring.width')} ${dt('chip.remove.icon.focus.ring.style')} ${dt('chip.remove.icon.focus.ring.color')};
    outline-offset: ${dt('chip.remove.icon.focus.ring.offset')};
}
`;
const classes = {
    root: 'p-chip p-component',
    image: 'p-chip-image',
    icon: 'p-chip-icon',
    label: 'p-chip-label',
    removeIcon: 'p-chip-remove-icon'
};
export class ChipStyle extends BaseStyle {
    name = 'chip';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵChipStyle_BaseFactory; return function ChipStyle_Factory(__ngFactoryType__) { return (ɵChipStyle_BaseFactory || (ɵChipStyle_BaseFactory = i0.ɵɵgetInheritedFactory(ChipStyle)))(__ngFactoryType__ || ChipStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ChipStyle, factory: ChipStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ChipStyle, [{
        type: Injectable
    }], null, null); })();
/**
 *
 * Chip represents people using icons, labels and images.
 *
 * [Live Demo](https://www.primeng.org/chip)
 *
 * @module chipstyle
 *
 */
export var ChipClasses;
(function (ChipClasses) {
    /**
     * Class name of the root element
     */
    ChipClasses["root"] = "p-chip";
    /**
     * Class name of the image element
     */
    ChipClasses["image"] = "p-chip-image";
    /**
     * Class name of the icon element
     */
    ChipClasses["icon"] = "p-chip-icon";
    /**
     * Class name of the label element
     */
    ChipClasses["label"] = "p-chip-label";
    /**
     * Class name of the remove icon element
     */
    ChipClasses["removeIcon"] = "p-chip-remove-icon";
})(ChipClasses || (ChipClasses = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcHN0eWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NoaXAvc3R5bGUvY2hpcHN0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7OztrQkFJUixFQUFFLENBQUMsaUJBQWlCLENBQUM7YUFDMUIsRUFBRSxDQUFDLFlBQVksQ0FBQztxQkFDUixFQUFFLENBQUMsb0JBQW9CLENBQUM7ZUFDOUIsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLGdCQUFnQixDQUFDO1dBQ2hELEVBQUUsQ0FBQyxVQUFVLENBQUM7Ozs7YUFJWixFQUFFLENBQUMsaUJBQWlCLENBQUM7aUJBQ2pCLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzthQUM3QixFQUFFLENBQUMsZ0JBQWdCLENBQUM7Y0FDbkIsRUFBRSxDQUFDLGdCQUFnQixDQUFDOzs7OzthQUtyQixFQUFFLENBQUMsa0JBQWtCLENBQUM7Y0FDckIsRUFBRSxDQUFDLG1CQUFtQixDQUFDOzZCQUNSLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzs7OzswQkFJdkIsRUFBRSxDQUFDLGdCQUFnQixDQUFDOzs7O3dCQUl0QixFQUFFLENBQUMsZ0JBQWdCLENBQUM7MkJBQ2pCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzs7Ozs7aUJBSzlCLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzthQUNwQyxFQUFFLENBQUMsdUJBQXVCLENBQUM7Y0FDMUIsRUFBRSxDQUFDLHVCQUF1QixDQUFDO2FBQzVCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQzs7Z0NBRVQsRUFBRSxDQUFDLDBCQUEwQixDQUFDLGdCQUFnQixFQUFFLENBQUMsMEJBQTBCLENBQUM7Ozs7O2tCQUsxRixFQUFFLENBQUMsb0NBQW9DLENBQUM7ZUFDM0MsRUFBRSxDQUFDLG1DQUFtQyxDQUFDLElBQUksRUFBRSxDQUFDLG1DQUFtQyxDQUFDLElBQUksRUFBRSxDQUFDLG1DQUFtQyxDQUFDO3NCQUN0SCxFQUFFLENBQUMsb0NBQW9DLENBQUM7O0NBRTdELENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRztJQUNaLElBQUksRUFBRSxvQkFBb0I7SUFDMUIsS0FBSyxFQUFFLGNBQWM7SUFDckIsSUFBSSxFQUFFLGFBQWE7SUFDbkIsS0FBSyxFQUFFLGNBQWM7SUFDckIsVUFBVSxFQUFFLG9CQUFvQjtDQUNuQyxDQUFDO0FBR0YsTUFBTSxPQUFPLFNBQVUsU0FBUSxTQUFTO0lBQ3BDLElBQUksR0FBRyxNQUFNLENBQUM7SUFFZCxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBRWQsT0FBTyxHQUFHLE9BQU8sQ0FBQztpTkFMVCxTQUFTLHlCQUFULFNBQVM7Z0VBQVQsU0FBUyxXQUFULFNBQVM7O2lGQUFULFNBQVM7Y0FEckIsVUFBVTs7QUFTWDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sQ0FBTixJQUFZLFdBcUJYO0FBckJELFdBQVksV0FBVztJQUNuQjs7T0FFRztJQUNILDhCQUFlLENBQUE7SUFDZjs7T0FFRztJQUNILHFDQUFzQixDQUFBO0lBQ3RCOztPQUVHO0lBQ0gsbUNBQW9CLENBQUE7SUFDcEI7O09BRUc7SUFDSCxxQ0FBc0IsQ0FBQTtJQUN0Qjs7T0FFRztJQUNILGdEQUFpQyxDQUFBO0FBQ3JDLENBQUMsRUFyQlcsV0FBVyxLQUFYLFdBQVcsUUFxQnRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVN0eWxlIH0gZnJvbSAncHJpbWVuZy9iYXNlJztcblxuY29uc3QgdGhlbWUgPSAoeyBkdCB9KSA9PiBgXG4ucC1jaGlwIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJhY2tncm91bmQ6ICR7ZHQoJ2NoaXAuYmFja2dyb3VuZCcpfTtcbiAgICBjb2xvcjogJHtkdCgnY2hpcC5jb2xvcicpfTtcbiAgICBib3JkZXItcmFkaXVzOiAke2R0KCdjaGlwLmJvcmRlci5yYWRpdXMnKX07XG4gICAgcGFkZGluZzogJHtkdCgnY2hpcC5wYWRkaW5nLnknKX0gJHtkdCgnY2hpcC5wYWRkaW5nLngnKX07XG4gICAgZ2FwOiAke2R0KCdjaGlwLmdhcCcpfTtcbn1cblxuLnAtY2hpcC1pY29uIHtcbiAgICBjb2xvcjogJHtkdCgnY2hpcC5pY29uLmNvbG9yJyl9O1xuICAgIGZvbnQtc2l6ZTogJHtkdCgnY2hpcC5pY29uLmZvbnQuc2l6ZScpfTtcbiAgICB3aWR0aDogJHtkdCgnY2hpcC5pY29uLnNpemUnKX07XG4gICAgaGVpZ2h0OiAke2R0KCdjaGlwLmljb24uc2l6ZScpfTtcbn1cblxuLnAtY2hpcC1pbWFnZSB7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIHdpZHRoOiAke2R0KCdjaGlwLmltYWdlLndpZHRoJyl9O1xuICAgIGhlaWdodDogJHtkdCgnY2hpcC5pbWFnZS5oZWlnaHQnKX07XG4gICAgbWFyZ2luLWxlZnQ6IGNhbGMoLTEgKiAke2R0KCdjaGlwLnBhZGRpbmcueScpfSk7XG59XG5cbi5wLWNoaXA6aGFzKC5wLWNoaXAtcmVtb3ZlLWljb24pIHtcbiAgICBwYWRkaW5nLWlubGluZS1lbmQ6ICR7ZHQoJ2NoaXAucGFkZGluZy55Jyl9O1xufVxuXG4ucC1jaGlwOmhhcygucC1jaGlwLWltYWdlKSB7XG4gICAgcGFkZGluZy10b3A6IGNhbGMoJHtkdCgnY2hpcC5wYWRkaW5nLnknKX0gLyAyKTtcbiAgICBwYWRkaW5nLWJvdHRvbTogY2FsYygke2R0KCdjaGlwLnBhZGRpbmcueScpfSAvIDIpO1xufVxuXG4ucC1jaGlwLXJlbW92ZS1pY29uIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgZm9udC1zaXplOiAke2R0KCdjaGlwLnJlbW92ZS5pY29uLmZvbnQuc2l6ZScpfTtcbiAgICB3aWR0aDogJHtkdCgnY2hpcC5yZW1vdmUuaWNvbi5zaXplJyl9O1xuICAgIGhlaWdodDogJHtkdCgnY2hpcC5yZW1vdmUuaWNvbi5zaXplJyl9O1xuICAgIGNvbG9yOiAke2R0KCdjaGlwLnJlbW92ZS5pY29uLmNvbG9yJyl9O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICB0cmFuc2l0aW9uOiBvdXRsaW5lLWNvbG9yICR7ZHQoJ2NoaXAudHJhbnNpdGlvbi5kdXJhdGlvbicpfSwgYm94LXNoYWRvdyAke2R0KCdjaGlwLnRyYW5zaXRpb24uZHVyYXRpb24nKX07XG4gICAgb3V0bGluZS1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi5wLWNoaXAtcmVtb3ZlLWljb246Zm9jdXMtdmlzaWJsZSB7XG4gICAgYm94LXNoYWRvdzogJHtkdCgnY2hpcC5yZW1vdmUuaWNvbi5mb2N1cy5yaW5nLnNoYWRvdycpfTtcbiAgICBvdXRsaW5lOiAke2R0KCdjaGlwLnJlbW92ZS5pY29uLmZvY3VzLnJpbmcud2lkdGgnKX0gJHtkdCgnY2hpcC5yZW1vdmUuaWNvbi5mb2N1cy5yaW5nLnN0eWxlJyl9ICR7ZHQoJ2NoaXAucmVtb3ZlLmljb24uZm9jdXMucmluZy5jb2xvcicpfTtcbiAgICBvdXRsaW5lLW9mZnNldDogJHtkdCgnY2hpcC5yZW1vdmUuaWNvbi5mb2N1cy5yaW5nLm9mZnNldCcpfTtcbn1cbmA7XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gICAgcm9vdDogJ3AtY2hpcCBwLWNvbXBvbmVudCcsXG4gICAgaW1hZ2U6ICdwLWNoaXAtaW1hZ2UnLFxuICAgIGljb246ICdwLWNoaXAtaWNvbicsXG4gICAgbGFiZWw6ICdwLWNoaXAtbGFiZWwnLFxuICAgIHJlbW92ZUljb246ICdwLWNoaXAtcmVtb3ZlLWljb24nXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2hpcFN0eWxlIGV4dGVuZHMgQmFzZVN0eWxlIHtcbiAgICBuYW1lID0gJ2NoaXAnO1xuXG4gICAgdGhlbWUgPSB0aGVtZTtcblxuICAgIGNsYXNzZXMgPSBjbGFzc2VzO1xufVxuXG4vKipcbiAqXG4gKiBDaGlwIHJlcHJlc2VudHMgcGVvcGxlIHVzaW5nIGljb25zLCBsYWJlbHMgYW5kIGltYWdlcy5cbiAqXG4gKiBbTGl2ZSBEZW1vXShodHRwczovL3d3dy5wcmltZW5nLm9yZy9jaGlwKVxuICpcbiAqIEBtb2R1bGUgY2hpcHN0eWxlXG4gKlxuICovXG5leHBvcnQgZW51bSBDaGlwQ2xhc3NlcyB7XG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50XG4gICAgICovXG4gICAgcm9vdCA9ICdwLWNoaXAnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGltYWdlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBpbWFnZSA9ICdwLWNoaXAtaW1hZ2UnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGljb24gZWxlbWVudFxuICAgICAqL1xuICAgIGljb24gPSAncC1jaGlwLWljb24nLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIGxhYmVsIGVsZW1lbnRcbiAgICAgKi9cbiAgICBsYWJlbCA9ICdwLWNoaXAtbGFiZWwnLFxuICAgIC8qKlxuICAgICAqIENsYXNzIG5hbWUgb2YgdGhlIHJlbW92ZSBpY29uIGVsZW1lbnRcbiAgICAgKi9cbiAgICByZW1vdmVJY29uID0gJ3AtY2hpcC1yZW1vdmUtaWNvbidcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGlwU3R5bGUgZXh0ZW5kcyBCYXNlU3R5bGUge31cbiJdfQ==