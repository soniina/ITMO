import { DOCUMENT } from '@angular/common';
import { Injectable, inject } from '@angular/core';
import { setAttribute, setAttributes } from '@primeuix/utils';
import * as i0 from "@angular/core";
let _id = 0;
export class UseStyle {
    document = inject(DOCUMENT);
    use(css, options = {}) {
        let isLoaded = false;
        let cssRef = css;
        let styleRef = null;
        const { immediate = true, manual = false, name = `style_${++_id}`, id = undefined, media = undefined, nonce = undefined, first = false, props = {} } = options;
        if (!this.document)
            return;
        styleRef = this.document.querySelector(`style[data-primeng-style-id="${name}"]`) || this.document.getElementById(id) || this.document.createElement('style');
        if (!styleRef.isConnected) {
            cssRef = css;
            setAttributes(styleRef, {
                type: 'text/css',
                media,
                nonce
            });
            const HEAD = this.document.head;
            first && HEAD.firstChild ? HEAD.insertBefore(styleRef, HEAD.firstChild) : HEAD.appendChild(styleRef);
            setAttribute(styleRef, 'data-primeng-style-id', name);
        }
        if (styleRef.textContent !== cssRef) {
            styleRef.textContent = cssRef;
        }
        return {
            id,
            name,
            el: styleRef,
            css: cssRef
        };
    }
    static ɵfac = function UseStyle_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || UseStyle)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UseStyle, factory: UseStyle.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(UseStyle, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlc3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXNlc3R5bGUvdXNlc3R5bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRTlELElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztBQUdaLE1BQU0sT0FBTyxRQUFRO0lBQ2pCLFFBQVEsR0FBYSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdEMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFlLEVBQUU7UUFDdEIsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFcEIsTUFBTSxFQUFFLFNBQVMsR0FBRyxJQUFJLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxJQUFJLEdBQUcsU0FBUyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxTQUFTLEVBQUUsS0FBSyxHQUFHLFNBQVMsRUFBRSxLQUFLLEdBQUcsU0FBUyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEVBQUUsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUUvSixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFPO1FBQzNCLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3SixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3hCLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDYixhQUFhLENBQUMsUUFBUSxFQUFFO2dCQUNwQixJQUFJLEVBQUUsVUFBVTtnQkFDaEIsS0FBSztnQkFDTCxLQUFLO2FBQ1IsQ0FBQyxDQUFDO1lBRUgsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFFaEMsS0FBSyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNyRyxZQUFZLENBQUMsUUFBUSxFQUFFLHVCQUF1QixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFELENBQUM7UUFFRCxJQUFJLFFBQVEsQ0FBQyxXQUFXLEtBQUssTUFBTSxFQUFFLENBQUM7WUFDbEMsUUFBUSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDbEMsQ0FBQztRQUVELE9BQU87WUFDSCxFQUFFO1lBQ0YsSUFBSTtZQUNKLEVBQUUsRUFBRSxRQUFRO1lBQ1osR0FBRyxFQUFFLE1BQU07U0FDZCxDQUFDO0lBQ04sQ0FBQztrR0FyQ1EsUUFBUTtnRUFBUixRQUFRLFdBQVIsUUFBUSxtQkFESyxNQUFNOztpRkFDbkIsUUFBUTtjQURwQixVQUFVO2VBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBzZXRBdHRyaWJ1dGUsIHNldEF0dHJpYnV0ZXMgfSBmcm9tICdAcHJpbWV1aXgvdXRpbHMnO1xuXG5sZXQgX2lkID0gMDtcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBVc2VTdHlsZSB7XG4gICAgZG9jdW1lbnQ6IERvY3VtZW50ID0gaW5qZWN0KERPQ1VNRU5UKTtcblxuICAgIHVzZShjc3MsIG9wdGlvbnM6IGFueSA9IHt9KSB7XG4gICAgICAgIGxldCBpc0xvYWRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgY3NzUmVmID0gY3NzO1xuICAgICAgICBsZXQgc3R5bGVSZWYgPSBudWxsO1xuXG4gICAgICAgIGNvbnN0IHsgaW1tZWRpYXRlID0gdHJ1ZSwgbWFudWFsID0gZmFsc2UsIG5hbWUgPSBgc3R5bGVfJHsrK19pZH1gLCBpZCA9IHVuZGVmaW5lZCwgbWVkaWEgPSB1bmRlZmluZWQsIG5vbmNlID0gdW5kZWZpbmVkLCBmaXJzdCA9IGZhbHNlLCBwcm9wcyA9IHt9IH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmICghdGhpcy5kb2N1bWVudCkgcmV0dXJuO1xuICAgICAgICBzdHlsZVJlZiA9IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc3R5bGVbZGF0YS1wcmltZW5nLXN0eWxlLWlkPVwiJHtuYW1lfVwiXWApIHx8IHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIHx8IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICAgICAgICBpZiAoIXN0eWxlUmVmLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICBjc3NSZWYgPSBjc3M7XG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGVzKHN0eWxlUmVmLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHQvY3NzJyxcbiAgICAgICAgICAgICAgICBtZWRpYSxcbiAgICAgICAgICAgICAgICBub25jZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IEhFQUQgPSB0aGlzLmRvY3VtZW50LmhlYWQ7XG5cbiAgICAgICAgICAgIGZpcnN0ICYmIEhFQUQuZmlyc3RDaGlsZCA/IEhFQUQuaW5zZXJ0QmVmb3JlKHN0eWxlUmVmLCBIRUFELmZpcnN0Q2hpbGQpIDogSEVBRC5hcHBlbmRDaGlsZChzdHlsZVJlZik7XG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGUoc3R5bGVSZWYsICdkYXRhLXByaW1lbmctc3R5bGUtaWQnLCBuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHlsZVJlZi50ZXh0Q29udGVudCAhPT0gY3NzUmVmKSB7XG4gICAgICAgICAgICBzdHlsZVJlZi50ZXh0Q29udGVudCA9IGNzc1JlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBlbDogc3R5bGVSZWYsXG4gICAgICAgICAgICBjc3M6IGNzc1JlZlxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==