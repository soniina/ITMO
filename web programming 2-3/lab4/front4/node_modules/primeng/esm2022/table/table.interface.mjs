export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"table.interface.js","sourceRoot":"","sources":["../../../src/table/table.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { TemplateRef } from '@angular/core';\nimport { FilterMetadata, LazyLoadMeta } from 'primeng/api';\nimport { ButtonProps } from 'primeng/button';\nimport { Table } from './table';\n/**\n * Custom select event.\n * @see {@link Table.onRowSelect}\n * @extends {LazyLoadMeta}\n * @group Events\n */\nexport interface TableRowSelectEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent?: Event;\n    /**\n     * Row data.\n     */\n    data?: any;\n    /**\n     * Selection type.\n     */\n    type?: string;\n    /**\n     * Index of the selected row.\n     */\n    index?: number;\n}\n/**\n * Custom unselect event.\n * @see {@link Table.onRowUnselect}\n * @extends {TableRowSelectEvent}\n * @group Events\n */\nexport interface TableRowUnSelectEvent extends TableRowSelectEvent {}\n/**\n * Custom page event.\n * @see {@link Table.onPage}\n */\nexport interface TablePageEvent {\n    /**\n     * Index of the first element.\n     */\n    first: number;\n    /**\n     * Row count.\n     */\n    rows: number;\n}\n/**\n * Custom filter event.\n * @see {@link Table.onFilter}\n * @group Events\n */\nexport interface TableFilterEvent {\n    /**\n     * Filter meta.\n     */\n    filters?: { [s: string]: FilterMetadata | undefined };\n    /**\n     * Value after filter.\n     */\n    filteredValue?: any[] | any;\n}\n/**\n * Custom lazy load event.\n * @see {@link Table.onLazyLoad}\n * @extends {LazyLoadMeta}\n * @group Events\n */\nexport interface TableLazyLoadEvent extends LazyLoadMeta {\n    /**\n     * First element in viewport.\n     */\n    first?: number;\n    /**\n     * Last element in viewport.\n     */\n    last?: number;\n}\n/**\n * Custom row expand event.\n * @see {@link Table.onRowExpand}\n * @group Events\n */\nexport interface TableRowExpandEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent: Event;\n    /**\n     * Row data.\n     */\n    data: any;\n}\n/**\n * Custom row collapse event.\n * @see {@link Table.onRowCollapse}\n * @extends {TableRowExpandEvent}\n * @group Events\n */\nexport interface TableRowCollapseEvent extends TableRowExpandEvent {}\n/**\n * Custom context menu select event.\n * @see {@link Table.onContextMenuSelect}\n * @group Events\n */\nexport interface TableContextMenuSelectEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent: Event;\n    /**\n     * Row data.\n     */\n    data: any;\n    /**\n     * Row index.\n     */\n    index: number;\n}\n/**\n * Custom context menu selection change event.\n * @see {@link Table.contextMenuSelectionChange}\n * @group Events\n */\nexport interface TableContextMenuSelectionChangeEvent {\n    /**\n     * Row data.\n     */\n    data: any;\n}\n/**\n * Custom column resize event.\n * @see {@link Table.onColResize}\n * @group Events\n */\nexport interface TableColResizeEvent {\n    /**\n     * Instance of resized column.\n     */\n    element: HTMLElement;\n    /**\n     * Position.\n     */\n    delta: number;\n}\n/**\n * Custom column reorder event.\n * @see {@link Table.onColReorder}\n * @group Events\n */\nexport interface TableColumnReorderEvent {\n    /**\n     * Index of the dragged item.\n     */\n    dragIndex?: number;\n    /**\n     * Index of the drop position.\n     */\n    dropIndex?: number;\n    /**\n     * Columns after reorder.\n     */\n    columns?: any[];\n}\n/**\n * Custom row reorder event.\n * @see {@link Table.onRowReorder}\n * @group Events\n */\nexport interface TableRowReorderEvent {\n    /**\n     * Index of the dragged item.\n     */\n    dragIndex?: number;\n    /**\n     * Index of the drop position.\n     */\n    dropIndex?: number;\n}\n/**\n * Custom edit event.\n * @group Events\n */\nexport interface TableEditEvent {\n    /**\n     * Field to be edited.\n     */\n    field?: string;\n    /**\n     * New value.\n     */\n    data?: any;\n}\n/**\n * Custom edit init event.\n * @see {@link Table.onEditInit}\n * @group Events\n */\nexport interface TableEditInitEvent extends TableEditEvent {\n    /**\n     * Edited element index.\n     */\n    index: number;\n}\n/**\n * Custom edit cancel event.\n * @see {@link Table.onEditCancel}\n * @group Events\n */\nexport interface TableEditCancelEvent extends TableEditEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent?: Event;\n    /**\n     * Edited element index.\n     */\n    index?: number;\n}\n/**\n * Custom edit complete event.\n * @see {@link Table.onEditComplete}\n * @group Events\n */\nexport interface TableEditCompleteEvent extends TableEditCancelEvent {}\n/**\n * Custom checkbox toggle event.\n * @see {@link Table.onHeaderCheckboxToggle}\n * @group Events\n */\nexport interface TableHeaderCheckboxToggleEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent: Event;\n    /**\n     * Checked state.\n     */\n    checked: boolean;\n}\n/**\n * Custom all selection change event.\n * @see {@link Table.selectAllChange}\n * @group Events\n */\nexport interface TableSelectAllChangeEvent {\n    /**\n     * Browser event.\n     */\n    originalEvent: Event;\n    /**\n     * Checked state.\n     */\n    checked: boolean;\n}\n/**\n * Custom table filter popover button props options.\n */\nexport interface TableFilterButtonPopoverPropsOptions {\n    /**\n     * Add rule button props\n     */\n    addRule: ButtonProps | undefined;\n    /**\n     * Remove rule button props\n     */\n    removeRule: ButtonProps | undefined;\n    /**\n     * Apply button props\n     */\n    apply: ButtonProps | undefined;\n    /**\n     * Apply button props\n     */\n    clear: ButtonProps | undefined;\n}\n/**\n * Custom table filter inline button props options.\n */\nexport interface TableFilterButtonInlinePropsOptions {\n    /**\n     * Apply button props\n     */\n    clear: ButtonProps | undefined;\n}\n/**\n * Custom table filter buttons' props options.\n */\nexport interface TableFilterButtonPropsOptions {\n    /**\n     * Filter button props\n     */\n    filter: ButtonProps | undefined;\n    /**\n     * Inline filter buttons' options\n     */\n    inline: TableFilterButtonInlinePropsOptions | undefined;\n    /**\n     * Popover filter buttons' options\n     */\n    popover: TableFilterButtonPopoverPropsOptions | undefined;\n}\n/**\n * Custom CSV export options.\n */\nexport interface ExportCSVOptions {\n    /**\n     * Boolean value determining whether to export all selected values.\n     */\n    selectionOnly?: boolean;\n    /**\n     * Boolean value determining whether to export all values.\n     */\n    allValues?: boolean;\n}\n/**\n * Defines valid templates in Table.\n * @group Templates\n */\nexport interface TableTemplates {\n    /**\n     * Custom caption template.\n     */\n    caption(): TemplateRef<any>;\n    /**\n     * Custom grouped header template.\n     * @param {Object} context - row data.\n     */\n    headergrouped(context: {\n        /**\n         * Row data.\n         */\n        $implicit?: any;\n        /**\n         * Row index.\n         */\n        rowIndex?: number;\n        /**\n         * Columns.\n         */\n        columns?: any[];\n        /**\n         * Editing state.\n         */\n        editing?: boolean;\n        /**\n         * Frozen state.\n         */\n        frozen?: boolean;\n    }): TemplateRef<any>;\n    /**\n     * Custom grouped header template.\n     * @param {Object} context - header data.\n     */\n    header(context: {\n        /**\n         * Field.\n         */\n        $implicit: string;\n    }): TemplateRef<{ $implicit: string }>;\n    /**\n     * Custom body template.\n     * @param {Object} context - body data.\n     */\n    body(context: {\n        /**\n         * Columns.\n         */\n        $implicit: any;\n        /**\n         * Frozen state.\n         */\n        frozen: boolean;\n    }): TemplateRef<{ $implicit: any; frozen: boolean }>;\n    /**\n     * Custom loading body template.\n     * @param {Object} context - loading body data.\n     */\n    loadingbody(context: {\n        /**\n         * Row span.\n         */\n        rowspan?: number;\n        /**\n         * Row group.\n         */\n        rowgroup?: number;\n    }): TemplateRef<any>;\n    /**\n     * Custom footer template.\n     * @param {Object} context - footer data.\n     */\n    footer(context: {\n        /**\n         * Field.\n         */\n        $implicit: string;\n    }): TemplateRef<{ $implicit: string }>;\n    /**\n     * Custom footer template.\n     * @param {Object} context - footer data.\n     */\n    footergrouped(context: {\n        /**\n         * Columns.\n         */\n        $implicit: any[];\n    }): TemplateRef<any[]>;\n    /**\n     * Custom column group template.\n     * @param {Object} context - columns data.\n     */\n    colgroup(context: {\n        /**\n         * Columns.\n         */\n        $implicit: any[];\n    }): TemplateRef<any[]>;\n    /**\n     * Custom summary template.\n     */\n    summary(): TemplateRef<any>;\n    /**\n     * Custom expanded row template.\n     * @param {Object} context - expanded row data.\n     */\n    rowexpansion(context: {\n        /**\n         * Row span.\n         */\n        rowspan?: number;\n        /**\n         * Row group.\n         */\n        rowgroup?: number;\n        /**\n         * Expanded state.\n         */\n        expanded: boolean;\n    }): TemplateRef<any>;\n    /**\n     * Custom group header template.\n     * @param {Object} context - row data.\n     */\n    groupheader(context: {\n        /**\n         * Row data.\n         */\n        $implicit?: any;\n        /**\n         * Row index.\n         */\n        rowIndex?: number;\n        /**\n         * Columns.\n         */\n        columns?: any[];\n        /**\n         * Editing state.\n         */\n        editing?: boolean;\n        /**\n         * Frozen state.\n         */\n        frozen?: boolean;\n    }): TemplateRef<any>;\n    /**\n     * Custom group footer template.\n     * @param {TableRowContext} context - row data.\n     */\n    groupfooter(context: {\n        /**\n         * Row data.\n         */\n        $implicit?: any;\n        /**\n         * Row index.\n         */\n        rowIndex?: number;\n        /**\n         * Columns.\n         */\n        columns?: any[];\n        /**\n         * Editing state.\n         */\n        editing?: boolean;\n        /**\n         * Frozen state.\n         */\n        frozen?: boolean;\n    }): TemplateRef<any>;\n    /**\n     * Custom frozen header template.\n     * @param {*} context - columns.\n     */\n    frozenheader(): TemplateRef<{ $implicit: any[] }>;\n    /**\n     * Custom frozen body template.\n     * @param {Object} context - row data.\n     */\n    frozenbody(context: {\n        /**\n         * Row data.\n         */\n        $implicit?: any;\n        /**\n         * Row index.\n         */\n        rowIndex?: number;\n        /**\n         * Columns.\n         */\n        columns?: any[];\n        /**\n         * Editing state.\n         */\n        editing?: boolean;\n        /**\n         * Frozen state.\n         */\n        frozen?: boolean;\n    }): TemplateRef<any>;\n    /**\n     * Custom frozen footer template.\n     * @param {*} context - columns.\n     */\n    frozenfooter(): TemplateRef<{ $implicit: any[] }>;\n    /**\n     * Custom frozen column group template.\n     * @param {*} context - columns.\n     */\n    frozencolgroup(): TemplateRef<{ $implicit: any[] }>;\n    /**\n     * Custom frozen expanded row template.\n     * @param {Object} context - row data.\n     */\n    frozenrowexpansion(context: {\n        /**\n         * Row span.\n         */\n        rowspan?: number;\n        /**\n         * Row group.\n         */\n        rowgroup?: number;\n        /**\n         * Expanded state.\n         */\n        expanded: boolean;\n    }): TemplateRef<any>;\n    /**\n     * Custom empty message template.\n     */\n    emptymessage(context: {\n        /**\n         * Columns\n         */\n        $implicit: any[];\n        /**\n         * Frozen state.\n         */\n        frozen: boolean;\n    }): TemplateRef<{ $implicit: any[]; frozen: boolean }>;\n    /**\n     * Custom paginator left template.\n     */\n    paginatorleft(): TemplateRef<any>;\n    /**\n     * Custom paginator right template.\n     */\n    paginatorright(): TemplateRef<any>;\n    /**\n     * Custom paginator dropdown trigger icon template.\n     */\n    paginatordropdownicon(): TemplateRef<any>;\n    /**\n     * Custom paginator dropdown item template.\n     */\n    paginatordropdownitem(): TemplateRef<any>;\n    /**\n     * Custom paginator first page link icon template.\n     */\n    paginatorfirstpagelinkicon(): TemplateRef<any>;\n    /**\n     * Custom paginator last page link icon template.\n     */\n    paginatorlastpagelinkicon(): TemplateRef<any>;\n    /**\n     * Custom paginator previous page link icon template.\n     */\n    paginatorpreviouspagelinkicon(): TemplateRef<any>;\n    /**\n     * Custom paginator next page link icon template.\n     */\n    paginatornextpagelinkicon(): TemplateRef<any>;\n    /**\n     * Custom loading icon template.\n     */\n    loadingicon(): TemplateRef<any>;\n    /**\n     * Custom reorder indicator up icon template.\n     */\n    reorderindicatorupicon(): TemplateRef<any>;\n    /**\n     * Custom reorder indicator down icon template.\n     */\n    reorderindicatordownicon(): TemplateRef<any>;\n    /**\n     * Custom sort icon template.\n     */\n    sorticon(context: {\n        /**\n         * Sort order.\n         */\n        $implicit: number;\n    }): TemplateRef<{ $implicit: number }>;\n    /**\n     * Custom checkbox icon template.\n     * @param {Object} context - checkbox data.\n     */\n    checkboxicon(context: {\n        /**\n         * Checkbox state.\n         */\n        $implicit: boolean;\n        /**\n         * Partial selection state of row node.\n         */\n        partialSelected: boolean;\n    }): TemplateRef<{ $implicit: boolean; partialSelected: boolean }>;\n    /**\n     * Custom header checkbox icon template.\n     * @param {Object} context - checkbox data.\n     */\n    headercheckboxicon(context: {\n        /**\n         * Checked state.\n         */\n        $implicit: boolean;\n    }): TemplateRef<{ $implicit: boolean }>;\n}\n"]}